// The Tofita Kernel
// Copyright (C) 2021  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// trampoline.asm . incbin
@extern const UInt8 binFont[]
@extern const UInt8 binFontBitmap[]
let fontWidth: UInt32 = 512
let fontHeight: UInt32 = 32

@extern const UInt8 binLeavesBitmap[]
let leavesWidth: UInt32 = 36
let leavesHeight: UInt32 = 25

Int64 _fltused = 0

fun drawPixel(framebuffer: Pointer<Framebuffer>, x: UInt32, y: UInt32, color: UInt32) {
	var pixels: Pointer<UInt32> = (UInt32 *)framebuffer.base
	pixels[(y * framebuffer.pixelsPerScanLine) + x] = color
}

@struct @packed @sizeOf(4)
class UefiPixel {
	var b: UInt8
	var g: UInt8
	var r: UInt8
	var a: UInt8
}

UInt32 getBitmapPixel(const bmp: Pointer<UInt8>, x: UInt32, y: UInt32, width: UInt32, height: UInt32) {
	let colors = bmp + 54
	var pixel: UefiPixel
	pixel.b = colors[((height - y - 1) * width + x) * 3 + 0]
	pixel.g = colors[((height - y - 1) * width + x) * 3 + 1]
	pixel.r = colors[((height - y - 1) * width + x) * 3 + 2]
	pixel.a = 0xFF
	var color: Pointer<UInt32> = (UInt32 *)Pointer.of(pixel)
	return *color
}

@struct @packed @sizeOf(12)
class TextFontList {
	var x: UInt16
	var y: UInt16
	var width: Float
}

TextFontList *textFontList = null

fun initText() {
	textFontList = (TextFontList *)binFont
}

Float getCharAdvance(const Char8 c) {
	var textChar: TextFontList = textFontList[(c] as! UInt64)
	return textChar.width
}

Float drawChar(c: Char8, x: Float, y: Int16, framebuffer: Pointer<Framebuffer>) {
	var textChar: TextFontList = textFontList[(c] as! UInt64)

	var xx: Int16 = (int32_t)(x + 0.5)
	var w: UInt16 = (int32_t)(textChar.width + 0.5)

	for (UInt16 yi = 0; yi < 12; yi++)
		for (UInt16 xi = 0; xi < w; xi++) {
			let atx: UInt32 = xx + xi
			let aty: UInt32 = y + yi

			let font = getBitmapPixel(binFontBitmap, textChar.x + xi, textChar.y + yi, fontWidth, fontHeight)

			drawPixel(framebuffer, atx, aty, font)
		}

	return textChar.width
}

fun drawText(const text: Pointer<WideChar>, y: Int16, framebuffer: Pointer<Framebuffer>) {
	var i: UInt16 = 0

	// Get width to center text on screen
	var width: Float = 0
	while ((uint16_t)text[i] != 0 && i < 255 * 255) {
		width += getCharAdvance((uint16_t)text[i] & 0xFF)
		i++
	}
	var xx: Float = framebuffer.width / 2 - width / 2

	i = 0
	while ((uint16_t)text[i] != 0 && i < 255 * 255) {
		xx += drawChar((uint16_t)text[i] & 0xFF, xx, y, framebuffer)
		i++
	}
}
