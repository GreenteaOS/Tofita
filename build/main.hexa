// The Tofita Kernel
// Copyright (C) 2019  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

module {
	declare class Config {
		let qemuFolder: String
		let tempFolder: String
		let versionMajor: Int
		let versionMinor: Int
		let versionName: String
	}
}

let fs = require('fs')

// Removes folder recursively
function deleteFolderRecursive(path, noRemoveSelf) {
	if (fs.existsSync(path)) {
		fs.readdirSync(path).forEach(function(file, index) {
			let curPath = path + "/" + file
			if (fs.lstatSync(curPath).isDirectory()) {
				deleteFolderRecursive(curPath)
			} else {
				fs.unlinkSync(curPath)
			}
		})
		// Fixes some random errors
		if (noRemoveSelf != true) fs.rmdirSync(path)
	}
}

let config: Config = JSON.parse(fs.readFileSync('config.json').toString())
let tasks = process.argv.slice()
tasks.shift()
tasks.shift()

if (tasks.length == 0) console.log('No tasks defined')

for (task in tasks) {
	switch (task) {
		case 'build':
			{
				// Cleanup
				if (!fs.existsSync(config.tempFolder + '\\tofita')) fs.mkdirSync(config.tempFolder + '\\tofita')
				deleteFolderRecursive(config.tempFolder + '\\tofita', noRemoveSelf: true)
				// Create directory tofita/iso/EFI/BOOT/
				let dirs = [
					'\\tofita',
					'\\tofita\\iso',
					'\\tofita\\iso\\EFI',
					'\\tofita\\iso\\EFI\\BOOT'
				]
				for (dir in dirs)
					if (!fs.existsSync(config.tempFolder + dir))
						fs.mkdirSync(config.tempFolder + dir)
				// Assets
				let assets = config.tempFolder + '\\tofita\\iso\\TOFITA.DAT'
				if (fs.existsSync(assets)) fs.unlinkSync(assets)
				// Assembly
				let asm = [
					'kernel\\tofita.asm' : 'tofita.asm.o',
					'devices\\cpu\\cpu.asm' : 'cpu.asm.o',
					'boot\\loader\\loader.asm' : 'loader.asm.o'
				]
				for (a in asm.keys())
					require('child_process').execSync(
						'..\\Teapot\\nasm-2.14.02\\nasm -f elf64 -o ' +
						config.tempFolder + '\\tofita\\' + asm.get(a) + ' ' + a, { stdio: 'inherit' }
					)

				require('child_process').execSync(
					[
						'..\\Teapot\\LLVM-9.0.0\\bin\\clang.exe -target x86_64-pc-linux-gnu ',
						'-O0 -xc -std=gnu11 -fno-stack-protector -fshort-wchar -w -mno-red-zone -Wall -Wextra ',
						'-Wimplicit-function-declaration -Werror ',
						'-DGNU_EFI_USE_MS_ABI -DGNU_EFI_USE_EXTERNAL_STDARG -fPIC ',
						'-Iexternal/inc -Iexternal/inc/x86_64 -DEFI_FUNCTION_WRAPPER ',
						'-D versionMajor=' + config.versionMajor + ' ',
						'-D versionMinor=' + config.versionMinor + ' ',
						'-D versionName=\\"' + config.versionName + '\\" ',
						'-c -o ',
						config.tempFolder + '/tofita/boot.o boot/uefi/boot.c'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\LLVM-9.0.0\\bin\\clang.exe -target x86_64-pc-linux-gnu ',
						'-O0 -xc -std=gnu11 -fno-stack-protector -fshort-wchar -w -mno-red-zone -Wall -Wextra ',
						'-Wimplicit-function-declaration -Werror ',
						'-DGNU_EFI_USE_MS_ABI -DGNU_EFI_USE_EXTERNAL_STDARG -fPIC -mcmodel=large ',
						'-Iexternal/inc -Iexternal/inc/x86_64 -DEFI_FUNCTION_WRAPPER ',
						'-c -o ',
						config.tempFolder + '/tofita/loader.o boot/loader/loader.c'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\LLVM-9.0.0\\bin\\clang.exe -target x86_64-pc-linux-gnu ',
						'-O2 -x c++ -std=gnu++11 -fno-stack-protector -fshort-wchar -w -mno-red-zone -Wall -Wextra ',
						'-fno-rtti -fno-exceptions ',
						'-Wimplicit-function-declaration -Werror ',
						'-DTOFITA -mtune=nocona ',
						'-DGNU_EFI_USE_MS_ABI -DGNU_EFI_USE_EXTERNAL_STDARG -fPIC ',
						'-Iexternal/inc -Iexternal/inc/x86_64 -DEFI_FUNCTION_WRAPPER ',
						'-c -o ',
						config.tempFolder + '/tofita/tofita.o kernel/tofita.c'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\linux-ubuntu-natty_x86_64-bin_x86_64-mingw_20101218_vityan\\bin\\x86_64-vityan-linux-gnu-ld.exe -m elf_x86_64 ',
						'-T kernel/kernel.ld -o ',
						config.tempFolder + '/tofita/tofita_kernel.elf.img ',
						config.tempFolder + '/tofita/tofita.asm.o ',
						config.tempFolder + '/tofita/cpu.asm.o ',
						config.tempFolder + '/tofita/tofita.o'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\LLVM-9.0.0\\bin\\llvm-objcopy.exe -O binary ',
						config.tempFolder + '/tofita/tofita_kernel.elf.img ',
						config.tempFolder + '/tofita/tofita.img'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					__dirname + '\\..\\Teapot\\LLVM-9.0.0\\bin\\llvm-objcopy.exe -I binary -O elf64-x86-64 -B i386 tofita.img tofitaimg.o',
					{ stdio: 'inherit', cwd: config.tempFolder + '\\tofita' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\linux-ubuntu-natty_x86_64-bin_x86_64-mingw_20101218_vityan\\bin\\x86_64-vityan-linux-gnu-ld.exe -m elf_x86_64 ',
						'-T boot/loader/loader.ld ',
						'-o ',
						config.tempFolder + '/tofita/loader_kernel.elf.img ',
						config.tempFolder + '/tofita/loader.asm.o ',
						config.tempFolder + '/tofita/loader.o ',
						config.tempFolder + '/tofita/tofitaimg.o'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\LLVM-9.0.0\\bin\\llvm-objcopy.exe -O binary ',
						config.tempFolder + '/tofita/loader_kernel.elf.img ',
						config.tempFolder + '/tofita/loader_kernel.img'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\linux-ubuntu-natty_x86_64-bin_x86_64-mingw_20101218_vityan\\bin\\x86_64-vityan-linux-gnu-ld.exe -m elf_x86_64 ',
						'-nostdlib -znocombreloc -T external/gnuefi/elf_x86_64_efi.lds -shared -Bsymbolic -L external/gnuefi ',
						'-L /usr/lib ',
						'external/gnuefi/crt0-efi-x86_64.o ',
						config.tempFolder + '/tofita/boot.o ',
						'-o ',
						config.tempFolder + '/tofita/loader.so -lgnuefi'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						'..\\Teapot\\x86_64-w64-mingw32\\objcopy.exe ',
						'-j .text -j .sdata -j .data -j .dynamic ',
						'-j .dynsym  -j .rel -j .rela -j .reloc ',
						'--target=efi-app-x86_64 ',
						config.tempFolder + '/tofita/loader.so ',
						config.tempFolder + '/tofita/loader.efi'
					].join(''), { stdio: 'inherit' }
				)

				packAssets(config) // Loader

				fs.copyFileSync(
					config.tempFolder + '\\tofita\\loader.efi',
					config.tempFolder + '\\tofita\\iso\\EFI\\BOOT\\BOOTX64.EFI')
				// Create floppy image
				fs.copyFileSync(
					'..\\Teapot\\mtools\\disk-template.img',
					config.tempFolder + '\\tofita\\disk.img')
				for (cmd in [
					'..\\Teapot\\mtools\\mmd.exe -i ' + config.tempFolder + '\\tofita\\disk.img ::/EFI',
					'..\\Teapot\\mtools\\mmd.exe -i ' + config.tempFolder + '\\tofita\\disk.img ::/EFI/BOOT',
					'..\\Teapot\\mtools\\mcopy.exe -i ' + config.tempFolder + '\\tofita\\disk.img ' + config.tempFolder + '\\tofita\\loader.efi ::/EFI/BOOT/BOOTx64.EFI',
					'..\\Teapot\\mtools\\mcopy.exe -i ' + config.tempFolder + '\\tofita\\disk.img ' + config.tempFolder + '\\tofita\\iso\\TOFITA.DAT ::/TOFITA.DAT'
				]) require('child_process').execSync(
					cmd, { stdio: 'inherit' }
				)
				// Create disk image
				fs.copyFileSync(
					config.tempFolder + '\\tofita\\disk.img',
					config.tempFolder + '\\tofita\\iso\\disk.img')
				let path = config.tempFolder.split(':').join('')
				require('child_process').execSync(
					[
						'..\\Teapot\\xorriso-1.3.4\\xorriso.exe',
						'-as mkisofs -R -f -e',
						'disk.img',
						'-no-emul-boot -o',
						'/cygdrive/\(path)/tofita/greenteaos-uefi64.iso',
						'-V GreenteaOS-UEFI',
						'/cygdrive/\(path)/tofita/iso'
					].join(' '), { stdio: 'inherit' }
				)
			}
		case 'qemu':
			{
				require('child_process').execSync(
					[
						'"' + config.qemuFolder + '\\qemu-system-x86_64.exe"',
						'-display sdl',
						'-show-cursor',
						'-monitor stdio',
						'-boot menu=off',
						'--bios ..\\Teapot\\OVMF-20160813.fd',
						'-serial stdio',
						'-cdrom ' + config.tempFolder + '\\tofita\\greenteaos-uefi64.iso',
						'-s',
						'-no-reboot',
						'-vga std',
						'-smp 4',
						'-m 1024M',
						'-net nic,macaddr=52-54-00-B3-47-55,model=rtl8139'
					].join(' '), { stdio: 'inherit' }
				)
			}
		case 'vbox':
			{
				require('child_process').execSync(
					'node tools\\listen.js', { stdio: 'inherit' }
				)
			}
		case _:
			console.log('Unknown task', task)
	}
}
