// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Loads EXE and DLL files

// TODO ntdll should have tofitaStub(){} for unresolved dll imports -> log them
// TODO ^ should actually show a message box and abort in future

fun offsetPointer(data UInt64, offset UInt64) ArrayPointer<UInt8> {
	return (data + offset) as! ArrayPointer<UInt8>
}

// TODO why not IMAGE_DATA_DIRECTORY
@struct
class ImageDataDirectory {
	var virtualAddress UInt32
	var size UInt32
}

@struct
class PeInterim {
	var base UInt64 // TODO UserPointer?
	var entry UInt64 // _DllMainCRTStartup
	var imageDataDirectory ArrayPointer<ByValue<ImageDataDirectory>>
	var sizeOfStackReserve UInt64
	var is64bit Bool
	new () {}
}

@struct
class ExeInterim {
	var pei PeInterim
	var stackVirtual UInt64
	new () {}
}

@struct
class PeExportLinkedList {
	var name ConstArrayPointer<UInt8>
	var ptr UInt64
	var next PeExportLinkedList
	var hash UInt8
}

@struct
class Executable {
	var nextBase UInt64
	var pml4 ArrayPointer<ByValue<PageEntry>>
	new () {}
}

fun is64Exe(asset RamDiskAsset) {
	var ptr = asset.data as! ArrayPointer<UInt8>
	var peHeader = ((ptr as! UInt64) + ptr[0x3C] + ptr[0x3C + 1] * 256) as! PeHeader
	var peOptionalHeader = ((peHeader as! UInt64) + sizeOf<PeHeader>()) as! Pe64OptionalHeader
	return peOptionalHeader.magic == 0x020B
}

// TODO access all memory safely via Buffer or something
class ExeLoader<SIZE, HEADER> {
	new() {}

	// TODO probe for read/write
	// TODO error if not found
	// TODO more PATH support
	fun loadDll(name String, root PeExportLinkedList, exec Executable) PeInterim {
		// TODO simple size ofs should be evaluated at normalizer to exclude ifs
		let is64bit = sizeOf<SIZE>() == 8
		let env = is64bit? "C:\\Windows\\System32\\" : "C:\\Windows\\SysWOW64\\"
		let fullPath = env + @hide name // TODO dedup `//` and normalize `/` to `\`
		// TODO Note: `@hide name` should disallow erroneus usage of `name` instead of `fullPath`
		let name = "C:\\Windows\\System32\\" + name
		return loadPe(fullPath, root, exec)
	}

	fun loadPe(name String, root PeExportLinkedList, exec Executable) {
		let asset RamDiskAsset = new RamDiskAsset()
		getRamDiskAsset(asset, name)
		serialPrintf("[loadDLL] loaded dll asset '%S' %d bytes at %d\n", name.utf16(), asset.size, asset.data)
		return loadPeAsset(asset, root, exec)
	}

	fun loadPeAsset(asset RamDiskAsset, root PeExportLinkedList, exec Executable) {
		var ptr = asset.data as! ArrayPointer<UInt8>
		var peHeader = ((ptr as! UInt64) + ptr[0x3C] + ptr[0x3C + 1] * 256) as! PeHeader
		serialPrintf("[loadDLL] PE header signature 'PE' == '%s'\n", peHeader)
		var peOptionalHeader = ((peHeader as! UInt64) + sizeOf<PeHeader>()) as! HEADER
		serialPrintf("[loadDLL] PE32(+) optional header signature 0x020B == %d == %d\n", peOptionalHeader.magic,
					0x020B)
		// TODO require all .dlls ARCH be the same or show loader error
		serialPrintf("[loadDLL] PE32(+) size of image == %d\n", peOptionalHeader.sizeOfImage)

		let pages = down_bytes_to_pages(peOptionalHeader.sizeOfImage) + 1u32
		let physical = PhysicalAllocator.allocatePages(pages)

		if exec.nextBase == 0 {
			// TODO round to pages? or 64k?
			exec.nextBase = peOptionalHeader.imageBase
		}

		mapMemory(
			exec.pml4,
			exec.nextBase,
			physical - (wholePhysicalStart as! UInt64),
			pages,
			accessibleByUser: true
		)

		let buffer UInt64 = exec.nextBase
		memset(buffer as! ArrayPointer<UInt8>, 0, peOptionalHeader.sizeOfImage) // Zeroing

		exec.nextBase = exec.nextBase + pages * pageSize

		// Copy sections
		var imageSectionHeader =
			((peOptionalHeader as! UInt64) + peHeader.sizeOfOptionalHeader) as! ArrayPointer<ByValue<ImageSectionHeader>>

		// TODO copy PE headers?
		for i in peHeader.numberOfSections {
			serialPrintf("[loadDLL] Copy section [%d] named '%s' of size %d at %u\n", i,
						imageSectionHeader[i].ref.name.ref,
						imageSectionHeader[i].ref.sizeOfRawData,
						imageSectionHeader[i].ref.virtualAddress)
			var where UInt64 = (buffer as! UInt64) + imageSectionHeader[i].ref.virtualAddress

			tmemcpy(where as! ArrayPointer<UInt8>,
					((asset.data as! UInt64) + (imageSectionHeader[i].ref.pointerToRawData as! UInt64)) as! ConstArrayPointer<UInt8>,
					imageSectionHeader[i].ref.sizeOfRawData)
		}

		// TODO `const ImageDataDirectory*` just `let` all the fields in class declaration?
		var imageDataDirectory =
			((peOptionalHeader as! UInt64) + sizeOf<HEADER>()) as! ArrayPointer<ByValue<ImageDataDirectory>>

		// Relocate EXE or DLL to a new base
		// TODO should return signed or something? used ptr_diff_t
		// NOTE this is a user-mode address, so pointer delta is ok (TODO really?)
		let delta Int64 = (buffer as! Int64) - (peOptionalHeader.imageBase as! Int64)
		if delta != 0 {
			var codeBase ArrayPointer<UInt8> = buffer as! ArrayPointer<UInt8>

			var directory =
				// TODO indexing by enum like `IMAGE_DIRECTORY_ENTRY_BASERELOC`
				imageDataDirectory[image_directory_entry_basereloc].ref as! IMAGE_DATA_DIRECTORY

			if directory.size == 0 {
				// return (delta == 0)
			}

			var relocation = (codeBase + directory.virtualAddress) as! IMAGE_BASE_RELOCATION
			while relocation.virtualAddress > 0 {
				var dest UInt64 = (codeBase as! UInt64) + (relocation.virtualAddress as! UInt64)
				var relInfo = offsetPointer(relocation as! UInt64, image_sizeof_base_relocation) as! ArrayPointer<UInt16>

				for i in (relocation.sizeOfBlock - image_sizeof_base_relocation) / 2 {
					// The upper 4 bits define the type of relocation
					var type Int32 = relInfo[0] >> 12
					// The lower 12 bits define the offset
					var offset UInt64 = relInfo[0] & 0xfff

					switch type as! ImageRelocationType {
					case IMAGE_REL_BASED_ABSOLUTE:
						// Skip relocation
						// TODO `break` will not work here?

					case IMAGE_REL_BASED_HIGHLOW:
						// Change complete 32 bit address
						{
							var patchAddrHL ArrayPointer<UInt32> = (dest + offset) as! ArrayPointer<UInt32>
							patchAddrHL[0] += delta as! UInt32
						}
						// break

						// TODO `#ifdef _WIN64`
					case IMAGE_REL_BASED_DIR64: {
						// TODO should be no-op on 32 bit
						var patchAddr64 = (dest + offset) as! ArrayPointer<Int64>
						patchAddr64[0] += delta as! Int64
					}
						// break
						// TODO `#endif`

					case _:
						// TODO loader should fail
						serialPrintf("[loadDLL] Unknown relocation: %d\n", type)
						//break
					}

					// Next step
					// TODO must error `relInfo++`
					relInfo++
				}

				// Advance to next relocation block
				relocation = offsetPointer(relocation as! UInt64, relocation.sizeOfBlock) as! IMAGE_BASE_RELOCATION
			}
		}

		serialPrintf("[loadDLL] Done relocations\n")

		// Exports

		var tail PeExportLinkedList = root
		while tail.next != null {
			tail = tail.next
		}

		// TODO code gen over u8 must be `i` of u8 too
		// TODO is it always 15?
		for i in 15u8 {
			if i as! ImageDirectoryType == ImageDirectoryType.IMAGE_DIRECTORY_ENTRY_EXPORT {
				var codeBase UInt64 = (buffer as! UInt64)
				let directory = imageDataDirectory[i].ref as! ImageDataDirectory

				var exports = ((buffer as! UInt64) + (directory.virtualAddress as! UInt64)) as! IMAGE_EXPORT_DIRECTORY

				//var i UInt32 = 0
				var nameRef ArrayPointer<UInt32> = (codeBase + (exports.addressOfNames as! UInt64)) as! ArrayPointer<UInt32>
				var ordinal ArrayPointer<UInt16> = (codeBase + (exports.addressOfNameOrdinals as! UInt64)) as! ArrayPointer<UInt16>
				var entry UInt32 = 0

				for i in exports.numberOfNames {
					let name = (codeBase + (nameRef[0] as! UInt64)) as! ConstArrayPointer<UInt8>
					let idx UInt64 = ordinal[0]

					let addr = codeBase + (exports.addressOfFunctions as! UInt64) + (idx * 4u64)
					let ptr = addr as! ArrayPointer<UInt32>

					let func = (codeBase + ptr[0]) as! UInt64

					let list =
						PhysicalAllocator.allocateBytes(sizeOf<PeExportLinkedList>()) as! PeExportLinkedList
					list.next = null
					list.name = name
					list.ptr = func

					tail.next = list
					tail = tail.next

					// Next step
					nameRef++
					ordinal++
					entry++
				}
			}
		}

		var pei = new PeInterim()

		pei.base = buffer
		pei.entry = (buffer as! UInt64) + (peOptionalHeader.addressOfEntryPoint as! UInt64)
		pei.imageDataDirectory = imageDataDirectory
		pei.sizeOfStackReserve = peOptionalHeader.sizeOfStackReserve
		pei.is64bit = sizeOf<SIZE>() == 8

		return pei
	}

	// TODO for system dlls (ntdll, user32, etc) search EVERY dll for the name, cause they
	// may be moved between versions.
	// Search only selected .dll only within the user provided dlls
	fun getProcAddress(name ConstArrayPointer<UInt8>, root PeExportLinkedList) PeExportLinkedList {
		var list PeExportLinkedList = root
		// TODO make it intrusive list
		// TODO compute crc for faster .dll import names lookup
		while list.next != null {
			// Step upfront, to ignore empty root
			list = list.next

			var i UInt16 = 0
			while true {
				if (list.name[i] == name[i]) && (name[i] as! Int == 0) {
					serialPrintf("[getProcAddress] import {%s} resolved to {%s}\n", name, list.name)
					return list
					break
				}
				if list.name[i] == name[i] {
					i++
					continue
				}
				break
			}
		}

		serialPrintf("[getProcAddress] import {%s} unresolved\n", name)
		return null
	}

	// TODO `template<typename SIZE>`
	fun resolveDllImports(pei PeInterim, root PeExportLinkedList) {
		var buffer UInt64 = pei.base
		var imageDataDirectory = pei.imageDataDirectory

		// Imports
		{
			let at =
				((buffer as! UInt64) + (imageDataDirectory[image_directory_entry_import].ref.virtualAddress as! UInt64)) as! ArrayPointer<UInt8>
			var iid = at as! IMAGE_IMPORT_DESCRIPTOR

			// DLL
			// TODO must error `while iid.originalFirstThunk != null {` compares Int and null
			while iid.originalFirstThunk != 0 {
				var szName = ((buffer as! UInt64) + (iid.name as! UInt64)) as! ArrayPointer<UInt8>
				var pThunkOrg = ((buffer as! UInt64) + (iid.originalFirstThunk as! UInt64)) as! IMAGE_THUNK_DATA<SIZE>
				// TODO `(SIZE *)`
				var funcRef = ((buffer as! UInt64) + (iid.firstThunk as! UInt64)) as! ArrayPointer<SIZE>

				// TODO bad code gen for uint32_t$null `while pThunkOrg.addressOfData != null {`
				while pThunkOrg.addressOfData != 0 {
					var ord UInt32 = 666
					var func SIZE = 0

					if (pThunkOrg.ordinal & 0x80000000u32) != 0 {
						ord = pThunkOrg.ordinal & 0xffff
						serialPrintf("[resolveDllImports] import {%s}.@%d - at address: {%d} <------------ NOT "
									+
									"IMPLEMENTED YET!\n",
									szName, ord, pThunkOrg.func
						)
					} else {
						let pIBN = (
							(buffer as! UInt64) +
							(
								(pThunkOrg.addressOfData as! UInt64) &
								0xffffffffu64
							) as! UInt64
						) as! IMAGE_IMPORT_BY_NAME

						ord = pIBN.hint
						var szImportName ConstArrayPointer<UInt8> = pIBN.name as! ConstArrayPointer<UInt8>
						serialPrintf("[resolveDllImports] import {%s}.{%s}@%d - at address: {%d}\n",
									szName,
									szImportName, ord, pThunkOrg.func)

						// Resolve import
						// func = null // TODO This should error
						func = 0

						var proc PeExportLinkedList = getProcAddress(szImportName, root)

						if proc != null {
							func = proc.ptr as! SIZE
						} else {
							// Set stub to avoid simple crash
							// TODO `tofitaStdStub`
							// TODO separate placeholders for std call etc
							func = getProcAddress("tofitaFastStub".utf8copy().bytes as! ConstArrayPointer<UInt8>, root).ptr as! SIZE
						}
					}

					funcRef[0] = func as! SIZE
					pThunkOrg++
					// TODO ^ well `++` should not be allowed for this
					let size = sizeOf<SIZE>()
					funcRef = (funcRef as! UInt64 + size) as! ArrayPointer<SIZE>
				}

				iid++
			}
		}
	}

	fun loadExe(asset RamDiskAsset, root PeExportLinkedList, exec Executable) {
		var ei ExeInterim = new ExeInterim()

		ei.pei = loadPeAsset(asset, root, exec)

		// Allocate stack
		{
			let pages = down_bytes_to_pages(ei.pei.sizeOfStackReserve) + 1u32
			let physical = PhysicalAllocator.allocatePages(pages)

			let buffer UInt64 = exec.nextBase

			mapMemory(
				exec.pml4,
				exec.nextBase,
				physical - (wholePhysicalStart as! UInt64),
				pages,
				accessibleByUser: true
			)

			memset(buffer as! ArrayPointer<UInt8>, 0, ei.pei.sizeOfStackReserve) // Zeroing

			exec.nextBase = exec.nextBase + pages * pageSize

			ei.stackVirtual = buffer
		}

		return ei
	}

	fun resolveExeImports(ei ExeInterim, root PeExportLinkedList) {
		resolveDllImports(ei.pei, root)
	}

	// TODO `template<typename SIZE>` per function
	// TODO make `entry` a generic too
	fun addDllEntry(physical UInt64, entry UInt64, startup ProcessStartupInformation) {
		let max SIZE = 511 // TODO any other limits?
		// TODO ^ 32-bit limit is x2
		// TODO in NT DLL count[0] is expected to be u32
		let dllEntries = physical as! ArrayPointer<SIZE>

		// TODO `if count[0] >= 511 {`
		//let amount = count[0] as! SIZE
		//if amount >= (511 as! SIZE) {
		if startup.dllCount >= 511 {
			// TODO error
			return
		}

		dllEntries[startup.dllCount] = entry
		startup.dllCount++
	}

	// DLL entry points aka `DllMain`
	// TODO make it linked list, if it's not enough?
	let dllEntries = PhysicalAllocator.allocateOnePagePreZeroed()

	// Size is ensured by `@sizeOfLessOrEqual(4096)`
	let startup = PhysicalAllocator.allocateOnePagePreZeroed() as! ProcessStartupInformation

	fun loadRelatedDLLsAndMapIntoProcess(app ExeInterim, root PeExportLinkedList, exec Executable, process TofitaProcess) {
		// TODO parse DLLs in multiple threads
		let ntdll = loadDll("ntdll.dll", root, exec) // TODO proper path!!!
		let kernel32 = loadDll("kernel32.dll", root, exec)
		let gdi32 = loadDll("gdi32.dll", root, exec)
		let user32 = loadDll("user32.dll", root, exec)
		// TODO read dll files from the list of imports of .exe and .dlls, hardcode only ntdll
		// TODO reuse loaded dlls in memory
		// TODO load every DLL in separate thread

		let is64bit = app.pei.is64bit

		// TODO resolve in multiple threads (this is readonly operation over list of imports, but not for sections)
		resolveDllImports(ntdll, root)
		resolveDllImports(kernel32, root)
		resolveDllImports(gdi32, root)
		resolveDllImports(user32, root)
		resolveExeImports(app, root)

		addDllEntry(dllEntries, kernel32.entry, startup)
		addDllEntry(dllEntries, gdi32.entry, startup)
		addDllEntry(dllEntries, user32.entry, startup)
		// TODO addDllEntry(dllEntries, advapi32.entry)

		process.is64bit = is64bit

		if is64bit {
			process.frame.cs = Selector.USER_CODE64_SEL_USER_MODE
		} else {
			// Thirty two bits
			process.frame.cs = Selector.USER_CODE32_SEL_USER_MODE
			// TODO IMAGE_FILE_LARGE_ADDRESS_AWARE
			// TODO IMAGE_FILE_LARGE_ADDRESS_AWARE with compatibility mode (3 GB, 128 TB)
			process.limits = AddressAwareness.Bit32limit2GB
			// TODO pager should respect those limits
		}

		// TODO this may fail/except, handle errors
		let whereEntries = findUserspaceMemory(
			process.pml4,
			0,
			1,
			process.limits
		)

		// TODO this may fail/except, handle errors (de-allocate all memory)
		mapMemory(
			process.pml4,
			whereEntries,
			dllEntries - wholePhysicalStart,
			1,
			accessibleByUser: true
		)

		startup.dllEntries = whereEntries
		startup.entry = app.pei.entry
		startup.pid = process.pid

		let whereStartup = findUserspaceMemory(
			process.pml4,
			0,
			1,
			process.limits
		)

		mapMemory(
			process.pml4,
			whereStartup,
			(startup as! UInt64) - wholePhysicalStart,
			1,
			accessibleByUser: true
		)

		process.frame.ip = ntdll.entry // Contains crt0
		process.frame.sp = app.stackVirtual
		process.frame.rcxArg0 = whereStartup // First argument
		// TODO merge all to one argument (single structure)
		// TODO unmap zero page to cause NPE
	}
}

fun loadExeIntoProcess(file String, process TofitaProcess) {
	{
		let root =
			PhysicalAllocator.allocateBytes(sizeOf<PeExportLinkedList>()) as! PeExportLinkedList
		root.next = null
		root.name = null
		root.ptr = 0

		let exec Executable = new Executable()
		exec.nextBase = 0
		exec.pml4 = process.pml4

		let asset RamDiskAsset = new RamDiskAsset()
		getRamDiskAsset(asset, file)

		// TODO fix in codegen `if ExeLoader.is64(asset) {` for `static fun` of generic class
		// TODO `if ExeLoader<UInt64, Pe64OptionalHeader>.is64(asset) {`
		if is64Exe(asset) {
			let loader = new ExeLoader<UInt64, Pe64OptionalHeader>()
			let app = loader.loadExe(asset, root, exec)
			loader.loadRelatedDLLsAndMapIntoProcess(app, root, exec, process)
		} else {
			let loader = new ExeLoader<UInt32, Pe32OptionalHeader>()
			let app = loader.loadExe(asset, root, exec)
			loader.loadRelatedDLLsAndMapIntoProcess(app, root, exec, process)
		}
	}
}
