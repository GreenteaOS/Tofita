// The Tofita Kernel
// Copyright (C) 2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// Align to 4096
let addressBits = 12u64
var pml4entries: ArrayPointer<ByValue<PageEntry>> = null

fun conventionalAllocatePage(): ArrayPointer<ByValue<PageEntry>> {
	// TODO bounds check
	return conventionalAllocateNext(pageSize) as! ArrayPointer<ByValue<PageEntry>>
}

fun mapPage(entry: PageEntry, address: UInt64, writeAllowed: UInt8) {
	entry.address = address >> addressBits
	entry.present = 1u64
	entry.writeAllowed = (writeAllowed == 1) ? 1u64 : 0u64
	entry.accessibleByAll = 1u64 // TODO
}

fun mapPageHuge(entry: PageEntry, address: UInt64) {
	entry.address = address >> addressBits
	entry.present = 1u64
	entry.writeAllowed = 1u64
	entry.largePage = 1u64
	entry.accessibleByAll = 1u64 // TODO
}

fun referOrCreatePage(table: ArrayPointer<ByValue<PageEntry>>, entryId: UInt64, writeAllowed: UInt8): ArrayPointer<ByValue<PageEntry>> {
	var entry: PageEntry = table[entryId].ref

	if entry.present == 1 {
		return (entry.address << addressBits) as! ArrayPointer<ByValue<PageEntry>>
	} else {
		// TODO check for null
		var newPage = conventionalAllocatePage()
		mapPage(entry, newPage as! UInt64, writeAllowed)
		return newPage
	}
}

/// allows to access separate address by page table levels
@struct @packed @sizeOf(8)
class PageAddressView {
	@bits(12) var offset: UInt64
	@bits(9) var pt: UInt64
	@bits(9) var pd: UInt64
	@bits(9) var pdpt: UInt64
	@bits(9) var pml4: UInt64
	@bits(16) var padding: UInt64
}

fun getPageAddressView(address: UInt64): ByValue<PageAddressView> {
	return address as! ByValue<PageAddressView>
}

fun mapPT(pt: ArrayPointer<ByValue<PageEntry>>, virtualAddr: UInt64, physicalAddr: UInt64, writeAllowed: UInt8) {
	var entry: PageEntry = pt[getPageAddressView(virtualAddr).ref.pt].ref
	mapPage(entry, physicalAddr, writeAllowed)
}

fun mapP2Huge(pd: ArrayPointer<ByValue<PageEntry>>, virtualAddr: UInt64, physicalAddr: UInt64) {
	var entry: PageEntry = pd[getPageAddressView(virtualAddr).ref.pd].ref
	mapPageHuge(entry, physicalAddr)
}

fun mapPD(pd: ArrayPointer<ByValue<PageEntry>>, virtualAddr: UInt64, physicalAddr: UInt64,
							writeAllowed: UInt8): Void {
	var pt = referOrCreatePage(pd, getPageAddressView(virtualAddr).ref.pd, writeAllowed)
	mapPT(pt, virtualAddr, physicalAddr, writeAllowed)
}

fun mapPDPT(pdpt: ArrayPointer<ByValue<PageEntry>>, virtualAddr: UInt64, physicalAddr: UInt64,
							writeAllowed: UInt8): Void {
	var pd = referOrCreatePage(pdpt, getPageAddressView(virtualAddr).ref.pdpt, writeAllowed)
	mapPD(pd, virtualAddr, physicalAddr, writeAllowed)
}

fun mapPML4(pml4: ArrayPointer<ByValue<PageEntry>>, virtualAddr: UInt64, physicalAddr: UInt64,
							writeAllowed: UInt8): Void {
	var pdpt = referOrCreatePage(pml4, getPageAddressView(virtualAddr).ref.pml4, writeAllowed)
	mapPDPT(pdpt, virtualAddr, physicalAddr, writeAllowed)
}

fun mapP3Huge(pdpt: ArrayPointer<ByValue<PageEntry>>, virtualAddr: UInt64, physicalAddr: UInt64): Void {
	var pd = referOrCreatePage(pdpt, getPageAddressView(virtualAddr).ref.pdpt, 1u8)
	mapP2Huge(pd, virtualAddr, physicalAddr)
}

fun mapP4Huge(pml4: ArrayPointer<ByValue<PageEntry>>, virtualAddr: UInt64, physicalAddr: UInt64): Void {
	var pdpt = referOrCreatePage(pml4, getPageAddressView(virtualAddr).ref.pml4, 1u8)
	mapP3Huge(pdpt, virtualAddr, physicalAddr)
}

fun mapMemory(virtualAddr: UInt64, physicalAddr: UInt64, pageCount: UInt64, writeAllowed: UInt8) {
	serialPrintln("[paging] mapping memory range")

	var virtualAddrEnd: UInt64 = virtualAddr + pageCount * pageSize

	var vAddress: UInt64 = virtualAddr
	var pAddress: UInt64 = physicalAddr

	serialPrintf("[paging.range] Bytes to map %d == %d\n", virtualAddrEnd - virtualAddr, pageCount * pageSize)

	serialPrint("[paging.range] At virtual address = ")
	serialPrintHex(virtualAddr)
	serialPrint("\n")

	serialPrint("[paging.range] To physical address = ")
	serialPrintHex(physicalAddr)
	serialPrint("\n")

	serialPrint("[paging.range] Of page count = ")
	serialPrintHex(pageCount)
	serialPrint("\n")

	serialPrint("[paging.range] The virtual address end = ")
	serialPrintHex(virtualAddrEnd)
	serialPrint("\n")

	while vAddress < virtualAddrEnd {
		mapPML4(pml4entries, vAddress, pAddress, writeAllowed)

		vAddress += pageSize
		pAddress += pageSize
	}
}

fun mapMemoryHuge(virtualAddr: UInt64, physicalAddr: UInt64, pageCount: UInt32) {
	var virtualAddrEnd: UInt64 = virtualAddr + pageCount * pageSize

	var vAddress: UInt64 = virtualAddr
	var pAddress: UInt64 = physicalAddr

	while vAddress < virtualAddrEnd {
		mapP4Huge(pml4entries, vAddress, pAddress)

		vAddress += pageSize * 512u64
		pAddress += pageSize * 512u64
	}
}

fun getNextDescriptor(descriptor: @readonly EFI_MEMORY_DESCRIPTOR, descriptorSize: UInt64) {
	let desc = (descriptor as! UInt64) + descriptorSize
	return desc as! @readonly EFI_MEMORY_DESCRIPTOR
}

fun getRAMSize(memoryMap: UefiMemoryMap): UInt64 {
	var descriptor = memoryMap.memoryMap
	let descriptorSize: UInt64 = memoryMap.descriptorSize
	var numberOfPages: UInt64 = 0u64

	var startOfMemoryMap: UInt64 = (memoryMap.memoryMap as! UInt64)
	var endOfMemoryMap: UInt64 = startOfMemoryMap + memoryMap.memoryMapSize
	var offset: UInt64 = startOfMemoryMap

	while offset < endOfMemoryMap {
		numberOfPages += descriptor.numberOfPages

		offset += descriptorSize
		descriptor = getNextDescriptor(descriptor, descriptorSize)
	}

	return numberOfPages * pageSize
}

// TODO this should be reconsidered (i.e. pointer fixups)
fun mapEfiRuntime(memoryMap: UefiMemoryMap) {
	serialPrintln("[paging] mapping efi runtime")

	var descriptor: EFI_MEMORY_DESCRIPTOR = memoryMap.memoryMap
	let descriptorSize: UInt64 = memoryMap.descriptorSize
	var sum: UInt64 = 0u64

	var startOfMemoryMap: UInt64 = (memoryMap.memoryMap as! UInt64)
	var endOfMemoryMap: UInt64 = startOfMemoryMap + memoryMap.memoryMapSize
	var offset: UInt64 = startOfMemoryMap

	while offset < endOfMemoryMap {
		if 0 != (descriptor.attribute & efi_memory_runtime) {
			// TODO pointer fixups
			// TODO should be RW or RO? NX?
			// Note: in VirtualBox, physicalStart seems way beyond RAM bounds
			// Seems like fixup should be applied only if PhysicalStart < ramBytes?
			mapMemory(descriptor.physicalStart, descriptor.physicalStart, descriptor.numberOfPages, 1u8)
			sum += descriptor.numberOfPages
		}

		offset += descriptorSize
		descriptor = getNextDescriptor(descriptor, descriptorSize)
	}

	serialPrintf("[paging] efi runtime mapped %u pages\n", sum)
}

@struct class Buffa {
	let value: UInt64 = 0
	new () {}
}
let buffaStorage = new Buffa()
let buffa = buffaStorage as! ArrayPointer<UInt8>
// TODO ^ simple array by value

fun conventionalAllocateLargest(memoryMap: UefiMemoryMap) {
	var descriptor = memoryMap.memoryMap
	let descriptorSize: UInt64 = memoryMap.descriptorSize
	var result: UInt64 = 0u64
	var largestPages: UInt64 = 0u64

	var startOfMemoryMap: UInt64 = (memoryMap.memoryMap as! UInt64)
	var endOfMemoryMap: UInt64 = startOfMemoryMap + memoryMap.memoryMapSize
	var offset: UInt64 = startOfMemoryMap

	while offset < endOfMemoryMap {
		// Note: > not >= cause we should have some extra space next to this
		if descriptor.type == EFI_MEMORY_TYPE.EfiConventionalMemory, descriptor.numberOfPages > largestPages {
			largestPages = descriptor.numberOfPages
			result = descriptor.physicalStart
		}

		offset += descriptorSize
		descriptor = getNextDescriptor(descriptor, descriptorSize)
	}

	serialPrintf("[paging] conventionalAllocateLargest is %u bytes, %d pages\n",
				 largestPages * pageSize, largestPages)

	return result
}

var conventionalOffset: UInt64 = 0u64
fun conventionalAllocateNext(bytes: UInt64): UInt64 {
	let result = conventionalOffset
	let pages = bytes / pageSize // Math.floor
	conventionalOffset += pages * pageSize
	if (bytes - (pages * pageSize)) > 0 {
		conventionalOffset += pageSize
	}
	return result
}

fun mapFrameBuffer(fb: @readonly FrameBuffer) {
	// TODO map with hugepages!!!
	// TODO map ALL with EPIC pages?
	mapMemory(frameBufferVirtualBase, fb.base as! UInt64, fb.size / pageSize + 1u64, 1u8)
}
