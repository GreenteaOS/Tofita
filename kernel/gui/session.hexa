// The Tofita Kernel
// Copyright (C) 2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// The state of the DWM
class GraphicalSession {
	// TODO probably user owns session, not the other way around? it's 1:1 after all
	var user User // TODO `let`
	// TODO Hexa: ensure theme is embedded (as struct by value) in allocation
	let theme = new Theme()

	// Clickable zones
	// TODO move this rect to Desktop
	var desktopZone ColliderRectangle

	var taskbarZone ColliderRectangle
	var taskbarStart ColliderRectangle
	var taskbarPin ColliderRectangle
	var taskbarDesktopPeek ColliderRectangle
	var taskbarTime ColliderRectangle
	var taskbarInput ColliderRectangle
	var taskbarTrayOpener ColliderRectangle
	var taskbarWindowList ColliderRectangle
	var showStart = false

	// TODO probably useless
	var windowsZone ColliderRectangle

	// Zones
	var desktop Desktop

	/// Desktop icons and selection rectangle
	fun desktopHandle(id UInt64, event ColliderEventType) Void {
		if event == ColliderEventType.MouseMove {
			// TODO set mouse coordinates properly
			handleMouseMoveDesktop(mouseX, mouseY)
			return
		}

		if event == ColliderEventType.MouseDown, firstResponder == 0 {
			// TODO set mouse coordinates ant event type properly
			handleMouseDownDesktop(MouseActionType.LeftDown, mouseX, mouseY)
			return
		}

		if event == ColliderEventType.MouseUp {
			// TODO set mouse coordinates ant event type properly
			handleMouseUpDesktop(MouseActionType.LeftUp, mouseX, mouseY)
			return
		}

		if event == ColliderEventType.DragStop {
			// TODO set mouse coordinates ant event type properly
			handleMouseUpDesktop(MouseActionType.LeftUp, mouseX, mouseY)
			return
		}
	}

	/// Selects the clicked window that is shown on the taskbar
	fun windowHandle(id UInt64, event ColliderEventType) Void {
		// TODO
		if event == ColliderEventType.MouseUp {
			// TODO non-raw click event from the collider engine
			if firstResponder != id {
				firstResponder = id
				bringWindowToFront(firstResponder)
				// TODO Hexa: must be null-safe
				windowsList[id].minimized = false
			} else {
				minimize(id)
			}
			requestAnimationFrame()
		}
	}

	/// Taskbar buttons like `Start`
	fun taskbarHandle(id UInt64, event ColliderEventType) Void {
		// TODO
		// TODO Hexa: switch over computable values like `case (taskbarStart.id):`
		if id == taskbarStart.id {
			// TODO left mouse button only
			if event == ColliderEventType.MouseUp {
				showStart = not showStart
				requestAnimationFrame()
				// TODO cover whole screen with clickable area to hide `Start`
			}
			return
		}
	}

	new (owner User) {
		this.user = owner
		// TODO Hexa: desktop should be pre-embed-allocated too
		desktop = new Desktop()
		desktopZone = new ColliderRectangle(0, desktopHandler)
		taskbarZone = new ColliderRectangle(0, taskbarHandler)
		windowsZone = new ColliderRectangle(0, windowHandler)

		// Taskbar
		//taskbarZone.width = 256 TODO Hexa: infer as i16
		taskbarZone.width = 1920i16 // TODO actual screen size
		taskbarZone.height = 31i16 // TODO 31 lol? related to <= in collider?
		taskbarZone.relativeY = 1080i16 - taskbarZone.height

		// Start button
		{
			let rectangle = new ColliderRectangle(1, taskbarHandler)
			rectangle.width = 44i16 // TODO respect Theme.leavesPad
			rectangle.height = 31i16 // TODO Meh just 32 is ok
			rectangle.relativeX = 0
			rectangle.relativeY = 1i16
			taskbarZone.children.push(rectangle)
			taskbarStart = rectangle
		}

		// Pins
		{
			let rectangle = new ColliderRectangle(2, taskbarHandler)
			rectangle.width = 36i16
			rectangle.height = 32i16 // TODO Always same as taskbar
			// TODO make Start consistent with this?
			rectangle.relativeX = 44i16 // TODO respect Start padding... actually just = start.w
			// rectangle.relativeY = 0i16 // TODO Hexa: hint that this is same `0` value as class' default
			taskbarZone.children.push(rectangle)
			taskbarPin = rectangle
			// TODO multiple pins
			// TODO click actually opens (an associated) app
			// (allow any file - welcoming readme by default)
		}

		// Tray
		{
			let rectangle = new ColliderRectangle(3, taskbarHandler)
			rectangle.width = 4i16
			rectangle.height = 32i16 // TODO Always same as taskbar
			rectangle.relativeX = taskbarZone.width - rectangle.width
			taskbarZone.children.push(rectangle)
			taskbarDesktopPeek = rectangle

			let rectangle = new ColliderRectangle(4, taskbarHandler)
			rectangle.width = 64i16
			rectangle.height = 32i16 // TODO Always same as taskbar
			rectangle.relativeX = taskbarDesktopPeek.relativeX - rectangle.width
			taskbarZone.children.push(rectangle)
			taskbarTime = rectangle

			let rectangle = new ColliderRectangle(5, taskbarHandler)
			rectangle.width = 16i16 + 22i16
			rectangle.height = 32i16 // TODO Always same as taskbar
			rectangle.relativeX = taskbarTime.relativeX - rectangle.width
			taskbarZone.children.push(rectangle)
			taskbarInput = rectangle

			let rectangle = new ColliderRectangle(6, taskbarHandler)
			rectangle.width = 12i16 + 20i16
			rectangle.height = 32i16 // TODO Always same as taskbar
			rectangle.relativeX = taskbarInput.relativeX - rectangle.width
			taskbarZone.children.push(rectangle)
			taskbarTrayOpener = rectangle
		}

		// List of windows (this is a separate clickable zone)
		{
			// windowHandler by windowId, but this thing just taskbarHandler
			let rectangle = new ColliderRectangle(7, taskbarHandler)
			rectangle.width = 1620i16 // TODO
			rectangle.height = 32i16 // TODO Always same as taskbar
			rectangle.relativeX = taskbarPin.relativeX + taskbarPin.width
			taskbarZone.children.push(rectangle)
			taskbarWindowList = rectangle
		}

		// Desktop
		//desktopZone.relativeY = 0
		desktopZone.width = 1920i16 // TODO actual screen size256i16
		desktopZone.height = 1080i16 // Bottom is covered by taskbar

		windowsZone.width = 1920i16 // TODO actual screen size
		windowsZone.height = 1080i16 // TODO actual screen size
		// TODO maybe just set handler to null?
		windowsZone.clickable = false
	}

	// TODO just mouseEvent?
	// TODO actually handlers must be in DWM
	fun mouseMove(mouseX Int16, mouseY Int16) Bool {
		let event = ColliderEventType.MouseMove

		// Taskbar is topmost
		// TODO some global way to detect drag of any collider to ignore any other collider
		let drag = drag as! Bool // TODO Hexa
		if taskbarZone.trySendEvent(mouseX, mouseY, event) {
			return true
		}

		// Windows go under taskbar
		let windowId = findWindowUnderCursor(mouseX, mouseY)
		if not drag, windowId != 0 {
			return false // TODO call DWM
		}

		// Desktop icons
		if desktopZone.trySendEvent(mouseX, mouseY, event) {
			return true
		}

		// Fallback to DWM
		return false
	}

	fun mouseUp(type MouseActionType, mouseX Int16, mouseY Int16) Bool {
		let event = ColliderEventType.MouseUp // TODO left/ri/mi maybe just reuse MouseActionType?

		// Taskbar is topmost
		let drag = drag as! Bool // TODO Hexa
		if taskbarZone.trySendEvent(mouseX, mouseY, event) {
			return true
		}

		// Windows go under taskbar
		let windowId = findWindowUnderCursor(mouseX, mouseY)
		if not drag, windowId != 0 {
			return false // TODO call DWM
		}

		// Desktop icons
		if desktopZone.trySendEvent(mouseX, mouseY, event) {
			return true
		}

		return false
	}

	fun mouseDown(type MouseActionType, mouseX Int16, mouseY Int16) Bool {
		let event = ColliderEventType.MouseDown

		// Taskbar is topmost
		let drag = drag as! Bool // TODO Hexa
		if not drag, taskbarZone.trySendEvent(mouseX, mouseY, event) {
			return true
		}

		// Windows go under taskbar
		let windowId = findWindowUnderCursor(mouseX, mouseY)
		if not drag, windowId != 0 {
			ColliderRectangle.clearState()
			return false // TODO call DWM
		}

		// Desktop icons
		if desktopZone.trySendEvent(mouseX, mouseY, event) {
			return true
		}

		return false
	}
}

// TODO Hexa: ensure `defaultUser` is initialized
// ^ every module-level expression could have some number attached,
// (also `static var/let`)
// that means N-index in global order of expressions (same as import order)
// and it will be enough just to compare current one with used external one
// TODO proper dynamic init
let defaultSession GraphicalSession = new GraphicalSession(defaultUser)
// `let defaultSession = new GraphicalSession` inference bug

// TODO Hexa: capturing lambdas
fun desktopHandler(id UInt64, event ColliderEventType) Void {
	defaultSession.desktopHandle(id, event)
}

fun windowHandler(id UInt64, event ColliderEventType) Void {
	defaultSession.windowHandle(id, event)
}

fun taskbarHandler(id UInt64, event ColliderEventType) Void {
	defaultSession.taskbarHandle(id, event)
}
