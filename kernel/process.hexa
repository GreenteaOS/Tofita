// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun processInit(process: Process) {
	process.pml4 = newCR3(processes[0].pml4)
	process.schedulable = false // Not yet ready
	process.scheduleOnNextTick = false // Prevent DoS attack
	memset(Pointer.of(process.frame), 0, sizeof(InterruptFrame)) // Zeroing
	process.frame.cs = Selector.USER_CODE64_SEL_USER_MODE
	process.frame.ss = Selector.USER_DATA32_SEL_USER_MODE
	// process.frame.flags = 0x002 // No interrupts
	process.frame.flags = 0x202
	process.syscallToHandle = TofitaSyscalls.Noop
	process.frame.rdxArg1 = process.pid // Second argument
	process.messages = null
	process.awaitsGetMessage = false
}

fun processCreate(): Process {
	var index: UInt64 = 0
	while index < 255 {
		index++
		if index == 256 {
			return null
		}
		if processes[index].present != true {
			break
		}
	}

	var process: Process = processes[index]
	process.pid = index
	process.present = true // Occupied

	return process
}

// Note: supposedly 10.000 system-wise
let messagesBufferSize: UInt64 = 256

		const UInt64 bytes = sizeof(wapi.Msg) * messagesBufferSize
fun getOrCreateMessagesBuffer(@volatile process: Process): /*TODO wapi.*/[Msg]? {
	if process.messages == null {

		process.messages = []

			memset((Void *)process.messages, 0, bytes)
		if process.messages != PHYSICAL_NOT_FOUND {
			process.messagesUsed = 0
		} else {
			process.messages = null
			return null
		}
	}

	return process.messages
}

Bool postMessage(@volatile process: Pointer<Process>, payload: Pointer<PostMessagePayload>) {
	// TODO do not allocate messages queue if no windows and not awaits for them
	var messages = getOrCreateMessagesBuffer(process)
	if messages == null {
		return false
	}

	if process.messagesUsed == messagesBufferSize {
		return false
	}

	var message: Msg = messages[process.messagesUsed]

	message.hwnd = payload.hWnd
	message.message = payload.msg
	message.wParam = payload.wParam
	message.lParam = payload.lParam

	message.time = uptimeMilliseconds // TODO
	message.pt.x = dwm.mouseX // TODO
	message.pt.y = dwm.mouseY // TODO
	message.lPrivate = 0

	process.messagesUsed++

	if process.awaitsGetMessage {
		process.awaitsGetMessage = false
		process.syscallToHandle = TofitaSyscalls.GetMessage
	}

	return true
}

Bool getMessage(@volatile process: Pointer<Process>, payload: Pointer<GetMessagePayload>) {
	// Do not allocate until needed
	if process.messages == null {
		return false
	}

	var messages = getOrCreateMessagesBuffer(process)
	if messages == null {
		return false
	}

	// TODO does not apply to wmQuit/wmPaint
	if process.messagesUsed == 0 {
		return false
	}

	// TODO filters & hWnd
	var message: Msg = messages[0]
	var target: Msg = payload.msg

	target.hwnd = message.hwnd
	target.message = message.message
	target.wParam = message.wParam
	target.lParam = message.lParam

	target.time = message.time
	target.pt.x = message.pt.x
	target.pt.y = message.pt.y
	target.lPrivate = message.lPrivate

	// Shift first element
	process.messagesUsed--

	for i in process.messagesUsed {
		messages[i] = messages[i + 1]
	}

	return true
}

fun processDestroy(@volatile process: Process) {
	// TODO deallocate stuff
	process.present = false
	process.messages = null

	var window = overlappedWindow_findAnyProcessWindow(process.pid)

	while window != null {
		overlappedWindow_destroy(window.windowId)
		window = overlappedWindow_findAnyProcessWindow(process.pid)
	}
}
