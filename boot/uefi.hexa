// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// UEFI bindings
// Based on public EFI header files aka GNU-EFI

declare INTN = Int64 // TODO
declare UINTN = UInt64 // TODO
declare EFI_PHYSICAL_ADDRESS = UInt64

@stack
@struct class EFI_PHYSICAL_ADDRESS_STORAGE {
	var value EFI_PHYSICAL_ADDRESS
	new () {}
}

@stack
@rename('efi::UINTN')
@struct class UINTN_STORAGE {
	var value UINTN
	new () {}
}

@stack
@struct class UINT32_STORAGE {
	var value UInt32
	new () {}
}

@stack
@struct class EFI_HANDLE_STORAGE {
	var value EFI_HANDLE
	new () {}
}

@stack
@struct class EFI_FILE_PROTOCOL_STORAGE {
	var value EFI_FILE_PROTOCOL
	new () {}
}

@stack
@struct class EFI_INTERFACE_STORAGE {
	var value EFI_PROTOCOL
	new () {}
}

//@rename('EFI_GUID')
//@asTitleCase
@struct
// declare
class EFI_GUID {
	let data1: UInt32
	let data2: UInt16
	let data3: UInt16
	// TODO let data4: ArrayByValue<UInt8, 8>
	var data4: ArrayByValue<UInt8, 8>

	/*fun areSame(other: EFI_GUID) Bool /*{
		return
			this.data1 == other.data1 and
			this.data2 == other.data2 and
			this.data3 == other.data3 and
			this.data41 == other.data41 and
			this.data42 == other.data42 and
			this.data43 == other.data43 and
			this.data44 == other.data44 and
			this.data45 == other.data45 and
			this.data46 == other.data46 and
			this.data47 == other.data47 and
			this.data48 == other.data48
	}*/ */
	// TODO `* /` parsed incorrectly
}

// TODO as method
fun areSame(one: EFI_GUID, other: EFI_GUID) Bool {
	return
		one.data1 == other.data1 and
		one.data2 == other.data2 and
		one.data3 == other.data3 and
		one.data4[1] == other.data4[1] and
		one.data4[2] == other.data4[2] and
		one.data4[3] == other.data4[3] and
		one.data4[4] == other.data4[4] and
		one.data4[5] == other.data4[5] and
		one.data4[6] == other.data4[6] and
		one.data4[7] == other.data4[7] and
		one.data4[0] == other.data4[0]
}

// TODO type should infer `@struct` from parent class
@struct
class ACPI_20_TABLE_GUID extends EFI_GUID {
	let data1: UInt32 = 0x8868e871u32
	let data2: UInt16 = 0xe4f1u16
	let data3: UInt16 = 0x11d3u16
	let data41: UInt8 = 0xbcu8
	// TODO `0xbc_u8`
	let data42: UInt8 = 0x22u8
	let data43: UInt8 = 0x0u8
	let data44: UInt8 = 0x80u8
	let data45: UInt8 = 0xc7u8
	let data46: UInt8 = 0x3cu8
	let data47: UInt8 = 0x88u8
	let data48: UInt8 = 0x81u8
	new () {}
}

@struct
class ACPI_TABLE_GUID extends EFI_GUID {
	let data1: UInt32 = 0xeb9d2d30u32
	let data2: UInt16 = 0x2d88u16
	let data3: UInt16 = 0x11d3u16
	let data41: UInt8 = 0x9au8
	// TODO `0xbc_u8`
	let data42: UInt8 = 0x16u8
	let data43: UInt8 = 0x0u8
	let data44: UInt8 = 0x90u8
	let data45: UInt8 = 0x27u8
	let data46: UInt8 = 0x3fu8
	let data47: UInt8 = 0xc1u8
	let data48: UInt8 = 0x4du8
	new () {}
}

@struct
class EFI_GRAPHICS_OUTPUT_PROTOCOL_GUID extends EFI_GUID {

	let data1: UInt32 = 0x9042a9deu32
	let data2: UInt16 = 0x23dcu16
	let data3: UInt16 = 0x4a38u16
	let data41: UInt8 = 0x96u8
	// TODO `0xbc_u8`
	let data42: UInt8 = 0xfbu8
	let data43: UInt8 = 0x7au8
	let data44: UInt8 = 0xdeu8
	let data45: UInt8 = 0xd0u8
	let data46: UInt8 = 0x80u8
	let data47: UInt8 = 0x51u8
	let data48: UInt8 = 0x6au8
	new () {}
}

@struct
class EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID extends EFI_GUID {

	let data1: UInt32 = 0x964e5b22u32
	let data2: UInt16 = 0x6459u16
	let data3: UInt16 = 0x11d2u16
	let data41: UInt8 = 0x8eu8
	// TODO `0xbc_u8`
	let data42: UInt8 = 0x39u8
	let data43: UInt8 = 0x0u8
	let data44: UInt8 = 0xa0u8
	let data45: UInt8 = 0xc9u8
	let data46: UInt8 = 0x69u8
	let data47: UInt8 = 0x72u8
	let data48: UInt8 = 0x3bu8
	new () {}
}

@struct
class EFI_FILE_INFO_ID extends EFI_GUID {

	let data1: UInt32 = 0x9576e92u32
	let data2: UInt16 = 0x6d3fu16
	let data3: UInt16 = 0x11d2u16
	let data41: UInt8 = 0x8eu8
	// TODO `0xbc_u8`
	let data42: UInt8 = 0x39u8
	let data43: UInt8 = 0x0u8
	let data44: UInt8 = 0xa0u8
	let data45: UInt8 = 0xc9u8
	let data46: UInt8 = 0x69u8
	let data47: UInt8 = 0x72u8
	let data48: UInt8 = 0x3bu8
	new () {}

	// TODO allocate statically, not ARC
	// static let guid = new EFI_FILE_INFO_ID()
}

// @rename('EFI_HANDLE')
@rename('void*')
@struct declare class EFI_HANDLE {
	// Simply a pointer
}

// TODO validate sizeOf
//@rename('EFI_TABLE_HEADER')
@struct
// declare
class EFI_TABLE_HEADER {
	let signature UInt64
	let revision UInt32
	let headerSize UInt32
	let crc32: UInt32
	let reserved UInt32
}

// @rename('EFI_HANDLE')
@rename('void*')
@struct
class EFI_PHYSICAL_VOID {}

// @rename('VOID')
@rename('void')
@struct
class EFI_VOID {}

//@rename('EFI_CONFIGURATION_TABLE')
@struct
// declare
class EFI_CONFIGURATION_TABLE {
	//@rename('VendorGuid')
	let vendorGuid ByValue<EFI_GUID>
	//@rename('VendorTable')
	let vendorTable EFI_PHYSICAL_VOID?
}

//@rename('SIMPLE_INPUT_INTERFACE')
@struct
// declare
class SIMPLE_INPUT_INTERFACE {
	// Stub
}

//@rename('SIMPLE_TEXT_OUTPUT_INTERFACE')
@struct
// declare
class SIMPLE_TEXT_OUTPUT_INTERFACE {
	// Stub
}

enum EFI_STATUS : UInt64 {
	// TODO `#define EFIERR(a) (0x8000000000000000 | a)`
	EFI_SUCCESS = 0
	EFI_NOT_READY = 9223372036854775814u64
	EFI_LOAD_ERROR = 9223372036854775809u64
	EFI_NOT_FOUND = 9223372036854775822u64
	EFI_OUT_OF_RESOURCES = 9223372036854775817u64
}

enum EFI_OpenMode : UInt64 {
	EFI_FILE_MODE_READ = 0x0000000000000001
	EFI_FILE_MODE_WRITE = 0x0000000000000002
	EFI_FILE_MODE_CREATE = 0x8000000000000000u64
}

@bitMask
enum EFI_FileAttribute : UInt64 {
	EFI_FILE_READ_ONLY = 0x0000000000000001
	EFI_FILE_HIDDEN = 0x0000000000000002
	EFI_FILE_SYSTEM = 0x0000000000000004
	EFI_FILE_RESERVED = 0x0000000000000008
	EFI_FILE_DIRECTORY = 0x0000000000000010
	EFI_FILE_ARCHIVE = 0x0000000000000020
	EFI_FILE_VALID_ATTR = 0x0000000000000037
}

// In C enums have signed int type
enum EFI_GRAPHICS_PIXEL_FORMAT : Int {
	PixelRedGreenBlueReserved8BitPerColor
	PixelBlueGreenRedReserved8BitPerColor
	PixelBitMask
	PixelBltOnly
	PixelFormatMax
}

//@castTo('efi::EFI_LOCATE_SEARCH_TYPE')
enum EFI_LOCATE_SEARCH_TYPE : Int {
	AllHandles
	ByRegisterNotify
	ByProtocol
}

@struct
//declare
class EFI_PIXEL_BITMASK {
	let redMask UInt32
	let greenMask UInt32
	let blueMask UInt32
	let reservedMask UInt32
}

@struct
// declare
class EFI_GRAPHICS_OUTPUT_MODE_INFORMATION {
	//@rename('Version')
	let version UInt32
	//@rename('HorizontalResolution')
	let horizontalResolution UInt32
	//@rename('VerticalResolution')
	let verticalResolution UInt32
	//@rename('PixelFormat')
	let pixelFormat EFI_GRAPHICS_PIXEL_FORMAT
	//@rename('PixelInformation')
	let pixelInformation ByValue<EFI_PIXEL_BITMASK>
	//@rename('PixelsPerScanLine')
	let pixelsPerScanLine UInt32
}

@struct
// declare
class EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE {
	//@rename('MaxMode')
	let maxMode UInt32
	//@rename('Mode')
	let mode UInt32
	//@rename('Info')
	let info EFI_GRAPHICS_OUTPUT_MODE_INFORMATION
	//@rename('SizeOfInfo')
	let sizeOfInfo UINTN
	//@rename('FrameBufferBase')
	let frameBufferBase EFI_PHYSICAL_ADDRESS
	//@rename('FrameBufferSize')
	let frameBufferSize UINTN
}

@struct
class EFI_PROTOCOL {
}

//@rename('EFI_GRAPHICS_OUTPUT_PROTOCOL')
@struct
// declare
class EFI_GRAPHICS_OUTPUT_PROTOCOL extends EFI_PROTOCOL {
	//@rename('QueryMode')
	@noCapture let queryMode () => EFI_STATUS
	//@rename('SetMode')
	@noCapture let setMode (gop: EFI_GRAPHICS_OUTPUT_PROTOCOL, modeNumber: UInt32) => EFI_STATUS
	//@rename('Blt')
	@noCapture let blt () => EFI_STATUS
	//@rename('Mode')
	@noCapture let mode EFI_GRAPHICS_OUTPUT_PROTOCOL_MODE
}

// TODO
//typedef UINT64 EFI_PHYSICAL_ADDRESS;
//typedef UINT64 EFI_VIRTUAL_ADDRESS;

/// Range requires a runtime mapping
// TODO convert to bit flags enum
let efi_memory_runtime = 0x8000000000000000u64

// TODO add to Hexa tests `@castTo('efi::EFI_MEMORY_TYPE')`
// TODO `var e EFI_MEMORY_TYPE` should also generate `efi::... e`
enum EFI_MEMORY_TYPE : Int {
	EfiReservedMemoryType
	EfiLoaderCode
	EfiLoaderData
	EfiBootServicesCode
	EfiBootServicesData
	EfiRuntimeServicesCode
	EfiRuntimeServicesData
	EfiConventionalMemory
	EfiUnusableMemory
	EfiACPIReclaimMemory
	EfiACPIMemoryNVS
	EfiMemoryMappedIO
	EfiMemoryMappedIOPortSpace
	EfiPalCode
	EfiMaxMemoryType
}

// TODO rename to TitleCase
//@rename('EFI_MEMORY_DESCRIPTOR')
@struct
//declare
class EFI_MEMORY_DESCRIPTOR {
	/// Field size is 32 bits followed by 32 bit pad
	//@rename('Type')
	let type EFI_MEMORY_TYPE
	/// Padding
	let pad UInt32
	/// Field size is 64 bits
	//@rename('PhysicalStart')
	let physicalStart UInt64 // TODO EFI_PHYSICAL_ADDRESS
	/// Field size is 64 bits
	let virtualStart UInt64 // TODO EFI_VIRTUAL_ADDRESS
	/// Field size is 64 bits
	//@rename('NumberOfPages')
	let numberOfPages UInt64
	/// Field size is 64 bits
	//@rename('Attribute')
	let attribute UInt64
}

//@rename('EFI_TIME_CAPABILITIES')
@struct
// declare
class EFI_TIME_CAPABILITIES {
	//@rename('Resolution')
	var resolution UInt32	// 1e-6 parts per million
	//@rename('Accuracy')
	var accuracy UInt32	// hertz
	//@rename('SetsToZero')
	var setsToZero UInt8 // Set clears sub-second time

	// TODO `new ()` non-declare consturctor cannot be empty
	new () {}
}

//@rename('EFI_RUNTIME_SERVICES')
//@asTitleCase
@struct
//declare
class EFI_RUNTIME_SERVICES {
	//@embed let hdr EFI_TABLE_HEADER
	@embed let hdr ByValue<EFI_TABLE_HEADER>

	//
	// Time services
	//
	@noCapture let getTime (time: EFI_TIME, capabilities: EFI_TIME_CAPABILITIES) => EFI_STATUS
	@noCapture let setTime () => Void
	@noCapture let getWakeupTime () => Void
	@noCapture let setWakeupTime () => Void

	//
	// Virtual memory services
	//
	@noCapture let setVirtualAddressMap () => Void
	@noCapture let convertPointer () => Void

	//
	// Variable serviers
	//
	@noCapture let getVariable () => Void
	@noCapture let getNextVariableName () => Void
	@noCapture let setVariable () => Void

	//
	// Misc
	//
	@noCapture let getNextHighMonotonicCount () => Void
	@noCapture let resetSystem () => Void

	@noCapture let updateCapsule () => Void
	@noCapture let queryCapsuleCapabilities () => Void
	@noCapture let queryVariableInfo () => Void
}

/*@rename('EFI_TIME')
@struct declare class EFI_TIME_OLD {
	@rename('Year') var year UInt16  // 1998 - 20XX
	@rename('Month') var month UInt8  // 1 - 12
	@rename('Day') var day UInt8	  // 1 - 31
	@rename('Hour') var hour UInt8	  // 0 - 23
	@rename('Minute') var minute UInt8 // 0 - 59
	@rename('Second') var second UInt8 // 0 - 59
	var pad1: UInt8
	@rename('Nanosecond') var nanosecond UInt32 // 0 - 999,999,999
	@rename('TimeZone') var timeZone Int16	   // -1440 to 1440 or 2047
	@rename('Daylight') var daylight UInt8
	var pad2: UInt8
	new ()
}*/

//@asTitleCase
//@rename('EFI_TIME')
@struct
// declare
class EFI_TIME {
	var year UInt16  // 1998 - 20XX
	var month UInt8  // 1 - 12
	var day UInt8	  // 1 - 31
	var hour UInt8	  // 0 - 23
	var minute UInt8 // 0 - 59
	var second UInt8 // 0 - 59
	var pad1: UInt8
	var nanosecond UInt32 // 0 - 999,999,999
	var timeZone Int16	   // -1440 to 1440 or 2047
	var daylight UInt8
	var pad2: UInt8
	new ()
}

// Stubs can be filled later on demand
//@struct class ConstArrayPointer<UInt8> {}
declare EFI_RAISE_TPL = ConstArrayPointer<UInt8>
declare EFI_RESTORE_TPL = ConstArrayPointer<UInt8>
declare EFI_FREE_PAGES = ConstArrayPointer<UInt8>
declare EFI_GET_MEMORY_MAP = ConstArrayPointer<UInt8>
declare EFI_ALLOCATE_POOL = ConstArrayPointer<UInt8>
declare EFI_FREE_POOL = ConstArrayPointer<UInt8>
declare EFI_CREATE_EVENT = ConstArrayPointer<UInt8>
declare EFI_SET_TIMER = ConstArrayPointer<UInt8>
declare EFI_WAIT_FOR_EVENT = ConstArrayPointer<UInt8>
declare EFI_SIGNAL_EVENT = ConstArrayPointer<UInt8>
declare EFI_CLOSE_EVENT = ConstArrayPointer<UInt8>
declare EFI_CHECK_EVENT = ConstArrayPointer<UInt8>

declare EFI_INSTALL_PROTOCOL_INTERFACE = ConstArrayPointer<UInt8>
declare EFI_REINSTALL_PROTOCOL_INTERFACE = ConstArrayPointer<UInt8>
declare EFI_UNINSTALL_PROTOCOL_INTERFACE = ConstArrayPointer<UInt8>
declare EFI_HANDLE_PROTOCOL = ConstArrayPointer<UInt8>
declare EFI_REGISTER_PROTOCOL_NOTIFY = ConstArrayPointer<UInt8>
declare EFI_LOCATE_HANDLE = ConstArrayPointer<UInt8>
declare EFI_LOCATE_DEVICE_PATH = ConstArrayPointer<UInt8>
declare EFI_INSTALL_CONFIGURATION_TABLE = ConstArrayPointer<UInt8>

declare EFI_IMAGE_LOAD = ConstArrayPointer<UInt8>
declare EFI_IMAGE_START = ConstArrayPointer<UInt8>
declare EFI_EXIT = ConstArrayPointer<UInt8>
declare EFI_IMAGE_UNLOAD = ConstArrayPointer<UInt8>
declare EFI_EXIT_BOOT_SERVICES = ConstArrayPointer<UInt8>
declare EFI_GET_NEXT_MONOTONIC_COUNT = ConstArrayPointer<UInt8>
declare EFI_STALL = ConstArrayPointer<UInt8>
declare EFI_CONNECT_CONTROLLER = ConstArrayPointer<UInt8>
declare EFI_DISCONNECT_CONTROLLER = ConstArrayPointer<UInt8>
declare EFI_OPEN_PROTOCOL = ConstArrayPointer<UInt8>
declare EFI_CLOSE_PROTOCOL = ConstArrayPointer<UInt8>
declare EFI_OPEN_PROTOCOL_INFORMATION = ConstArrayPointer<UInt8>
declare EFI_PROTOCOLS_PER_HANDLE = ConstArrayPointer<UInt8>
declare EFI_LOCATE_HANDLE_BUFFER = ConstArrayPointer<UInt8>
declare EFI_LOCATE_PROTOCOL = ConstArrayPointer<UInt8>
declare EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES = ConstArrayPointer<UInt8>
declare EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES = ConstArrayPointer<UInt8>
declare EFI_CALCULATE_CRC32 = ConstArrayPointer<UInt8>
declare EFI_COPY_MEM = ConstArrayPointer<UInt8>
declare EFI_SET_MEM = ConstArrayPointer<UInt8>
declare EFI_CREATE_EVENT_EX = ConstArrayPointer<UInt8>
// TODO all to @noCapture => stubs

//@castTo('efi::EFI_ALLOCATE_TYPE')
enum EFI_ALLOCATE_TYPE : Int {
	AllocateAnyPages
	AllocateMaxAddress
	AllocateAddress
	MaxAllocateType
}

//@rename('EFI_BOOT_SERVICES')
//@asTitleCase
@struct
//declare
class EFI_BOOT_SERVICES {
	//@embed let hdr EFI_TABLE_HEADER
	@embed let hdr ByValue<EFI_TABLE_HEADER>

	//
	// Task priority functions
	//
	let raiseTPL EFI_RAISE_TPL
	let restoreTPL EFI_RESTORE_TPL

	//
	// Memory functions
	//
	//@rename('AllocatePages')
	@noCapture let allocatePages (
		type: EFI_ALLOCATE_TYPE,
		memoryType: EFI_MEMORY_TYPE,
		noPages: UINTN,
		memory: ArrayPointer<EFI_PHYSICAL_ADDRESS>
	) => EFI_STATUS

	let freePages EFI_FREE_PAGES

	//@rename('GetMemoryMap')
	@noCapture let getMemoryMap (
		memoryMapSize: ArrayPointer<UINTN>,
		memoryMap: EFI_MEMORY_DESCRIPTOR,
		mapKey: ArrayPointer<UINTN>,
		descriptorSize: ArrayPointer<UINTN>,
		descriptorVersion: ArrayPointer<UInt32>
	) => EFI_STATUS

	let allocatePool EFI_ALLOCATE_POOL
	let freePool EFI_FREE_POOL

	//
	// Event & timer functions
	//
	let createEvent EFI_CREATE_EVENT
	let setTimer EFI_SET_TIMER
	let waitForEvent EFI_WAIT_FOR_EVENT
	let signalEvent EFI_SIGNAL_EVENT
	let closeEvent EFI_CLOSE_EVENT
	let checkEvent EFI_CHECK_EVENT

	//
	// Protocol handler functions
	//
	let installProtocolInterface EFI_INSTALL_PROTOCOL_INTERFACE
	let reinstallProtocolInterface EFI_REINSTALL_PROTOCOL_INTERFACE
	let uninstallProtocolInterface EFI_UNINSTALL_PROTOCOL_INTERFACE
	//@rename('HandleProtocol')
	@noCapture let handleProtocol (
		handle: ByValue<EFI_HANDLE>,
		protocol: EFI_GUID,
		interfaceStorage: EFI_PHYSICAL_VOID
	) => EFI_STATUS
	let pCHandleProtocol EFI_HANDLE_PROTOCOL
	let registerProtocolNotify EFI_REGISTER_PROTOCOL_NOTIFY
	let locateHandle EFI_LOCATE_HANDLE
	let locateDevicePath EFI_LOCATE_DEVICE_PATH
	let installConfigurationTable EFI_INSTALL_CONFIGURATION_TABLE

	//
	// Image functions
	//
	let loadImage EFI_IMAGE_LOAD
	let startImage EFI_IMAGE_START
	let exit EFI_EXIT
	let unloadImage EFI_IMAGE_UNLOAD

	@noCapture let exitBootServices (
		imageHandle: ByValue<EFI_HANDLE>,
		mapKey: UINTN
	) => EFI_STATUS

	//
	// Misc functions
	//
	let getNextMonotonicCount EFI_GET_NEXT_MONOTONIC_COUNT
	let stall EFI_STALL

	@noCapture let setWatchdogTimer (
		timeout: UINTN,
		watchdogCode: UInt64,
		dataSize: UINTN,
		watchdogData: ArrayPointer<UInt16>
	) => Void

	//
	// DriverSupport Services
	//
	let connectController EFI_CONNECT_CONTROLLER
	let disconnectController EFI_DISCONNECT_CONTROLLER

	//
	// Open and Close Protocol Services
	//
	let openProtocol EFI_OPEN_PROTOCOL
	let closeProtocol EFI_CLOSE_PROTOCOL
	let openProtocolInformation EFI_OPEN_PROTOCOL_INFORMATION

	//
	// Library Services
	//
	let protocolsPerHandle EFI_PROTOCOLS_PER_HANDLE
	@noCapture let locateHandleBuffer (
		searchType: EFI_LOCATE_SEARCH_TYPE,
		protocol: EFI_GUID,
		searchKey: EFI_PHYSICAL_ADDRESS,
		noHandles: ArrayPointer<UINTN>,
		buffer: ArrayPointer<EFI_HANDLE>
	) => EFI_STATUS

	//@rename('LocateProtocol')
	@noCapture let locateProtocol (
		protocol: EFI_GUID,
		registration: EFI_PHYSICAL_ADDRESS,
		interfaceStorage: ArrayPointer<EFI_VOID>
	) => EFI_STATUS

	let installMultipleProtocolInterfaces EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES
	let uninstallMultipleProtocolInterfaces EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES

	//
	// 32-bit CRC Services
	//
	let calculateCrc32: EFI_CALCULATE_CRC32

	//
	// Misc Services
	//
	let copyMem EFI_COPY_MEM
	let setMem EFI_SET_MEM
	let createEventEx EFI_CREATE_EVENT_EX
}

//@rename('EFI_SYSTEM_TABLE')
//@asTitleCase
@struct
//declare
class EFI_SYSTEM_TABLE {
	@embed let hdr ByValue<EFI_TABLE_HEADER>
	let firmwareVendor ConstArrayPointer<ClangWideChar>
	let firmwareRevision UInt32

	let consoleInHandle EFI_HANDLE
	let conIn SIMPLE_INPUT_INTERFACE

	let consoleOutHandle EFI_HANDLE
	let conOut SIMPLE_TEXT_OUTPUT_INTERFACE

	let standardErrorHandle EFI_HANDLE
	let stdErr SIMPLE_TEXT_OUTPUT_INTERFACE

	//@rename('RuntimeServices')
	let runtimeServices EFI_RUNTIME_SERVICES
	//@rename('BootServices')
	let bootServices EFI_BOOT_SERVICES

	//@rename('NumberOfTableEntries')
	let numberOfTableEntries UINTN
	//@rename('ConfigurationTable')
	let configurationTable ArrayPointer<ByValue<EFI_CONFIGURATION_TABLE>>
}

//@rename('EFI_FILE_INFO')
@struct
// declare
class EFI_FILE_INFO {
	//@rename('Size')
	let size UInt64
	//@rename('FileSize')
	let fileSize UInt64
	//@rename('PhysicalSize')
	let physicalSize UInt64
	//@rename('CreateTime')
	let createTime ByValue<EFI_TIME>
	//@rename('LastAccessTime')
	let lastAccessTime ByValue<EFI_TIME>
	//@rename('ModificationTime')
	let modificationTime ByValue<EFI_TIME>
	//@rename('Attribute')
	let attribute UInt64
	//@rename('FileName')
	// TODO `let`
	var fileName ArrayByValue<ClangWideChar, 2048>
	// Note: this name storage should be dynamically allocated
	// but here it is just large enough for any file system
	new () {}
	// TODO
	// Because of `declare` assumes that fields
	// are filled in external constructor?
}

//@rename('EFI_SIMPLE_FILE_SYSTEM_PROTOCOL')
//@asTitleCase
@struct
// declare
class EFI_SIMPLE_FILE_SYSTEM_PROTOCOL {
	let revision UInt64
	@noCapture let openVolume (
		fs: EFI_SIMPLE_FILE_SYSTEM_PROTOCOL,
		root: ArrayPointer<EFI_FILE_PROTOCOL>
		//root: ArrayPointer<EFI_FILE_HANDLE>
	) => EFI_STATUS
}

// Same as `EFI_FILE_HANDLE` and `EFI_FILE`
//@rename('EFI_FILE_PROTOCOL')
//@asTitleCase
@struct
// declare
class EFI_FILE_PROTOCOL {
	let revision UInt64

	@noCapture let open (
		file: EFI_FILE_PROTOCOL,
		//newHandle: ArrayPointer<EFI_FILE_HANDLE>, // EFI_FILE_PROTOCOL_STORAGE,
		newHandle: ArrayPointer<EFI_FILE_PROTOCOL>, // EFI_FILE_PROTOCOL_STORAGE,
		fileName: ArrayPointer<UInt16>,
		openMode: EFI_OpenMode
		attributes: EFI_FileAttribute
	) => EFI_STATUS

	@noCapture let close (
		file: EFI_FILE_PROTOCOL
	) => EFI_STATUS

	@noCapture let delete (
	) => EFI_STATUS

	@noCapture let read (
		file: EFI_FILE_PROTOCOL,
		bufferSize: ArrayPointer<UINTN>,
		buffer: EFI_HANDLE
	) => EFI_STATUS

	@noCapture let write (
	) => EFI_STATUS

	@noCapture let getPosition (
	) => EFI_STATUS

	@noCapture let setPosition (
	) => EFI_STATUS

	@noCapture let getInfo (
		file: EFI_FILE_PROTOCOL,
		informationType: EFI_GUID,
		bufferSize: ArrayPointer<UINTN>,
		buffer: EFI_FILE_INFO
		// TODO error too many arguments
	) => EFI_STATUS

	@noCapture let setInfo (
	) => EFI_STATUS

	@noCapture let flush (
	) => EFI_STATUS

	@noCapture let openEx (
	) => EFI_STATUS

	@noCapture let readEx (
	) => EFI_STATUS

	@noCapture let writeEx (
	) => EFI_STATUS

	@noCapture let flushEx (
	) => EFI_STATUS
}

//@rename('efi::EFI_FILE_HANDLE')
@struct
// declare
class EFI_FILE_HANDLE extends EFI_FILE_PROTOCOL {}
@rename('EFI_FILE') @struct declare class EFI_FILE extends EFI_FILE_PROTOCOL {}

//@size(8 + 8 + 4 + 8 * 9 + 4 + EFI_HANDLE * 10)
//@struct class INT32 {
//
//}
//
//class INTN {}
//class UINTN {}
