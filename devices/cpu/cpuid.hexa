// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

@struct
class CPUID {
	var vendorID: ArrayByValue<Char8, 13> = [0]
	var brandName: ArrayByValue<Char8, 48> = [0]
	var data: UInt32 = 0
	var extras: UInt32 = 0
}

let cpuidExtendedLevels: UInt32 = 0x80000000

fun getCPUID(): CPUID {
	var result: CPUID
	var stub: UInt32 = 0
	cpuid(
		0,
		0,
		Pointer.of(result.data),
		(Pointer.of(result.vendorID[0])) as! Pointer<UInt32>,
		(Pointer.of(result.vendorID[8])) as! Pointer<UInt32>,
		(Pointer.of(result.vendorID[4])) as! Pointer<UInt32>
	)

	cpuid(cpuidExtendedLevels, 0, Pointer.of(result.extras), Pointer.of(stub), Pointer.of(stub), Pointer.of(stub))

	if result.extras >= cpuidExtendedLevels + 4 {
		cpuid(
			cpuidExtendedLevels + 2,
			0,
			(Pointer.of(result.brandName[0])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[4])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[8])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[12])) as! Pointer<UInt32>
		)
		cpuid(
			cpuidExtendedLevels + 3,
			0,
			(Pointer.of(result.brandName[16])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[20])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[24])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[28])) as! Pointer<UInt32>
		)
		cpuid(
			cpuidExtendedLevels + 4,
			0,
			(Pointer.of(result.brandName[32])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[36])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[40])) as! Pointer<UInt32>,
			(Pointer.of(result.brandName[44])) as! Pointer<UInt32>
		)
	}

	var i = 0
	while (i++ < sizeof(result.brandName))
		if result.brandName[i] == '\r' {
			result.brandName[i] = 0
		} else if result.brandName[i] == '\n' {
			result.brandName[i] = 0
		}
	}

	i = 0
	while (i++ < sizeof(result.vendorID))
		if result.vendorID[i] == '\r' {
			result.vendorID[i] = 0
		} else if result.vendorID[i] == '\n' {
			result.vendorID[i] = 0
		}
	}

	return result
}
