// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Loads EXE and DLL files
// TODO 32-bit loader

namespace exe {

// TODO ntdll should have tofitaStub(){} for unresolved dll imports . log them

typedef fun(__fastcall *Entry)(UInt64 entry)

Void *offsetPointer(Void *data, ptrdiff_t offset) {
	return (Void *)((uint64_t)data + offset)
}

@struct
class ImageDataDirectory {
	UInt32 virtualAddress
	UInt32 size
}

@struct
class PeInterim {
	Void *base
	UInt64 entry // _DllMainCRTStartup
	const ImageDataDirectory *imageDataDirectory
	UInt64 sizeOfStackReserve
}

@struct
class ExeInterim {
	PeInterim pei
	UInt64 stackVirtual
}

@struct
class PeExportLinkedList {
	const Char8 *name
	UInt64 ptr
	PeExportLinkedList *next
	UInt8 hash
}

@struct
class Executable {
	UInt64 nextBase
	pages.PageEntry *pml4
}

// TODO probe for read/write
auto loadDll(const wchar_t *name, PeExportLinkedList *root, Executable *exec) {
	RamDiskAsset asset = getRamDiskAsset(name)
	serialPrintf("[loadDLL] loaded dll asset '%S' %d bytes at %d\n", name, asset.size, asset.data)
	auto ptr = (UInt8 *)asset.data
	auto peHeader = (const PeHeader *)((uint64_t)ptr + ptr[0x3C] + ptr[0x3C + 1] * 256)
	serialPrintf("[loadDLL] PE header signature 'PE' == '%s'\n", peHeader)
	auto peOptionalHeader = (const Pe64OptionalHeader *)((uint64_t)peHeader + sizeof(PeHeader))
	serialPrintf("[loadDLL] PE32(+) optional header signature 0x020B == %d == %d\n", peOptionalHeader.magic,
				 0x020B)
	serialPrintf("[loadDLL] PE32(+) size of image == %d\n", peOptionalHeader.sizeOfImage)

	let pages = DOWN_BYTES_TO_PAGES(peOptionalHeader.sizeOfImage) + 1
	let physical = PhysicalAllocator.allocatePages(pages)

	if (exec.nextBase == 0) {
		// TODO round to pages?
		exec.nextBase = peOptionalHeader.imageBase
	}

	pages.mapMemory(exec.pml4, exec.nextBase, physical - (uint64_t)WholePhysicalStart, pages)

	const UInt64 buffer = exec.nextBase
	memset((Void *)buffer, 0, peOptionalHeader.sizeOfImage) // Zeroing

	exec.nextBase = exec.nextBase + pages * PAGE_SIZE

	// Copy sections
	auto imageSectionHeader =
		(const ImageSectionHeader *)((uint64_t)peOptionalHeader + peHeader.sizeOfOptionalHeader)

	// TODO copy PE headers?
	for (UInt16 i = 0; i < peHeader.numberOfSections; ++i) {
		serialPrintf("[loadDLL] Copy section [%d] named '%s' of size %d at %u\n", i,
					 &imageSectionHeader[i].name, imageSectionHeader[i].sizeOfRawData,
					 imageSectionHeader[i].virtualAddress)
		UInt64 where = (uint64_t)buffer + imageSectionHeader[i].virtualAddress

		tmemcpy((Void *)where,
				(Void *)((uint64_t)asset.data + (uint64_t)imageSectionHeader[i].pointerToRawData),
				imageSectionHeader[i].sizeOfRawData)
	}

	// TODO
	{
		UInt32 (*func)() =
			(uint32_t(*)())((uint64_t)buffer + (uint64_t)peOptionalHeader.addressOfEntryPoint)
		if (peOptionalHeader.addressOfEntryPoint == 4128)
			serialPrintf("[[[IMAGE_DIRECTORY_ENTRY_EXPORT]]] calling _DllMainCRTStartup == %d\n", func())
	}

	auto imageDataDirectory =
		(const ImageDataDirectory *)((uint64_t)peOptionalHeader + sizeof(Pe64OptionalHeader))

	// Relocate EXE or DLL to a new base
	ptrdiff_t delta = (uint64_t)buffer - (uint64_t)peOptionalHeader.imageBase
	if (delta != 0) {
		UInt8 *codeBase = (UInt8 *)buffer

		PIMAGE_BASE_RELOCATION relocation

		PIMAGE_DATA_DIRECTORY directory =
			(PIMAGE_DATA_DIRECTORY)&imageDataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC]

		if (directory.size == 0) {
			// return (delta == 0)
		}

		relocation = (PIMAGE_BASE_RELOCATION)(codeBase + directory.virtualAddress)
		for (; relocation.virtualAddress > 0;) {
			UInt32 i = 0
			UInt8 *dest = codeBase + relocation.virtualAddress
			UInt16 *relInfo = (UInt16 *)offsetPointer(relocation, IMAGE_SIZEOF_BASE_RELOCATION)
			for (i = 0; i < ((relocation.sizeOfBlock - IMAGE_SIZEOF_BASE_RELOCATION) / 2); i++, relInfo++) {
				// the upper 4 bits define the type of relocation
				Int32 type = *relInfo >> 12
				// the lower 12 bits define the offset
				Int32 offset = *relInfo & 0xfff

				switch (type) {
				case IMAGE_REL_BASED_ABSOLUTE:
					// skip relocation
					break

				case IMAGE_REL_BASED_HIGHLOW:
					// change complete 32 bit address
					{
						UInt32 *patchAddrHL = (UInt32 *)(dest + offset)
						*patchAddrHL += (uint32_t)delta
					}
					break

					//#ifdef _WIN64
				case IMAGE_REL_BASED_DIR64: {
					UInt64 *patchAddr64 = (UInt64 *)(dest + offset)
					*patchAddr64 += (uint64_t)delta
				} break
					//#endif

				default:
					serialPrintf("[loadDLL] Unknown relocation: %d\n", type)
					break
				}
			}

			// advance to next relocation block
			relocation = (PIMAGE_BASE_RELOCATION)offsetPointer(relocation, relocation.sizeOfBlock)
		}
	}

	// Exports

	PeExportLinkedList *tail = root
	while (tail.next != null)
		tail = tail.next

	for (UInt32 i = 0; i < 15; ++i) {
		if (i == IMAGE_DIRECTORY_ENTRY_EXPORT) {
			UInt64 codeBase = (uint64_t)buffer
			const ImageDataDirectory *directory = &imageDataDirectory[i]

			PIMAGE_EXPORT_DIRECTORY exports

			exports = (PIMAGE_EXPORT_DIRECTORY)((uint64_t)buffer + (uint64_t)directory.virtualAddress)

			UInt32 i = 0
			UInt32 *nameRef = (UInt32 *)(codeBase + exports.addressOfNames)
			UInt16 *ordinal = (UInt16 *)(codeBase + exports.addressOfNameOrdinals)
			UInt32 entry = 0
			for (i = 0; i < exports.numberOfNames; i++, nameRef++, ordinal++, entry++) {
				let name = (const Char8 *)(codeBase + (*nameRef))
				let idx = *ordinal

				let addr = codeBase + exports.addressOfFunctions + (idx * 4)
				let ptr = (UInt32 *)addr

				UInt32 (*func)() = (uint32_t(*)())(codeBase + (uint64_t)*ptr)

				PeExportLinkedList *list =
					(PeExportLinkedList *)PhysicalAllocator.allocateBytes(sizeof(PeExportLinkedList))
				list.next = null
				list.name = name
				list.ptr = (uint64_t)func

				tail.next = list
				tail = tail.next
			}
		}
	}

	PeInterim pei

	pei.base = (Void *)buffer
	pei.entry = (uint64_t)buffer + (uint64_t)peOptionalHeader.addressOfEntryPoint
	pei.imageDataDirectory = imageDataDirectory
	pei.sizeOfStackReserve = peOptionalHeader.sizeOfStackReserve

	return pei
}

// TODO for system dlls (ntdll, user32, etc) search EVERY dll for the name, cause they
// may be moved between versions.
// Search only selected .dll only within the user provided dlls
PeExportLinkedList *getProcAddress(const Char8 *name, PeExportLinkedList *root) {
	PeExportLinkedList *list = root
	// TODO compute crc for faster .dll import names lookup
	while (list.next != null) {
		// Step upfront, to ignore empty root
		list = list.next

		UInt16 i = 0
		while (true) {
			if ((list.name[i] == name[i]) && (name[i] == 0)) {
				serialPrintf("[getProcAddress] import {%s} resolved to {%s}\n", name, list.name)
				return list
				break
			}
			if (list.name[i] == name[i]) {
				i++
				continue
			}
			break
		}
	}

	serialPrintf("[getProcAddress] import {%s} unresolved\n", name)
	return null
}

fun resolveDllImports(PeInterim pei, PeExportLinkedList *root) {
	var buffer = pei.base
	var imageDataDirectory = pei.imageDataDirectory

	// Imports
	{
		UInt8 *at =
			(UInt8 *)((uint64_t)buffer + imageDataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].virtualAddress)
		auto iid = (IMAGE_IMPORT_DESCRIPTOR *)at

		// DLL
		while (iid.originalFirstThunk != 0) {
			Char8 *szName = (Char8 *)((uint64_t)buffer + iid.name)
			auto pThunkOrg = (IMAGE_THUNK_DATA *)((uint64_t)buffer + iid.originalFirstThunk)
			FARPROC *funcRef
			funcRef = (FARPROC *)((uint64_t)buffer + iid.firstThunk)

			while (pThunkOrg.u1.addressOfData != 0) {
				Char8 *szImportName
				UInt32 ord = 666
				auto func = (Void *)null

				if ((pThunkOrg.u1.ordinal & 0x80000000) != 0) {
					ord = pThunkOrg.u1.ordinal & 0xffff
					serialPrintf("[resolveDllImports] import {%s}.@%d - at address: {%d} <------------ NOT "
								 "IMPLEMENTED YET!\n",
								 szName, ord, pThunkOrg.u1.fun)
				} else {
					IMAGE_IMPORT_BY_NAME *pIBN =
						(IMAGE_IMPORT_BY_NAME *)((uint64_t)buffer +
												 (uint64_t)((uint64_t)pThunkOrg.u1.addressOfData &
															0xffffffff))
					ord = pIBN.hint
					szImportName = (Char8 *)pIBN.name
					serialPrintf("[resolveDllImports] import {%s}.{%s}@%d - at address: {%d}\n", szName,
								 szImportName, ord, pThunkOrg.u1.fun)

					// Resolve import
					func = null

					PeExportLinkedList *proc = getProcAddress(szImportName, root)

					if (proc != null) {
						func = (Void *)proc.ptr
					} else
						func = (Void *)getProcAddress(u8"tofitaFastStub", root).ptr
				}

				*funcRef = (FARPROC)func
				pThunkOrg++
				funcRef++
			}

			iid++
		}
	}
}

auto loadExe(const wchar_t *name, PeExportLinkedList *root, Executable *exec) {
	ExeInterim ei

	ei.pei = loadDll(name, root, exec)

	// Allocate stack
	{
		let pages = DOWN_BYTES_TO_PAGES(ei.pei.sizeOfStackReserve) + 1
		let physical = PhysicalAllocator.allocatePages(pages)

		const UInt64 buffer = exec.nextBase
		pages.mapMemory(exec.pml4, exec.nextBase, physical - (uint64_t)WholePhysicalStart, pages)
		memset((Void *)buffer, 0, ei.pei.sizeOfStackReserve) // Zeroing

		exec.nextBase = exec.nextBase + pages * PAGE_SIZE

		ei.stackVirtual = buffer
	}

	return ei
}

fun resolveExeImports(const ExeInterim ei, PeExportLinkedList *root) {
	resolveDllImports(ei.pei, root)
}

fun loadExeIntoProcess(const wchar_t *file, process.Process *process) {
	{
		PeExportLinkedList *root =
			(PeExportLinkedList *)PhysicalAllocator.allocateBytes(sizeof(PeExportLinkedList))
		root.next = null
		root.name = null
		root.ptr = 0

		Executable exec
		exec.nextBase = 0
		exec.pml4 = process.pml4

		auto app = loadExe(file, root, &exec)
		auto ntdll = loadDll("desktop/ntdll.dll", root, &exec) // TODO proper path!!!
		auto kernel32 = loadDll("desktop/kernel32.dll", root, &exec)
		auto gdi32 = loadDll("desktop/gdi32.dll", root, &exec)
		auto user32 = loadDll("desktop/user32.dll", root, &exec)

		resolveDllImports(ntdll, root)
		resolveDllImports(kernel32, root)
		resolveDllImports(gdi32, root)
		resolveDllImports(user32, root)
		resolveExeImports(app, root)

		Entry entry = (Entry)ntdll.base
		process.frame.ip = ntdll.entry // Contains crt0
		process.frame.sp = app.stackVirtual
		process.frame.rcxArg0 = app.pei.entry // First argument
	}
}

} // namespace exe
