// The Tofita Kernel
// Copyright (C) 2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// SEH exceptions

// Tests in disasm show that this is not optimized out thanks to volatile

// TODO probeCopy to local stack instead of probe.read, good for SMP

// TODO rewrite in asm
// TODO no need to jump less than per-page!
// TODO Volatile<T> .read .write => cause whole-byte, avoid bit compression (for Bool etc)
// ^ the whole point of volatile is *order* of reads and writes
@customHeader('
	// Flag
	volatile bool sehProbe = false;

	volatile bool __attribute__((noinline))
	hexa_probeForReadOkay_impl(volatile uint64_t at, volatile const uint64_t bytes) {
		sehProbe = true;
		// TODO do not probe upper half to not touch mmio from user process while probing
		// TODO per-page not per-byte
		volatile const uint8_t *ptr = (volatile const uint8_t *)at;
		for (uint64_t i = 0; i < bytes; ++i) {
			at += ptr[i];
		}
		sehProbe = false;
		return true;
	}

	// This is a fascinating way to not allow compiler to optimize return value
	extern volatile bool (*volatile const hexa_probeForReadOkay)(volatile uint64_t at, volatile const uint64_t bytes);
	volatile bool (__fastcall *volatile const hexa_probeForReadOkay)(volatile uint64_t at,
												 volatile const uint64_t bytes) = hexa_probeForReadOkay_impl;
')
@volatile @noInline
@rename('hexa_probeForReadOkay')
declare
fun probeForReadOkay(@volatile at: UInt64, bytes: @volatile UInt64): Bool /*{
	sehProbe = true
	// TODO do not probe upper half to not touch mmio from user process while probing
	// TODO per-page not per-byte
	var at = at
	@volatile let ptr = at as! @volatile ArrayPointer<UInt8>
	// TODO VolatilePointer
	for i in bytes {
		// TODO i += 4096
		at += ptr[i]
	}
	sehProbe = false
	return true
}*/
//@volatile Bool (*@volatile const probeForReadOkay)(@volatile at: UInt64,
//												 @volatile bytes: UInt64) = _probeForReadOkay

@customHeader('
	volatile bool __attribute__((noinline))
	hexa_probeForWriteOkay_impl(volatile const uint64_t at, volatile const uint64_t bytes) {
		sehProbe = true;
		// TODO per-page not per-byte
		volatile uint8_t *ptr = (volatile uint8_t *)at;
		// TODO i also as volatile?
		for (uint64_t i = 0; i < bytes; ++i) {
			ptr[i] = ptr[i];
		}
		sehProbe = false;
		return true;
	}

	// This is a fascinating way to not allow compiler to optimize return value
	extern volatile bool (*volatile const hexa_probeForWriteOkay)(volatile const uint64_t at,
														 volatile const uint64_t bytes);
	volatile bool (__fastcall *volatile const hexa_probeForWriteOkay)(volatile const uint64_t at,
												  volatile const uint64_t bytes) = hexa_probeForWriteOkay_impl;
')
@volatile @noInline
@rename('hexa_probeForWriteOkay') declare
fun probeForWriteOkay(@volatile at: UInt64, @volatile bytes: UInt64): Bool /*{
	sehProbe = true
	// TODO per-page not per-byte
	@volatile let ptr = at as! @volatile ArrayPointer<UInt8>
	// TODO i also as volatile?
	for i in bytes {
		ptr[i] = ptr[i]
	}
	sehProbe = false
	return true
}*/

//@volatile Bool (*@volatile const probeForWriteOkay)(@volatile at: UInt64,
//												  @volatile bytes: UInt64) = _probeForWriteOkay
// This is a fascinating way to not allow compiler to optimize return value
//let probeForReadOkay = _probeForReadOkay
//let probeForWriteOkay = _probeForWriteOkay
