// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// Shared memory allocator for Hexa projects

//
// Hexa
//

let defaultReserveMegabytes = #if bit64 4096u16 #else 128u16 #end
let reserveAtVirtualMegabyte = #if bit64 4096*4096*4 #else (4096/4)*3 - (defaultReserveMegabytes*2) #end

fun reserveIgnore(megabytes: UInt16) {
	// Nothing, already did reserve
}

// TODO take custom reserveAtVirtualMegabyte
fun reserve(megabytes: UInt16) {
	// TODO
	wrapReserve = reserveIgnore
	wrapAllocate = allocate
}

fun allocate(size: UInt32): #if bit64 UInt64 #else UInt32 #end {
	// TODO
	return 0
}

fun allocateFirst(size: UInt32): #if bit64 UInt64 #else UInt32 #end {
	reserve(defaultReserveMegabytes)
	return allocate(size)
}

fun freeStub(pointer: UInt64, size: UInt32) {
	// Nothing, not yet ready
}

var wrapReserve = reserve

var wrapAllocate = allocateFirst

var wrapFree = freeStub

// TODO somehow set as default calling convention for all functions + depending on bits
@stdcall

// TODO Use higher allocation density on 32-bit to prolong buffer usage
@draft
@dllExport('tofitaHexaReserve')
fun tofitaHexaReserve(megabytes: UInt16) {
	wrapReserve(megabytes)
}

@draft
@dllExport('tofitaHexaAllocate')
fun tofitaHexaAllocate(size: UInt32) {
	return wrapAllocate(size)
}

@draft
@dllExport('tofitaHexaFree')
fun tofitaHexaFree(pointer: #if bit64 UInt64 #else UInt32 #end, size: UInt32) {
	wrapFree(pointer, size)
}

//
// Tofita
//

// High performance function, that does completely nothing
// TODO link names
@fastcall
@dllExport('tofitaFastStub')
fun tofitaFastStub(rcx: UInt64, rdx: UInt64): UInt32 {
	tofitaDebugLog("--> tofitaFastStub --> rcx=%8 rdx=%8".utf16(), rcx, rdx)
	return 0
}

@stdcall
@dllExport('tofitaStdStub')
fun tofitaStdStub(arg: ConstArrayPointer<UInt8>): UInt32 {
	tofitaDebugLog("--> tofitaStdStub --> arg=%8".utf16(), arg as! UInt64)
	return 0
}

// External
@emitHeader
#if bit64
@linkName('tofitaFastSystemCallWrapper')
#else
// Expected convention by assembly
@convention('fastcall')
@linkName('@tofitaFastSystemCallWrapper@8')
#end
declare fun tofitaFastSystemCallWrapper(rcx: TofitaSyscalls, rdx: #if bit64 UInt64 #else UInt32 #end): #if bit64 UInt64 #else UInt32 #end

// Return value is placed into RAX
// Only ecx/edx available in x86-32 fastcall, so use rcx/rdx pair only
#if bit64
@dllExport('tofitaFastSystemCall')
@fastcall // TODO same for 32bit?
#else
@dllExport('@tofitaFastSystemCall@8')
#end
fun tofitaFastSystemCall(rcx: TofitaSyscalls,
#if bit64
	rdx: UInt64 = 0
#else
	rdx: UInt32 = 0
#end
): #if bit64 UInt64 #else UInt32 #end
// TODO bit64 or bits64?
{
	return tofitaFastSystemCallWrapper(rcx as! TofitaSyscalls, rdx)
}

//
// Kernel32
//

@dllExport('tofitaExitProcess')
fun tofitaExitProcess(exitCode: UInt32): Void {
	tofitaFastSystemCall(TofitaSyscalls.ExitProcess, exitCode)
}

@dllExport('tofitaDebugLog')
fun tofitaDebugLog(message: ConstArrayPointer<ClangWideChar>, extra: UInt64 = 0, more: UInt64 = 0): Void {
	let payload = new ByValue<DebugLogPayload>()
	// TODO @stack
	// TODO ^ optimize to allocate on stack, some lifetime flag on creation and usage?
	payload.ref.message = message as! UInt64 // TODO ConstArrayPointer.address UInt64/32
	// TODO ConstArrayPointer.unsafeFromAddress(PointerAddress.unsafeFrom(123u64))
	// TODO on the kernel side: ValidateUserPointer<DebugLogPayload>.clone() <= does SEH copy of sizeOf
	// TODO hint `as! PointerAddress` use instead `fromAddress`
	payload.ref.extra = extra
	payload.ref.more = more
	tofitaFastSystemCall(TofitaSyscalls.DebugLog, payload.ref as! Payload)
}

#if bit64
	declare Payload = UInt64
	// TODO instead of `.ref as! Payload` use `.asAddress PointerAddress` built-in type (aka size_t)
#else
	declare Payload = UInt32
#end

//
// NjRAA
//

@dllExport('njraaSwapWindowFramebuffer')
fun njraaSwapWindowFramebuffer(windowId: UInt64, fb: WindowFramebuffer): Void {
	let payload = new SwapWindowFramebufferPayload()
	payload.windowId = windowId
	payload.fb = fb as! UInt64
	tofitaFastSystemCall(TofitaSyscalls.SwapWindowFramebuffer, payload as! #if bit64 UInt64 #else UInt32 #end)
}

@dllExport('njraaGetOrCreateWindowFramebuffer')
fun njraaGetOrCreateWindowFramebuffer(windowId: UInt64, fb: WindowFramebuffer): Void {
	let payload = new SwapWindowFramebufferPayload()
	payload.windowId = windowId
	payload.fb = fb as! UInt64
	tofitaFastSystemCall(TofitaSyscalls.GetOrCreateWindowFramebuffer, payload as! Payload)
}

//
// User32
//

@dllExport('tofitaCreateWindowEx')
fun tofitaCreateWindowEx(payload: CreateWindowExPayload): UInt64 {
	return tofitaFastSystemCall(TofitaSyscalls.CreateWindowEx as! TofitaSyscalls, payload as! Payload)
}

@dllExport('tofitaShowWindow')
fun tofitaShowWindow(windowId: UInt64, nCmdShow: CmdShow): Void {
	let payload = new ShowWindowPayload()
	payload.windowId = windowId
	payload.nCmdShow = nCmdShow
	tofitaFastSystemCall(TofitaSyscalls.ShowWindow, payload as! Payload)
}

@dllExport('tofitaGetMessage')
fun tofitaGetMessage(payload: GetMessagePayload): Bool32 {
	// TODO filters
	// TODO UInt64 -> Bool32 is a lossy conversion, type check it somehow
	return tofitaFastSystemCall(TofitaSyscalls.GetMessage as! TofitaSyscalls, payload as! Payload) as! Bool32
}

@dllExport('tofitaPostMessage')
fun tofitaPostMessage(payload: PostMessagePayload): Bool32 {
	return tofitaFastSystemCall(TofitaSyscalls.PostMessage as! TofitaSyscalls, payload as! Payload) as! Bool32
}
