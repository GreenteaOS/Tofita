// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Desktop window manager (i.e. GUI logic)

var nextDefaultWindowPosition UInt8 = 0

fun overlappedWindow_create(pid UInt64) OverlappedWindow {
	var index UInt64 = 0
	// TODO old way here, simply push
	while index < windowsLimit - 1 {
		index++ // Null-window not used directly
		if index == windowsLimit {
			return null
		}
		if windowsList[index].present != true {
			break
		}
	}

	// TODO new Window instead of [i]
	var window = windowsList[index]
	window.windowId = index
	window.pid = pid
	window.present = true
	window.visible = false
	window.width = 500 // TODO actual wapi default values
	window.height = 300 // TODO actual wapi default values

	// Calculate default position
	window.x = 200 + 48 * nextDefaultWindowPosition // TODO actual wapi default values
	window.y = 100 + 48 * nextDefaultWindowPosition // TODO actual wapi default values
	nextDefaultWindowPosition++
	if nextDefaultWindowPosition > 8 {
		nextDefaultWindowPosition = 0
	}

	window.fbZeta = null
	window.fbGama = null
	window.fbCurrentZeta = true
	window.title = null
	window.hWnd = null
	window.prevId = 0
	window.nextId = 0

	// Adding a mouse handler
	let rectangle = new ColliderRectangle(window.windowId, windowHandler)
	// TODO probably just use UInt16 for rect size
	// TODO Separate method of all those things adjust
	rectangle.height = 32i16
	rectangle.width = 148i16
	rectangle.relativeX =
		(index - 1) * rectangle.width
	// TODO Hexa: hint when var fields are set etc, but var itself not used
	// ^ cause forgot to push that rect to array
	defaultSession.taskbarWindowList.children.push(rectangle)

	return window
}

fun overlappedWindow_find(pid UInt64, windowId UInt64) OverlappedWindow {
	var index UInt64 = 0
	while index < windowsLimit - 1 {
		index++
		if index == windowsLimit {
			return null
		}
		var window = windowsList[index]
		if window.present == true && window.pid == pid && window.windowId == windowId {
			return window
		}
	}
	return null
}

fun overlappedWindow_findAnyProcessWindow(pid UInt64) OverlappedWindow {
	var index UInt64 = 0
	while index < windowsLimit - 1 {
		index++
		if index == windowsLimit {
			return null
		}
		var window = windowsList[index]
		if window.present == true && window.pid == pid {
			return window
		}
	}
	return null
}

fun overlappedWindow_detach(windowId UInt64) {
	var window = windowsList[windowId]

	windowsList[window.prevId].nextId = window.nextId
	windowsList[window.nextId].prevId = window.prevId

	if topmostWindow == windowId {
		topmostWindow = window.prevId
	}

	if firstResponder == windowId {
		firstResponder = window.prevId

		while windowsList[firstResponder].visible == false && firstResponder != 0 {
			firstResponder = windowsList[firstResponder].prevId
		}
	}

	if rootWindow == windowId {
		rootWindow = window.nextId
	}

	window.prevId = 0
	window.nextId = 0
}

fun overlappedWindow_attach(windowId UInt64) {
	windowsList[topmostWindow].nextId = windowId

	windowsList[windowId].prevId = topmostWindow
	windowsList[windowId].nextId = 0
	topmostWindow = windowId

	if windowsList[windowId].prevId == 0 {
		rootWindow = 0
	}

	if windowsList[windowId].visible {
		firstResponder = windowId
	}
}

fun overlappedWindow_destroy(windowId UInt64) {
	var window = windowsList[windowId]
	overlappedWindow_detach(windowId)

	// TODO de-allocate
	window.present = false
	window.visible = false
	window.fbZeta = null
	window.fbGama = null
	window.title = null

	// TODO make a better re-paint trigger
	haveToRender = true
}

fun initDwm() {
	mouseX = _framebuffer.width / 2i16
	mouseY = _framebuffer.height / 2i16
}

/// Detects frame button under cursor like `Close`
fun getFrameButton(mouseX Int16, mouseY Int16, windowId UInt64) FrameHover {
	if windowId == 0 {
		return FrameHover.Noop
	}

	var window = windowsList[windowId]
	let frameButtonsWidth UInt16 = 137

	let y = window.y
	let x = window.x + window.width - frameButtonsWidth

	let frameHeight = 30 + 3

	let xx = x + frameButtonsWidth
	let yy = y + frameHeight

	if mouseX >= x, mouseX <= xx, mouseY >= y, mouseY <= yy {
		let diff UInt8 = (mouseX - x) / 46u8
		if diff == 0 {
			return FrameHover.Min
		}
		if diff == 1 {
			return FrameHover.Max
		}
		return FrameHover.Close
	}

	return FrameHover.Noop
}

fun isShouldIgnoreOutsideWindow() {
	// TODO ignore everything when is down-in-window-and-moved outside of window
	return mouseDragCapturedWindow or frameHoverWindowDown
}

fun handleMouseMove(mouseX Int16, mouseY Int16) {
	if not isShouldIgnoreOutsideWindow() {
		if defaultSession.mouseMove(mouseX, mouseY) {
			return
		}
	}

	// TODO Hexa: this was actually error as if (as!) was calling expr(as!)
	// (defaultSession as! GraphicalSession).desktopHandle(0, ColliderEventType.MouseUp)

	// TODO window is nullable
	let window = windowsList[mouseDragWindow]

	// TODO Hexa: `and` instead of `&&` here, btw `,`
	// TODO disallow drag past taskbar + respect taskbar position on screen
	if mouseDragCapturedWindow && window.present && window.visible {
		let diffX = mouseX - mouseDragLastX
		let diffY = mouseY - mouseDragLastY

		window.x += diffX
		window.y += diffY

		// Assuming diff != 0
		haveToRender = true

		// TODO should do this smooth on mouse up
		if window.y < 0 {
			window.y = 0i16
		}

		mouseDragLastX = mouseX
		mouseDragLastY = mouseY

		return
	}
	// TODO `else mouseDragCapturedWindow = false`?

	// TODO Hexa: `not`
	if !frameHoverWindowDown {
		let _frameHoverWindow = frameHoverWindow
		let _frameHoverState = frameHoverState

		frameHoverWindow = findWindowUnderCursor(mouseX, mouseY)
		frameHoverState = getFrameButton(mouseX, mouseY, frameHoverWindow)

		haveToRender = haveToRender or (frameHoverWindow != _frameHoverWindow) or (_frameHoverState != frameHoverState)
		// TODO must error `=` assign `or (_frameHoverState = frameHoverState)` (both let and non-bool)
	} else {
		let _frameHoverWindowInsideButtonArea = frameHoverWindowInsideButtonArea
		frameHoverWindowInsideButtonArea = getFrameButton(mouseX, mouseY, frameHoverWindow) == frameHoverState
		haveToRender = haveToRender or (frameHoverWindowInsideButtonArea != _frameHoverWindowInsideButtonArea)
	}

	handleMouseMoveDesktop(mouseX, mouseY)
}

/// Returns zero by default, otherwise index in windows list
fun findWindowUnderCursor(mouseX Int16, mouseY Int16) UInt64 {
	var windowId = topmostWindow

	do {
		let window = windowsList[windowId]

		// TODO
		if window == null {
			break
		}

		// TODO depend on style
		let frameHeight = 30 + 3
		let frameWidth = 1

		let x = window.x - 1
		let y = window.y - 1

		let xx = x + window.width + frameWidth
		let yy = y + window.height + frameHeight

		// TODO .visible? active etc?
		if not window.minimized {
			if mouseX >= x && mouseX <= xx && mouseY >= y && mouseY <= yy {
				return windowId
			}
		}

		windowId = window.prevId
	} while (windowId != 0)

	return 0
}

fun selectMouseNextResponder(mouseX Int16, mouseY Int16) {
	// TODO hexa unconditional recursion firstResponder = selectMouseNextResponder(mouseX, mouseY)
	firstResponder = findWindowUnderCursor(mouseX, mouseY)
}

fun isDraggableFrame(mouseX Int16, mouseY Int16, windowId UInt64) Bool {
	if windowId == 0 {
		return false
	}

	var window = windowsList[windowId]

	let y = window.y
	let x = window.x

	let frameHeight = 30 + 3
	let frameButtonsWidth UInt16 = 137

	let xx = x + window.width - frameButtonsWidth
	let yy = y + frameHeight

	if mouseX >= x && mouseX <= xx && mouseY >= y && mouseY <= yy {
		return true
	}

	return false
}

fun bringWindowToFront(windowId UInt64) {
	if windowId == 0 {
		return
	}
	overlappedWindow_detach(windowId)
	overlappedWindow_attach(windowId)
}

fun handleMouseDown(type MouseActionType, mouseX Int16, mouseY Int16) {
	if defaultSession.mouseDown(type, mouseX, mouseY) {
		return
	}

	selectMouseNextResponder(mouseX, mouseY)

	if firstResponder != 0 && firstResponder != topmostWindow {
		bringWindowToFront(firstResponder)
		// TODO repaint?
	}

	if type == MouseActionType.LeftDown && isDraggableFrame(mouseX, mouseY, firstResponder) {
		mouseDragCapturedWindow = true
		mouseDragWindow = firstResponder
		mouseDragLastX = mouseX
		mouseDragLastY = mouseY
	}

	if type == MouseActionType.LeftDown && frameHoverState != FrameHover.Noop {
		frameHoverWindowDown = true
		frameHoverWindowInsideButtonArea = true
 		// TODO Hexa: fun as st useless error `requestAnimationFrame` note lack of `()`
		requestAnimationFrame()
	}

	if firstResponder == 0 {
		handleMouseDownDesktop(type, mouseX, mouseY)
	}
}

fun minimize(windowId UInt64) {
	var window = windowsList[windowId]
	window.minimized = true // Do this upfront!
	// TODO ensure prevId can be valid 0 and not garbage
	// Here we find next non-minimized window and un-minimize it
	while firstResponder != 0 and window.minimized {
		// First iteration is current window itself
		firstResponder = window.prevId
		window = windowsList[firstResponder]
	}

	bringWindowToFront(firstResponder)
}

fun handleMouseUp(type MouseActionType, mouseX Int16, mouseY Int16) {
	if not frameHoverWindowDown, defaultSession.mouseUp(type, mouseX, mouseY) {
		return
	}

	if type == MouseActionType.LeftUp {
		mouseDragCapturedWindow = false
	}

	if frameHoverWindowDown {
		frameHoverWindow = findWindowUnderCursor(mouseX, mouseY)
		let hover = getFrameButton(mouseX, mouseY, frameHoverWindow)
		var window = windowsList[frameHoverWindow]

		if hover == frameHoverState && window.present {
			if frameHoverState == FrameHover.Min {
				// TODO send message to wapi
				minimize(frameHoverWindow)
				requestAnimationFrame()
			}

			if frameHoverState == FrameHover.Max {
				// TODO send message to wapi
			}

			if frameHoverState == FrameHover.Close {
				var payload PostMessagePayload = new PostMessagePayload()

				payload.hWnd = window.hWnd as! UInt64
				payload.msg = Message.WM_CLOSE
				payload.wParam = null
				payload.lParam = null

				@volatile let process TofitaProcess = processes[window.pid]
				postMessage(process, payload)
			}
		}

		frameHoverState = hover
		frameHoverWindowDown = false
		requestAnimationFrame()
	}

	handleMouseUpDesktop(type, mouseX, mouseY)
}

fun handleMouseActivity() {
	if lockMouse {
		return
	}

	// Swap buffers
	mouseActionsUseZeta = !mouseActionsUseZeta

	@volatile let mouseActions [MouseAction] = (!mouseActionsUseZeta) ? mouseActionsZeta : mouseActionsGama

	let mouseActionsAmount UInt8 =
		(!mouseActionsUseZeta) ? mouseActionsZetaAmount : mouseActionsGamaAmount

	var mouseXtemp = mouseX
	var mouseYtemp = mouseY

	for i in mouseActionsAmount {
		let type = mouseActions[i].type

		if type == MouseActionType.Moved {

			mouseXtemp += mouseActions[i].mouseXdiff
			mouseYtemp += mouseActions[i].mouseYdiff

			if mouseYtemp < 0 {
				mouseYtemp = 0
			}
			if mouseXtemp < 0 {
				mouseXtemp = 0
			}

			// TODO Screen. screen.hexa
			if mouseXtemp > _framebuffer.width {
				mouseXtemp = _framebuffer.width as! Int16 // TODO just make mouseX same precision
			}
			if mouseYtemp > _framebuffer.height {
				mouseYtemp = _framebuffer.height as! Int16
			}

			handleMouseMove(mouseXtemp, mouseYtemp)
		} else if (type == MouseActionType.LeftUp || type == MouseActionType.RightUp ||
				   type == MouseActionType.MiddleUp) {
			handleMouseUp(type, mouseXtemp, mouseYtemp)
		} else if (type == MouseActionType.LeftDown || type == MouseActionType.RightDown ||
				   type == MouseActionType.MiddleDown) {
			handleMouseDown(type, mouseXtemp, mouseYtemp)
		}

		mouseActions[i].type = MouseActionType.Noop
	}

	if !mouseActionsUseZeta {
		mouseActionsZetaAmount = 0
	}
	if mouseActionsUseZeta {
		mouseActionsGamaAmount = 0
	}

	// Atomically update
	if mouseX != mouseXtemp || mouseY != mouseYtemp {
		haveToRenderMouseCursor = true
	}

	mouseX = mouseXtemp
	mouseY = mouseYtemp
}

fun handleKeyboardActivity() {
	// TODO
	haveToRender = true
}
