// The Tofita Kernel
// Copyright (C) 2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

class Taskbar {
	static fun compositeOpenedWindowsList(taskbarY Int16) {
		// TODO just use specs from collider
		let shortcutsWidth = 36u16 // 24 is too small
		let shortcutsEnd = shortcutsWidth + 44
		var color = new ByValue<Pixel32>()
		// TODO use colors from Theme
		color.ref.rgba.ref.a = 100
		color.ref.rgba.ref.r = color.ref.rgba.ref.g = color.ref.rgba.ref.b = 0x61u8
		let hoverColor = color
		let holdColor = color
		holdColor.ref.rgba.ref.a = 64

		// Opened windows
		// Sorted in the creation order
		for loop in defaultSession.taskbarWindowList.children.length {
			let rectangle = defaultSession.taskbarWindowList.children[loop]
			let window = windowsList[rectangle.id]

			// TODO proper iteration
			if window == null {
				continue
			}

			let w = rectangle.width
			let x = shortcutsEnd + rectangle.relativeX
			let fits = rectangle.relativeX + rectangle.width <= defaultSession.taskbarWindowList.width

			// TODO and visible?
			if window.present and fits and rectangle.enabled {
				//var rectangle = defaultSession.taskbarWindowList.children[0]
				//for r in defaultSession.taskbarWindowList.children.length {
				//	let rect = defaultSession.taskbarWindowList.children[r]
				//	if rect.id == i {
				//		// TODO Hexa: Yeah, could just use Array.find
				//		rectangle = rect
				//	}
				//}
				// TODO ellipsis
				// TODO more windows - less width
				// TODO measure default width
				let y = taskbarY
				if firstResponder == window.windowId {
					color.ref.rgba.ref.r = color.ref.rgba.ref.g = color.ref.rgba.ref.b = 0xAAu8
					color.ref.rgba.ref.a = 64
					drawRectangleWithAlpha(color.ref, x + 2i16, y, w - 4u16, 26u16)
					color.ref.rgba.ref.a = 100
				} else {
					if rectangle.mouseOver {
						drawRectangleWithAlpha(
							rectangle.mouseHold? holdColor.ref : hoverColor.ref,
							rectangle.relativeX + defaultSession.taskbarWindowList.relativeX,
							taskbarY,
							rectangle.width as! UInt16,
							rectangle.height - 2u16
						)
					}
				}

				color.ref.rgba.ref.r = color.ref.rgba.ref.g = color.ref.rgba.ref.b = 0xAAu8
				// TODO proper app icon
				drawBitmap32WithAlpha(Theme.hugeTaskbar? app32 : window.icon, x + 6i16, y + 5i16)
				// TODO widthLimit Int16, wrapAround Bool, heightLimit Int16
				let appTitleOffset = 29u16
				if not Theme.hugeTaskbar {
					drawTextBox(window.title, x + appTitleOffset, y + 10i16, color.ref, w - appTitleOffset, 32, true)
				}
				// TODO full width in active
				// TODO animate
				// TODO to not look like win10 by default, draw them as vertical
				// gradients as I did want long ago!!!
				drawRectangleWithAlpha(color.ref, x + 2i16, y + 26i16, w - 4u16, 4u16)
			}
		}
	}
}
