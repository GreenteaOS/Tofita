// The Tofita Kernel
// Copyright (C) 2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// TODO left/ri/mi
enum ColliderEventType : UInt8 {
	MouseDown = 1
	MouseUp = 2
	MouseMove = 3
	MouseScroll = 4 // TODO implement
	// TODO probably stuff like double click? oh wait, the collider generates them
	DragStart = 5 // TODO implement
	DragStop = 6
}

enum ColliderState : UInt8 {
	Default = 0
	Hover = 1

	/// Capture and keep pressed even when
	/// mouse leaves the area while kept pressed
	Drag = 2
}

class ColliderRectangle {
	var enabled Bool = true
	/// Disable for simple container
	var clickable Bool = true
	var cursor UInt64 // TODO

	/// Is mouse over this element or holds it
	/// Use this for visual effects
	var mouseOver Bool = false

	/// Is mouse presses or drags this element
	/// Use this for visual effects
	var mouseHold Bool = false

	var state ColliderState = ColliderState.Default // TODO
	// TODO:
	//var onMove (id UInt64) => Void
	// or better some handler class with id internally or something
	//var onStartDrag (id UInt64) => Void
	//var onLeftDown (id UInt64) => Void
	//var onLeftUp (id UInt64) => Void
	// TODO `@capture(closure: true)`
	var handler (id UInt64, event ColliderEventType) => Void // TODO `let`

	/// Set this to `null` to indicate lack of hint, or function that lazily updates hint content
	var hint (id UInt64) => String = null // TODO Hexa: nullable function type... `varName @nullable ()=>T`
	// TODO hint within screen bounds and under/above mouse
	static var showHintAfter UInt64 = 0
	static var showHint (id UInt64) => String = null
	static var hintReady String? = null
	static var hintOwner ColliderRectangle? = null

	// TODO Hexa: instead of `= 0` ensure init by {}
	var relativeX Int16 = 0
	var relativeY Int16 = 0
	var width Int16 = 0
	var height Int16 = 0
	// TODO track mouse enter-exit and roll-over

	/// Some unique ID
	var id UInt64 // TODO `let`

	var children [ColliderRectangle] = []

	/// Used for drag'n'drop and hover
	static var current ColliderRectangle? = null

	static fun clearState() {
		// Un-hover and un-drag
		if let current = current {
			if current.state != ColliderState.Default {
				current.state = ColliderState.Default
				current.updateVisualState()
				// TODO better idea?
				// TODO should send stop drag etc?
				requestAnimationFrame()
			}
		}

		current = null
	}

	// TODO extract handler type to type alias
	new (id UInt64, handler (id UInt64, event ColliderEventType) => Void) {
		this.handler = handler
		this.id = id
	}

	fun collides(relX Int16, relY Int16) {
		return
			relX >= relativeX and
			relY >= relativeY and
			// TODO with `<` it's kinda not what expected, validate `<=`
			relX <= (relativeX + width) and
			relY <= (relativeY + height) and
			enabled
	}

	// TODO Hexa: it is much move robust to just use getters instead
	fun updateVisualState() Void {
		this.mouseOver = state != ColliderState.Default
		this.mouseHold = state == ColliderState.Drag
	}

	fun trySendEvent(relX Int16, relY Int16, event ColliderEventType) Bool {
		if not collides(relX, relY) {
			// Early exit
			return false
		}

		// TODO Hexa: `for child in children {`
		for index in children.length {
			let child = children[index]
			let x = relX - relativeX
			let y = relY - relativeY
			if child.trySendEvent(x, y, event) {
				return true
			}
		}

		// Self clicked
		// TODO Hexa: fix! it does v table call instead
		let handler = this.handler
		let old = state
		var event = event // Override

		if let current = current, current != this, current.state == ColliderState.Drag {
			// Something else is drag'n'dropped
			if event == ColliderEventType.MouseMove {
				// Redirect event
				let handler = current.handler
				handler(current.id, ColliderEventType.MouseMove)

				return false
			}

			if event == ColliderEventType.MouseUp {
				event = ColliderEventType.MouseMove // Override
			}
		}

		if clickable {
			if let current = current, current != this {
				if current.state == ColliderState.Hover {
					current.state = ColliderState.Default
					current.updateVisualState()
					// TODO send un-hover event? to reset tooltip timer
				}

				if current.state == ColliderState.Drag {
					current.state = ColliderState.Default
					current.updateVisualState()
					// TODO should send event of un-drag? but not mouse-up cause would cause click
					let handler = current.handler
					handler(current.id, ColliderEventType.DragStop)
				}
			}

			// TODO set hover only on mouse move and UPPED
			let passMouseUp = current == this
			current = this

			if not passMouseUp {
				// Reset hint timer
				let hintDelay = 500
				showHintAfter = uptimeMilliseconds + hintDelay
				showHint = hint
				hintReady = null
				hintOwner = this
				// TODO CLEAR STATE when hover out / over window
			}

			// TODO `state == ColliderState.Hover` hint unused `==` here in vs hexa
			if state != ColliderState.Drag {
				state = ColliderState.Hover
			}

			if event == ColliderEventType.MouseDown {
				// Note that child will be dragged, not parent
				// TODO should also preserve mouse cursor (like text selection cursor)
				state = ColliderState.Drag
			}

			if event == ColliderEventType.MouseUp and state == ColliderState.Drag {
				state = ColliderState.Hover
				updateVisualState()

				if passMouseUp {
					handler(id, ColliderEventType.DragStop)
				} else {
					event = ColliderEventType.DragStop
				}
			}

			if old != state {
				updateVisualState()
				// TODO repaint ~always when drag
				// TODO better idea?
				// TODO BTW could set dirty areas too? cause rectangles are known
				requestAnimationFrame()
			}

			handler(id, event)
		}

		return clickable
		// TODO ^ Hexa: ensure returning fun *always* returns something
	}
}
