// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

declare class Config {
	let warnings Bool
	let teapot String
	var tempFolder String
}

let teaFolder = 'Tea'
let tea = '\\' + teaFolder

let dlls = [
	// Order is important
	'ntdll',
	// TODO { name: 'ntdll', deps: [] },
	'kernel32',
	'gdi32',
	'user32',
	'advapi32'
]

let deps [[String]] = [
	[],
	['ntdll'],
	['ntdll', 'kernel32'],
	['ntdll', 'kernel32', 'gdi32'],
	['ntdll', 'kernel32']
]

fun packFonts(config Config) {
		let fs = require('fs')
		let chars [{code:Int, x:Int, y:Int, width:Float}] =
			JSON.parse(fs.readFileSync('..\\Greentea\\assets\\root\\Windows\\Fonts\\default.json').toString().trim())

		let charSize = 2 + 2 + 8
		let size = 256 * charSize // Just ASCII for now
		let buffer = Buffer.alloc(size) // zeroed

		for ascii in 256 {
			for char in chars {
				if char.code == ascii {
					var offset = charSize * ascii
					offset = buffer.writeUInt16LE(char.x, offset)
					offset = buffer.writeUInt16LE(char.y, offset)
					offset = buffer.writeDoubleLE(char.width, offset)
				}
			}
		}

		fs.writeFileSync(config.tempFolder + tea + '\\ascii.tofita', buffer, "binary")
}

fun packAssets(config Config) {
		let folder = config.tempFolder + tea
		let fs = require('fs') // TODO import normally

		/// Stored in the RAM disk file, used as a key to the asset
		let assetName [String] = []
		/// Simply list of files, used only in the build process
		let assetPath [String] = []
		/// Stores list of files in the folder
		let folders [String:Buffer] = [:] // TODO `= []`?

		assetName.push('tofita.exe')
		assetPath.push(folder + '\\tofita.exe')

		assetName.push('trapeze.tofita')
		assetPath.push(folder + '\\trapeze.bin')

		for dll in dlls {
			// TODO \ not werks in js assetName.push(`C:\Windows\System32\` + dll + '.dll')
			assetName.push(`C:\\Windows\\System32\\` + dll + '.dll')
			assetPath.push(folder + '\\\(dll).64.dll')

			assetName.push(`C:\\Windows\\SysWOW64\\` + dll + '.dll')
			assetPath.push(folder + '\\\(dll).32.dll')
		}

		packFonts(config)
		assetName.push('ascii.tofita')
		assetPath.push(folder + '\\ascii.tofita')

		fun addFolderRecursive(path) {
			if fs.existsSync(path) {
				let filesList [String] = []

				fs.readdirSync(path).forEach(fun(file, index) {
					let curPath = path + "\\" + file
					let assetFullName = curPath.substr('../Greentea/assets/'.length).split('\\').join('/')

					if fs.lstatSync(curPath).isDirectory() {
						addFolderRecursive(curPath)
						// TODO better idea
						// This is a `folder` flag lol
						filesList.push(assetFullName.split('/').pop() + '\r')
					} else {
						assetName.push(assetFullName)
						assetPath.push(curPath)
						filesList.push(assetFullName.split('/').pop())
					}
				})

				let folderFullName = path.substr('../Greentea/assets/'.length).split('\\').join('/')
				folders.set(folderFullName + '\r', Buffer.from(filesList.join('\n') + '\n', "utf16le"))
			}
		}

		addFolderRecursive('..\\Greentea\\assets\\root')
		addFolderRecursive('..\\Greentea\\assets\\desktop')

		// Compute RAM disk size
		var ramDiskSize = 0
		for asset in assetPath {
			ramDiskSize += fs.statSync(asset).size
		}

		var folderCount = 0
		for folder in folders.keys() {
			ramDiskSize += folders.get(folder).length
			folderCount++
		}

		ramDiskSize += 4 // UInt32 ramDiskChecksum
		ramDiskSize += 4 // UInt32 ramDiskSize
		ramDiskSize += 4 // UInt32 assetsCount
		ramDiskSize += ( //struct assetDefinition
			//{
			256 + //	var path[256] UInt8
			4 + //	    UInt32 size
			4 //	    UInt32 offsetFromRamDiskFirstByte // NOT relative to `data`
			//}
		) * (assetName.length + folderCount)
		//uint8_t* data

		// Round upto 4 bytes
		ramDiskSize = Math.ceil(ramDiskSize / 4) * 4
		// console.log('ramDiskSize is', ramDiskSize, 'bytes')
		// console.log('Assets count is', assetName.length)

		let buffer = Buffer.alloc(ramDiskSize) // zeroed
		buffer.writeUInt32LE(0, 0)
		buffer.writeUInt32LE(ramDiskSize, 4)
		buffer.writeUInt32LE(assetName.length + folderCount, 8)
		let assetInfoSize = 256 + 4 + 4
		var assetInfoOffset = 4 + 4 + 4
		var assetDataOffset = ramDiskSize

		for i in assetName.length {
			let asset = assetName[i]
			let path = assetPath[i]
			let assetSize = fs.statSync(path).size
			buffer.write(asset, assetInfoOffset, "utf16le")
			buffer.writeUInt32LE(assetSize, assetInfoOffset + 256)

			let file = fs.readFileSync(path)
			assetDataOffset -= assetSize
			file.copy(buffer, assetDataOffset)

			buffer.writeUInt32LE(assetDataOffset, assetInfoOffset + 256 + 4)
			assetInfoOffset += assetInfoSize
		}

		for folder in folders.keys() {
			if let list = folders.get(folder) {
				buffer.write(folder, assetInfoOffset, "utf16le")
				buffer.writeUInt32LE(list.length, assetInfoOffset + 256)

				assetDataOffset -= list.length
				list.copy(buffer, assetDataOffset)

				buffer.writeUInt32LE(assetDataOffset, assetInfoOffset + 256 + 4)
				assetInfoOffset += assetInfoSize
			}
		}

		fun getChecksum() {
			var checksum = 0
			// Start from 1, coz 0 contains original checksum
			var i = 1
			while i < Math.round(ramDiskSize / 4) {
				// Well, needs better checksum... JavaScript messes with numbers
				checksum = buffer.readUInt32LE(i * 4) & 0xFFFF ^ checksum
				i++
			}
			return checksum
		}

		let ramDiskChecksum = getChecksum()
		buffer.writeUInt32LE(ramDiskChecksum, 0)
		// console.log('ramDiskChecksum is', ramDiskChecksum)

		fs.writeFileSync(folder + '\\spin-off\\TOFITA.DAT', buffer, "binary")
}
