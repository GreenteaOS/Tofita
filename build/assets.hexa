// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

module

declare class Config {
	let tempFolder: String
	let versionMajor: Int
	let versionMinor: Int
	let versionName: String
}

function packFonts(config: Config) {
		let fs = require('fs')
		let chars: [{code:Int, x:Int, y:Int, width:Float}] =
			JSON.parse(fs.readFileSync('assets/fonts/default.json').toString().trim())

		let charSize = 2 + 2 + 8
		let size = 256 * charSize // Just ASCII for now
		let buffer = Buffer.alloc(size) // zeroed

		for (ascii in 256) {
			for (char in chars) if (char.code == ascii) {
				var offset = charSize * ascii
				offset = buffer.writeUInt16LE(char.x, offset)
				offset = buffer.writeUInt16LE(char.y, offset)
				offset = buffer.writeDoubleLE(char.width, offset)
			}
		}

		fs.writeFileSync(config.tempFolder + '\\tofita\\ascii.tofita', buffer, "binary")
}

function packAssets(config: Config) {

		let fs = require('fs')

		let assetName: [String] = JSON.parse(fs.readFileSync('assets/assets.json').toString()).sort()
		let assetPath: [String] = []

		for (i in assetName.length) {
			assetPath[i] = 'assets\\' + assetName[i]
		}

		assetName.push('tofita.gnu')
		assetPath.push(config.tempFolder + '\\tofita\\tofita.exe')

		assetName.push('trampoline.tofita')
		assetPath.push(config.tempFolder + '\\tofita\\trampoline.bin')

		packFonts(config)
		assetName.push('ascii.tofita')
		assetPath.push(config.tempFolder + '\\tofita\\ascii.tofita')

		// Compute RAM disk size
		var ramDiskSize = 0
		for (asset in assetPath) {
			ramDiskSize += fs.statSync(asset).size
		}

		ramDiskSize += 4 // uint32_t ramDiskChecksum;
		ramDiskSize += 4 // uint32_t ramDiskSize;
		ramDiskSize += 4 // uint32_t assetsCount;
		ramDiskSize += ( //struct assetDefinition
			//{
			256 + //	uint8_t path[256];
			4 + //	    uint32_t size;
			4 //	    uint32_t offsetFromRamDiskFirstByte; // NOT relative to `data`
			//};
		) * assetName.length
		//uint8_t* data;

		// Round upto 4 bytes
		ramDiskSize = Math.ceil(ramDiskSize / 4) * 4
		console.log('ramDiskSize is', ramDiskSize, 'bytes')

		let buffer = Buffer.alloc(ramDiskSize) // zeroed
		buffer.writeUInt32LE(0, 0)
		buffer.writeUInt32LE(ramDiskSize,     4)
		buffer.writeUInt32LE(assetName.length,   8)
		let assetInfoSize = 256 + 4 + 4
		var assetInfoOffset = 4 + 4 + 4
		var assetDataOffset = ramDiskSize
		for (i in assetName.length) {
			let asset = assetName[i]
			let path = assetPath[i]
			let assetSize = fs.statSync(path).size
			buffer.write(asset, assetInfoOffset, "utf-8")
			buffer.writeUInt32LE(assetSize, assetInfoOffset + 256)

			let file = fs.readFileSync(path)
			assetDataOffset -= assetSize
			file.copy(buffer, assetDataOffset)

			buffer.writeUInt32LE(assetDataOffset, assetInfoOffset + 256 + 4)
			assetInfoOffset += assetInfoSize
		}

		function getChecksum() {
			var checksum = 0
			// Start from 1, coz 0 contains original checksum
			var i = 1
			while (i < Math.round(ramDiskSize / 4)) {
				// Well, needs better checksum... JavaScript messes with numbers
				checksum = buffer.readUInt32LE(i * 4) & 0xFFFF ^ checksum
				i++
			}
			return checksum
		}

		let ramDiskChecksum = getChecksum()
		buffer.writeUInt32LE(ramDiskChecksum, 0)
		console.log('ramDiskChecksum is', ramDiskChecksum)

		fs.writeFileSync(config.tempFolder + '\\tofita\\iso\\TOFITA.DAT', buffer, "binary")
}
