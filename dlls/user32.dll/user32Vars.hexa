// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

@struct
class ClassesLinkedList {
	// TODO let name String (late init)
	var name String // TODO = null or in constructor `new (named String? = null)`
	var wc WindowClass
	var next ClassesLinkedList = null // TODO Pointer useless for struct?
	new (named String) {
		name = named
	}
}

// TODO alloc by value, and use .ref (same for String.root)
// TODO use Map instead of linked list
var rootClass = new ClassesLinkedList(null)
//: ClassesLinkedList
rootClass.next = null // TODO why I do this?

// TODO some HandleWrapper with handle type field?
// TODO to enums
let windowIsWindow UInt16 = 0xA1CE

@struct
class Window {
	// @rename('windowIsWindow_') // TODO renames due to global
	var windowIsWindowSecret UInt16
	var windowId UInt64
	// TODO Bool isNativeWindow
	var proc WindowProcedure
	var fb ByValue<WindowFramebuffer>
	var instanceId UInt64 // Random unique ID
	new () {}
}

let windowIsRemoteWindow UInt16 = 0xA1CB

// Window of other process
@struct
class RemoteWindow {
	var windowIsRemoteWindow UInt16
	var pid UInt64
	var hWnd HWnd
	var instanceId UInt64 // Random unique ID
}
