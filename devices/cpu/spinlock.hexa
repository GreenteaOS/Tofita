// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on https://forum.osdev.org/viewtopic.php?f=8&t=30052

@rename('__sync_bool_compare_and_swap')
declare fun __sync_bool_compare_and_swap(
	ptr ArrayPointer<UInt32>,
	compVal UInt32,
	exchVal UInt32
) Bool

@rename('__sync_lock_release')
declare fun __sync_lock_release(
	ptr ArrayPointer<UInt32>
) Void

@struct @sizeOf(4)
class SpinLock {
	// TODO is it faster to use uint8_t?
	@volatile private var counter ArrayByValue<UInt32, 1> = [0]

	@inline fun lock() {
		// TODO instant return if a lock held without loops
		// TODO simply loop 4096 times before doing version with `pause()`
		// TODO UInt8 tries = 255
		// TODO yield to another process
		while !__sync_bool_compare_and_swap(counter.ref, 0, 1) {
			while counter[0] != 0 {
				// Please note, that the loop also requires __mm_pause() to enable hyperthreads
				pause()
				// TODO just use __mm_pause
			}
		}
	}

	// TODO C++20 inline attribute
	@inline fun unlock() {
		__sync_lock_release(counter.ref)
	}
}
