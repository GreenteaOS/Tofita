// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// Align to 4096
let addressBits = 12u64
var pml4entries ArrayPointer<ByValue<PageEntry>> = null

fun conventionalAllocatePage() ArrayPointer<ByValue<PageEntry>> {
	// TODO bounds check
	return conventionalAllocateNext(pageSize) as! ArrayPointer<ByValue<PageEntry>>
}

fun mapPage(entry PageEntry, address UInt64, writeAllowed UInt8) {
	entry.address = address >> addressBits
	entry.present = 1u64
	entry.writeAllowed = (writeAllowed == 1) ? 1u64 : 0u64
	entry.accessibleByAll = 0u64
}

fun mapPageHuge(entry PageEntry, address UInt64) {
	entry.address = address >> addressBits
	entry.present = 1u64
	entry.writeAllowed = 1u64
	entry.largePage = 1u64
	entry.accessibleByAll = 0u64
	// TODO ^ should NX be explicitly enabled on AMD64?
}

// TODO epic pages if CPU ID supports them

fun referOrCreatePage(table ArrayPointer<ByValue<PageEntry>>, entryId UInt64, writeAllowed UInt8) ArrayPointer<ByValue<PageEntry>> {
	var entry PageEntry = table[entryId].ref

	if entry.present == 1 {
		return (entry.address << addressBits) as! ArrayPointer<ByValue<PageEntry>>
	} else {
		// TODO check for null
		var newPage = conventionalAllocatePage()
		mapPage(entry, newPage as! UInt64, writeAllowed)
		return newPage
	}
}

/// allows to access separate address by page table levels
@struct @packed @sizeOf(8)
class PageAddressView {
	@bits(12) var offset UInt64
	@bits(9) var pt UInt64
	@bits(9) var pd UInt64
	@bits(9) var pdpt UInt64
	@bits(9) var pml4 UInt64
	@bits(16) var padding UInt64
}

fun getPageAddressView(address UInt64) ByValue<PageAddressView> {
	return address as! ByValue<PageAddressView>
}

fun mapPT(pt ArrayPointer<ByValue<PageEntry>>, virtualAddr UInt64, physicalAddr UInt64, writeAllowed UInt8) {
	let view = getPageAddressView(virtualAddr)
	let entry PageEntry = pt[view.ref.pt].ref
	// TODO unsupported by C `var entry PageEntry = pt[getPageAddressView(virtualAddr).ref.pt].ref`
	mapPage(entry, physicalAddr, writeAllowed)
}

fun mapP2Huge(pd ArrayPointer<ByValue<PageEntry>>, virtualAddr UInt64, physicalAddr UInt64) {
	let view = getPageAddressView(virtualAddr)
	let entry PageEntry = pd[view.ref.pd].ref
	// TODO var entry PageEntry = pd[getPageAddressView(virtualAddr).ref.pd].ref
	mapPageHuge(entry, physicalAddr)
}

fun mapPD(pd ArrayPointer<ByValue<PageEntry>>, virtualAddr UInt64, physicalAddr UInt64,
							writeAllowed UInt8) Void {
	let view = getPageAddressView(virtualAddr)
	let pt = referOrCreatePage(pd, view.ref.pd, writeAllowed)
	// TODO var pt = referOrCreatePage(pd, getPageAddressView(virtualAddr).ref.pd, writeAllowed)
	mapPT(pt, virtualAddr, physicalAddr, writeAllowed)
}

fun mapPDPT(pdpt ArrayPointer<ByValue<PageEntry>>, virtualAddr UInt64, physicalAddr UInt64,
							writeAllowed UInt8) Void {
	let view = getPageAddressView(virtualAddr)
	var pd = referOrCreatePage(pdpt, view.ref.pdpt, writeAllowed)
	// TODO var pd = referOrCreatePage(pdpt, getPageAddressView(virtualAddr).ref.pdpt, writeAllowed)
	mapPD(pd, virtualAddr, physicalAddr, writeAllowed)
}

fun mapPML4(pml4 ArrayPointer<ByValue<PageEntry>>, virtualAddr UInt64, physicalAddr UInt64,
							writeAllowed UInt8) Void {
	let view = getPageAddressView(virtualAddr)
	let pdpt = referOrCreatePage(pml4, view.ref.pml4, writeAllowed)
	mapPDPT(pdpt, virtualAddr, physicalAddr, writeAllowed)
}

fun mapP3Huge(pdpt ArrayPointer<ByValue<PageEntry>>, virtualAddr UInt64, physicalAddr UInt64) Void {
	let view = getPageAddressView(virtualAddr)
	let pd = referOrCreatePage(pdpt, view.ref.pdpt, 1u8)
	mapP2Huge(pd, virtualAddr, physicalAddr)
}

fun mapP4Huge(pml4 ArrayPointer<ByValue<PageEntry>>, virtualAddr UInt64, physicalAddr UInt64) Void {
	let view = getPageAddressView(virtualAddr)
	let pdpt = referOrCreatePage(pml4, view.ref.pml4, 1u8)
	mapP3Huge(pdpt, virtualAddr, physicalAddr)
}

fun mapMemory(virtualAddr UInt64, physicalAddr UInt64, pageCount UInt64, writeAllowed UInt8) {
	serialPrintln("[paging] mapping memory range")

	var virtualAddrEnd UInt64 = virtualAddr + pageCount * pageSize

	var vAddress UInt64 = virtualAddr
	var pAddress UInt64 = physicalAddr

	serialPrintf("[paging.range] Bytes to map %d == %d\n", virtualAddrEnd - virtualAddr, pageCount * pageSize)

	serialPrint("[paging.range] At virtual address = ")
	serialPrintHex(virtualAddr)
	serialPrint("\n")

	serialPrint("[paging.range] To physical address = ")
	serialPrintHex(physicalAddr)
	serialPrint("\n")

	serialPrint("[paging.range] Of page count = ")
	serialPrintHex(pageCount)
	serialPrint("\n")

	serialPrint("[paging.range] The virtual address end = ")
	serialPrintHex(virtualAddrEnd)
	serialPrint("\n")

	while vAddress < virtualAddrEnd {
		mapPML4(pml4entries, vAddress, pAddress, writeAllowed)

		vAddress += pageSize
		pAddress += pageSize
	}
}

// TODO make clearer about page count, cause in fact not 4k
fun mapMemoryHuge(virtualAddr UInt64, physicalAddr UInt64, pageCount UInt64) {
	var virtualAddrEnd UInt64 = virtualAddr + pageCount * pageSize

	var vAddress UInt64 = virtualAddr
	var pAddress UInt64 = physicalAddr

	while vAddress < virtualAddrEnd {
		mapP4Huge(pml4entries, vAddress, pAddress)

		vAddress += pageSize * 512u64
		pAddress += pageSize * 512u64
	}
}
