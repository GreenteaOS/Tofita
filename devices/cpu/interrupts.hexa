// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

let pic1 = 0x20u8 // io base address for main pic
let pic2 = 0xa0u8 // io base address for secondary pic
let pic1_command = pic1
let pic1_command_0x20 = 0x20u16
let pic1_data = (pic1 + 1)
let pic2_command = pic2
let pic2_data = (pic2 + 1)
let pic_eoi = 0x20u8	  // end-of-interrupt command code
let pic_eoi_0x20 = 0x20u8 // end-of-interrupt command code

@rename('vmemcpy')
declare fun tmemcpy(dest ArrayPointer<UInt8>, src ConstArrayPointer<UInt8>, count UInt64) Void
/* {
	for i in count {
		dest[0] = src[0]
	}
}*/

@rename('vmemcpy')
declare fun vmemcpy(@volatile dest ArrayPointer<UInt8>, @volatile src ConstArrayPointer<UInt8>, @volatile count UInt64) Void
/* {
	for i in count {
		dest[0] = src[0]
	}
}*/

// TODO @byValue
@struct @packed @sizeOf(10)
// TODO @rename('Idtr')
// TODO @asIs
// TODO declare
class Idtr {
	var limit UInt16
	var offset UInt64
	new ()
}

/// Levels which are allowed to access this interrupt via the INT instruction.
/// Hardware interrupts ignore this mechanism.
// TODO
enum DPL : UInt8 {
	OnlySystem = 0
	AllowFromUser = 3
}

@struct @packed
class IdtEntry {
	@bits(16) var offsetLowerBits UInt16
	@bits(16) var selector UInt16
	@bits(8) var ist UInt8
	@bits(4) var gateType UInt8
	@bits(1) var z UInt8

	// TODO Make it enum for safety/sanity
	@bits(2) var dpl UInt8
	@bits(1) var present UInt8
	@bits(48) var offsetHigherBits UInt64
	@bits(32) var zero UInt32
}

fun readPort(@volatile port UInt16) UInt8 {
	return portInb(port)
}

fun writePort(@volatile port UInt16, @volatile value UInt8) {
	portOutb(port, value)
}

@emitHeader @linkAsIs
declare fun loadIdt(@volatile idtr Idtr) Void

// Handling IDT
let idt_size = 256
// TODO IdtEntry IDT[idt_size]
var idt ArrayByValue<ByValue<IdtEntry>, 256> = []

// Handling interrupts and exceptions
fun defineIdtCallback(entry IdtEntry, address UInt64, stack UInt8, level UInt8) {
	entry.offsetLowerBits = address & 0xFFFFu16
	entry.offsetHigherBits = (address & 0xFFFFFFFFFFFF0000u64) >> 16
	entry.selector = Selector.SYS_CODE64_SEL as! UInt16
	entry.zero = 0
	entry.ist = stack
	entry.z = 0
	entry.dpl = level // Ring 0 or 3
	entry.present = 1
	entry.gateType = 0xE // Interrupt gate
	// Interrupt gate allow avoid dealing with nested interrupts
	// TODO we need so much ISTs then?
}

fun setIdtCallback(entry IdtEntry, callbackHandler UInt64) {
	// Ring 3 cause div by zero etc
	defineIdtCallback(entry, callbackHandler, 1, 3)
}

// PIC http://wiki.osdev.org/8259_PIC
// TODO move to separate module
fun remapPic() {
	serialPrintln("[cpu] begin: remap PIC")

	writePort(0x20, 0x11)
	writePort(0xA0, 0x11)
	writePort(0x21, 0x20)
	writePort(0xA1, 0x28)
	writePort(0x21, 0x04)
	writePort(0xA1, 0x02)
	writePort(0x21, 0x01)
	writePort(0xA1, 0x01)
	writePort(0x21, 0x0)
	writePort(0xA1, 0x0)

	serialPrintln("[cpu] done: remap PIC")
}

// Sets up the legacy PIC and then disables it
fun disablePic() {
	serialPrintln("[cpu] begin: disable PIC")

	/* Set ICW1 */
	writePort(0x20, 0x11)
	writePort(0xA0, 0x11)

	/* Set ICW2 (IRQ base offsets) */
	writePort(0x21, 0xE0)
	writePort(0xA1, 0xE8)

	/* Set ICW3 */
	writePort(0x21, 4)
	writePort(0xA1, 2)

	/* Set ICW4 */
	writePort(0x21, 1)
	writePort(0xA1, 1)

	/* Set OCW1 (interrupt masks) */
	writePort(0x21, 0xFF)
	writePort(0xA1, 0xFF)

	serialPrintln("[cpu] done: disable PIC")
}

fun physicalToVirtual(physical UInt64) UInt64 {
	var result UInt64 = (wholePhysicalStart as! UInt64) + (physical as! UInt64)
	return result
}

// TODO check for CPU feature
fun enableLocalApic() {
	serialPrintln("[cpu] begin: enableLocalApic")

	var ptr = physicalToVirtual(0xFEE000F0u32) as! ArrayPointer<UInt32>
	var val UInt32 = ptr[0]
	quakePrintf("APIC value is %u\n".utf16(), val)

	serialPrintln("[cpu] done: enableLocalApic")
}

let irq0 = 32u16
let irq1 = 0x21u16 // 33
let irq2 = 34u16
let irq3 = 35u16
let irq4 = 36u16
let irq5 = 37u16
let irq6 = 38u16
let irq7 = 39u16
let irq8 = 40u16
let irq9 = 41u16
let irq10 = 42u16
let irq11 = 43u16
let irq12 = 44u16 // 2c
let irq13 = 45u16
let irq14 = 46u16
let irq15 = 47u16

@struct @packed @sizeOf(10)
// TODO @asIs
// TODO @rename('TablePtr')
// TODO declare
class TablePtr {
	var limit UInt16
	var base UInt64
	new ()
}

@struct @packed
class TssDescriptor {
	var limitLow UInt16
	var base_00 UInt16
	var base_16 UInt8
	var type GdtType
	var size UInt8
	var base_24 UInt8
	var base_32 UInt32
	var reserved UInt32
}

@struct @packed
class TssEntry {
	var reserved0 UInt32

	var rsp ArrayByValue<UInt64, 3> // stack pointers for CPL 0-2
	var ist ArrayByValue<UInt64, 8> // ist[0] is reserved

	var reserved1 UInt64
	var reserved2 UInt16
	var ioMapOffset UInt16

	new () {}
}

@aligned(64) @volatile var globalGdtr TablePtr = new TablePtr()
@aligned(64) @volatile var globalTss TssEntry = new TssEntry()

// rsp0stack = exp0 in TSS
// Stack used by kernel to handle syscalls/interrupts
// `4096 * 32 = 131072`
// TODO `let`
let rspStackSize = 131072u64

@aligned(64) var rsp0stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var rsp1stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var rsp2stack ArrayByValue<UInt8, 131072> = [0]

@aligned(64) var ist0stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var ist1stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var ist2stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var ist3stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var ist4stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var ist5stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var ist6stack ArrayByValue<UInt8, 131072> = [0]
@aligned(64) var ist7stack ArrayByValue<UInt8, 131072> = [0]

// LLVM did the magic expected of it. It only saved registers that are clobbered by your fun (hence rax).
// All other register are left unchanged hence thereâ€™s no need of saving and restoring them.
// https://github.com/phil-opp/blog_os/issues/450#issuecomment-582535783

// TODO: errcode is `extra` here:
//@aligned(64) @interrupt Void unknownInterrupt(struct frame: <InterruptFrame>,
// uint64_t
// extra) {
// https://github.com/llvm-mirror/clang/blob/master/test/SemaCXX/attr-x86-interrupt.cpp#L30
//declare fun anyInterruptHandler(frame: <InterruptFrame>) Void

// TODO remove
@aligned(64) @interrupt fun unknownInterrupt(frame InterruptFrame) Void {
	// TODO Find a better way to avoid LLVM bugs
	anyInterruptHandler(frame)
}

fun anyInterruptHandler(frame InterruptFrame) Void {
	disableAllInterrupts()
	#if false
		let stack = ((frame as! UInt64) - 200) as! InterruptStack
	#end

	// Enable interrupts
	writePort(0xA0, 0x20)
	writePort(pic1_command_0x20, pic_eoi_0x20)

	// Operating systems use some of the segments for internal usage.
	// For instance GS register to access the TLS (thread local storage)
}

fun syscallInterruptHandler(frame InterruptFrame) {
	disableAllInterrupts()
	@volatile let process TofitaProcess = processes[currentProcess]
	process.schedulable = false
	@volatile let index = frame.rcxArg0 as! TofitaSyscalls

	// No-op
	// TODO kernel must decide
	if (index as! UInt64) < userSyscalls {
		process.schedulable = true
		return
	}

	process.syscallToHandle = index

	switchToKernelThread(frame)
	// TODO weird frame+8 offset if called switchToNextProcess
	// switchToNextProcess(frame)
	{
		return // TODO
	}

	if index == TofitaSyscalls.DebugLog {
		serialPrintf("[[DebugLog:PID %d]] %s\n", currentProcess, frame.rdxArg1)
		return
	}

	if index == TofitaSyscalls.ExitProcess {
		serialPrintf("[[ExitProcess:PID %d]] %d\n", currentProcess, frame.rdxArg1)
		// TODO kernel wake up
		// TODO destroy process
		var process TofitaProcess = processes[currentProcess]
		process.schedulable = false
		switchToNextProcess(frame)
		process.present = false
		return
	}
}

@emitHeader @linkAsIs
declare fun setTsr(@volatile tsrData UInt16) Void

let ps2_data_port = 0x60u8
let ps2_control_port = 0x64u8

// Takes 2 GDT entries
fun tssSetEntry(i UInt8, base UInt64, limit UInt64) {
	var tssd TssDescriptor = (gdtTemplate.ref as! UInt64 + i * 2 * 4) as! TssDescriptor
	tssd.limitLow = limit & 0xFFFFu16
	tssd.size = (limit >> 16) & 0xFu8

	tssd.base_00 = base & 0xFFFFu16
	tssd.base_16 = (base >> 16) & 0xFFu8
	tssd.base_24 = (base >> 24) & 0xFFu8
	tssd.base_32 = (base >> 32) & 0xFFFFFFFFu32
	tssd.reserved = 0

	tssd.type = (
		GdtType.Accessed |
		GdtType.Execute |
		GdtType.Ring3 | // TODO
		GdtType.Present
	) as! GdtType
}

@aligned(64) var cacheIdtr Idtr = new Idtr()

fun setupInterruptsAndExceptions() {
	let sizeOfTssEntry UInt16 = sizeOf<TssEntry>() as! UInt16

	// TODO zeroMemory
	memset(globalTss as! ArrayPointer<UInt8>, 0, sizeOfTssEntry)
	globalTss.ioMapOffset = sizeOfTssEntry
	// TODO per-CPU core stacks required?
	globalTss.rsp[0] = rsp0stack.ref as! UInt64 + rspStackSize
	globalTss.rsp[1] = rsp1stack.ref as! UInt64 + rspStackSize
	globalTss.rsp[2] = rsp2stack.ref as! UInt64 + rspStackSize
	// TODO zero out stacks
	// TODO more stacks
	globalTss.ist[0] = ist0stack.ref as! UInt64 + rspStackSize
	globalTss.ist[1] = ist1stack.ref as! UInt64 + rspStackSize
	globalTss.ist[2] = ist2stack.ref as! UInt64 + rspStackSize
	globalTss.ist[3] = ist3stack.ref as! UInt64 + rspStackSize
	globalTss.ist[4] = ist4stack.ref as! UInt64 + rspStackSize
	globalTss.ist[5] = ist5stack.ref as! UInt64 + rspStackSize
	globalTss.ist[6] = ist6stack.ref as! UInt64 + rspStackSize
	globalTss.ist[7] = ist7stack.ref as! UInt64 + rspStackSize

	let tssBase UInt64 = globalTss as! UInt64

	// upload
	{
		serialPrintf("[cpu] TSS base is %8\n", tssBase)
		tssSetEntry(8, tssBase, sizeOfTssEntry)
		// tssSetEntry(8, tssBase, sizeOfTssEntry - 1) TODO correct size?
	}

	// globalGdtr.limit = sizeOf(gdtTemplate) - 1 TODO
	globalGdtr.limit = (4 * 32) - 1u16
	globalGdtr.base = gdtTemplate.ref as! UInt64
	lgdt(globalGdtr)
	{
		setTsr(64)
		// TODO setTsr(64 + 3)
	}

	serialPrintln("[cpu] Initializing interrupts")

	// TODO 286 magic number
	for i in 286 {
		setIdtCallback(idt[i].ref, unknownInterrupt as! UInt64)
	}

	// CPU exceptions
	setIdtCallback(idt[0x00].ref, cpu0x00 as! UInt64)
	setIdtCallback(idt[0x01].ref, cpu0x01 as! UInt64)
	setIdtCallback(idt[0x02].ref, cpu0x02 as! UInt64)
	setIdtCallback(idt[0x03].ref, cpu0x03 as! UInt64)
	setIdtCallback(idt[0x04].ref, cpu0x04 as! UInt64)
	setIdtCallback(idt[0x05].ref, cpu0x05 as! UInt64)
	setIdtCallback(idt[0x06].ref, cpu0x06 as! UInt64)
	setIdtCallback(idt[0x07].ref, cpu0x07 as! UInt64)
	setIdtCallback(idt[0x08].ref, cpu0x08 as! UInt64)
	setIdtCallback(idt[0x09].ref, cpu0x09 as! UInt64)
	setIdtCallback(idt[0x0A].ref, cpu0x0A as! UInt64)
	setIdtCallback(idt[0x0B].ref, cpu0x0B as! UInt64)
	setIdtCallback(idt[0x0C].ref, cpu0x0C as! UInt64)
	setIdtCallback(idt[0x0D].ref, cpu0x0D as! UInt64)
	setIdtCallback(idt[0x0E].ref, cpu0x0E as! UInt64)
	setIdtCallback(idt[0x0F].ref, cpu0x0F as! UInt64)
	setIdtCallback(idt[0x10].ref, cpu0x10 as! UInt64)
	setIdtCallback(idt[0x11].ref, cpu0x11 as! UInt64)
	setIdtCallback(idt[0x12].ref, cpu0x12 as! UInt64)
	setIdtCallback(idt[0x13].ref, cpu0x13 as! UInt64)
	setIdtCallback(idt[0x14].ref, cpu0x14 as! UInt64)
	setIdtCallback(idt[0x15].ref, cpu0x15 as! UInt64)

	// PIC interrupts
	setIdtCallback(idt[irq0].ref, timerInterrupt as! UInt64)
	defineIdtCallback(idt[irq1].ref, keyboardHandler as! UInt64, 2, 0)
	defineIdtCallback(idt[irq12].ref, mouseHandler as! UInt64, 2, 0)

	// Syscalls
	defineIdtCallback(idt[0x80].ref, syscallInterrupt as! UInt64, 1, 3)
	defineIdtCallback(idt[0x81].ref, yieldInterrupt as! UInt64, 1, 3)

	cacheIdtr.limit = (sizeOf<IdtEntry>() * idt_size) - 1u16
	cacheIdtr.offset = idt as! UInt64

	serialPrint("[cpu] IDTR points to: ")
	serialPrintHex(cacheIdtr as! UInt64)
	serialPrint("\n")
	serialPrint("[cpu] IDT points to: ")
	serialPrintHex(idt.ref as! UInt64)
	serialPrint("\n")
	serialPrintf("[cpu] IDT size is %u of %u elements of %u==16 size\n", cacheIdtr.limit, idt_size,
				 sizeOf<IdtEntry>())
	// Before you implement the IDT, make sure you have a working GDT
	remapPic()
	loadIdt(cacheIdtr)

	serialPrintln("[cpu] Select segments of value SYS_CODE64_SEL & SYS_DATA32_SEL")
	enterKernelMode()

	// Set PIT frequency
	// Valid values: 57 Hz, 121 Hz, 173 Hz, 209 Hz, 363 Hz
	// Next valid: `i = 174; while (Math.round(1193181 / i) != (1193181 / i)) {i++;}; console.log(i)`
	writePort(0x43, 0x36)
	let frequency = 1193181 / 121
	writePort(0x40, frequency & 0xFFu8)
	writePort(0x40, (frequency >> 8) & 0xFFu8)

	// Unmasking IRQ to support all the things
	writePort(irq1, 0)
	// 0xFA - timer
	// 0xFC - timer and kb
	// 0xFD - kb
	// 0xFE - timer
	// 0xFF - none
}
