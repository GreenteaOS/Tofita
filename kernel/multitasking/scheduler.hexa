// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Scheduling
enum ThreadKind : UInt8 {
	THREAD_INIT = 0 // kernelMain, it will be destroyed
	THREAD_GUI = 1
	THREAD_KERNEL = 2
	THREAD_USER = 3
}

@volatile var currentThread ThreadKind = ThreadKind.THREAD_INIT

var kernelThreadFrame = new InterruptFrame()

// ~121 times per second
var timerCalled UInt64 = 0

fun switchToUserProcess() {
	var next = getNextProcess()

	// TODO comparing `nullable == 0` error
	if next == 0 {
		markAllProcessessSchedulable()
		// TODO markAllProcessesSchedulable() sess typo
		next = getNextProcess()
		// TODO ^ should return `Process?` not index
	}

	if next == 0 {
		enableAllInterruptsAndHalt() // Nothing to do
		// TODO yield into GUI thread if it has incomplete draws
		// (otherwise it may wait for the timer and drop frames)
	} else {
		yield()
		// TODO may timer somehow interrupt yield handler?
	}
}

var extraMillisecond UInt8 = 0
var taskBarRedraw UInt8 = 0 // Re-paint task bar current time
@volatile var nextIsUserProcess Bool = false
@volatile var nextIsGuiThread Bool = true

fun getNextProcess() UInt64 {
	// Note that idle process is ignored
	for index in 1...processes.length {
		let process = processes[index]
		if process != null, process.present == true, process.syscallToHandle == TofitaSyscalls.Noop {
			if process.schedulable == true {
				if process.scheduleOnNextTick == true {
					return index as! UInt64
				}
			}
		}
	}

	return 0 // Idle
}

fun markAllProcessessSchedulable() {
	for index in processes.length {
		let process = processes[index]
		if process != null, process.present == true {
			if process.schedulable == true {
				process.scheduleOnNextTick = true
			}
		}
	}
}

fun switchToKernelThread(@volatile frame: InterruptFrame) {
	if currentThread == ThreadKind.THREAD_KERNEL {
		return
	}

	if currentThread == ThreadKind.THREAD_USER {
		// Save
		var process TofitaProcess = processes[currentProcess]
		tmemcpy(process.frame as! ArrayPointer<UInt8>, frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
	} else if currentThread == ThreadKind.THREAD_GUI {
		// Save
		tmemcpy(guiThreadFrame as! ArrayPointer<UInt8>, frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
	}

	// Restore
	currentThread = ThreadKind.THREAD_KERNEL
	writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))
	tmemcpy(frame as! ArrayPointer<UInt8>, kernelThreadFrame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
}

fun switchToNextProcess(@volatile frame: InterruptFrame) {
	@volatile var next = getNextProcess()

	if next == 0 {
		markAllProcessessSchedulable()
		next = getNextProcess()
	}

	var process TofitaProcess = processes[next]
	@volatile let old = currentProcess
	currentProcess = process.pid
	// TODO in .exe loader, disallow changing of CR3 until not fully loaded
	// another option is to save/restore CR3 used by kernel thread
	writeCr3((process.pml4 as! UInt64) - (wholePhysicalStart as! UInt64))
	process.scheduleOnNextTick = false

	// Note: pid 0 is not real process, so keep things in kernel
	if next != 0 {
		if currentThread == ThreadKind.THREAD_GUI {
			// Save
			tmemcpy(guiThreadFrame as! ArrayPointer<UInt8>, frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
		} else if currentThread == ThreadKind.THREAD_USER {
			// Save
			var processOld TofitaProcess = processes[old]
			tmemcpy(processOld.frame as! ArrayPointer<UInt8>, frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
		} else if currentThread == ThreadKind.THREAD_KERNEL {
			// Save
			tmemcpy(kernelThreadFrame as! ArrayPointer<UInt8>, frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
		}

		// Restore
		currentThread = ThreadKind.THREAD_USER
		tmemcpy(frame as! ArrayPointer<UInt8>, process.frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
	} else {
		writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))
		switchToKernelThread(frame)
	}
}

var kernelThreadBusy = false
fun switchToGuiThread(@volatile frame: InterruptFrame) {
	if currentThread == ThreadKind.THREAD_GUI {
		return
	}

	if currentThread == ThreadKind.THREAD_USER {
		// Save
		let process TofitaProcess = processes[currentProcess]
		tmemcpy(process.frame as! ArrayPointer<UInt8>, frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
	} else if currentThread == ThreadKind.THREAD_KERNEL {
		if kernelThreadBusy {
			return // Wait to avoid race conditions
		}
		// Save
		// TODO instead of manual frame copy, .asm must take a pointer to the frame and write there directly
		tmemcpy(kernelThreadFrame as! ArrayPointer<UInt8>, frame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
	}

	// Restore
	currentThread = ThreadKind.THREAD_GUI
	tmemcpy(frame as! ArrayPointer<UInt8>, guiThreadFrame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
}

fun yieldInterruptHandler(@volatile frame: InterruptFrame) {
	disableAllInterrupts()
	switchToNextProcess(frame)
}

// TODO move to scheduler.hexa
fun timerInterruptHandler(@volatile frame: InterruptFrame) {
	disableAllInterrupts()

	// Happens once per second
	// TODO divider to constant
	if timerCalled % 121 == 0 {
		taskBarRedraw++
		// TODO change to `requestAnimationFrame`
		// Every N seconds
		if taskBarRedraw > 30 {
			haveToRender = true
			taskBarRedraw = 0
		}
	}

	// TODO ensure this value is in sync with PIT
	uptimeMilliseconds += 8
	if extraMillisecond % 4 == 0 {
		uptimeMilliseconds += 1 // PIT is somewhat imprecise
	}
	if extraMillisecond % 64 == 0 {
		uptimeMilliseconds += 1 // PIT is somewhat imprecise
	}
	extraMillisecond++
	timerCalled++

	// Schedule
	// TODO is `if true` `if false else` optimized to a block?
	if true {
		if currentThread == ThreadKind.THREAD_INIT {
			// TODO hexa error == statement: currentThread == THREAD_INIT
			guiThreadFrame.flags = frame.flags // TODO
			kernelThreadFrame.flags = frame.flags // TODO

			// Restore
			currentThread = ThreadKind.THREAD_GUI
			tmemcpy(frame as! ArrayPointer<UInt8>, guiThreadFrame as! ConstArrayPointer<UInt8>, sizeOf<InterruptFrame>())
		} else {
			if currentThread == ThreadKind.THREAD_GUI {
				// Just give it enough time to finish rendering
				// It will schedule to other process on finish
				nextIsGuiThread = false
			} else {
				if nextIsGuiThread == true {
					nextIsGuiThread = false
					switchToGuiThread(frame)
				} else {
					nextIsGuiThread = true
					if nextIsUserProcess == true {
						switchToKernelThread(frame)
					} else {
						switchToNextProcess(frame)
					}
					nextIsUserProcess = !nextIsUserProcess
				}
			}
		}
	}
	//		if currentThread == THREAD_INIT {
	//			// TODO hexa error == statement: currentThread == THREAD_INIT

	// Enable interrupts
	writePort(pic1_command_0x20, pic_eoi_0x20)
}
