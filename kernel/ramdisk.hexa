// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

@struct
class {
	UInt32 ramDiskChecksum
	UInt32 ramDiskSize
	UInt32 assetsCount
} RamDiskInfo

@struct
class {
	UInt16 path[128]
	UInt32 size
	UInt32 offsetFromRamDiskFirstByte
} RamDiskAssetInfo

static const RamDisk *_ramdisk
fun setRamDisk(const RamDisk *ramdisk) {
	_ramdisk = ramdisk
}

@struct
class {
	UInt32 size
	UInt8 *data
} RamDiskAsset

const RamDiskAsset getRamDiskAsset(const WideChar *pathToAsset) {
	RamDiskAsset asset
	asset.size = 0
	asset.data = 0
	const UInt16 *path = (const UInt16 *)pathToAsset

	const RamDiskInfo *ramDiskInfo = (const RamDiskInfo *)_ramdisk.base

	for (UInt32 id = 0; id < ramDiskInfo.assetsCount; id++) {
		// Pointer arithmetic like a boss
		const UInt64 ramDiskAssetInfoPtr =
			(uint64_t)_ramdisk.base + sizeof(RamDiskInfo) + sizeof(RamDiskAssetInfo) * id
		const RamDiskAssetInfo *ramDiskAssetInfo = (const RamDiskAssetInfo *)ramDiskAssetInfoPtr
		var found: UInt8 = 1

		for (UInt8 at = 0; at < 127; at++) {
			if (ramDiskAssetInfo.path[at] != path[at]) {
				found = 0
				break
			}
			if (ramDiskAssetInfo.path[at] == 0)
				break
		}

		if (found) {
			asset.size = ramDiskAssetInfo.size
			asset.data = (UInt8 *)((uint64_t)_ramdisk.base + ramDiskAssetInfo.offsetFromRamDiskFirstByte)
			return asset
		}
	}

	serialPrintf("[ramdisk.getRamDiskAsset] asset '%S' not found in %d assets\n", path,
				 ramDiskInfo.assetsCount)
	return asset
}
