// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on the http://blog.ivank.net/fastest-gaussian-blur.html
module

function boxBlurT(source, target, width: Int, height: Int, radius: Int) {
	let iarr = 1.0 / (radius + radius + 1)
	for (i in width) {
		var ti = i
		var li = ti
		var ri = ti + radius * width

		let fv = source.pixels[ti].rgba
		let lv = source.pixels[ti + width * (height - 1)].rgba

		var valR = fv.r * (radius + 1)
		var valG = fv.g * (radius + 1)
		var valB = fv.b * (radius + 1)

		for (j in radius) {
			let pixel = source.pixels[ti + j * width].rgba
			valR += pixel.r
			valG += pixel.g
			valB += pixel.b
		}

		for (j in radius + 1) {
			let pixel = source.pixels[ri].rgba
			valR += (pixel.r - fv.r)
			valG += (pixel.g - fv.g)
			valB += (pixel.b - fv.b)

			target.pixels[ti].rgba.r = valR * iarr
			target.pixels[ti].rgba.g = valG * iarr
			target.pixels[ti].rgba.b = valB * iarr

			ri += width
			ti += width
		}

		for (j in radius + 1 ... height - radius) {
			let pixelRi = source.pixels[ri].rgba
			let pixelLi = source.pixels[li].rgba

			valR += (pixelRi.r - pixelLi.r)
			valG += (pixelRi.g - pixelLi.g)
			valB += (pixelRi.b - pixelLi.b)

			target.pixels[ti].rgba.r = valR * iarr
			target.pixels[ti].rgba.g = valG * iarr
			target.pixels[ti].rgba.b = valB * iarr

			li += width
			ri += width
			ti += width
		}

		for (j in height - radius ... height) {
			let pixel = source.pixels[li].rgba

			valR += (lv.r + pixel.r)
			valG += (lv.g + pixel.g)
			valB += (lv.b + pixel.b)

			target.pixels[ti].rgba.r = valR * iarr
			target.pixels[ti].rgba.g = valG * iarr
			target.pixels[ti].rgba.b = valB * iarr

			li += width
			ti += width
		}
	}
}

function boxBlurH(source, target, width: Int, height: Int, radius: Int) {
	let iarr = 1.0 / (radius + radius + 1)
	for (i in height) {
		var ti = i * width
		var li = ti
		var ri = ti + radius
		let fv = source.pixels[ti].rgba
		let lv = source.pixels[ti + width - 1].rgba

		var valR = fv.r * (radius + 1)
		var valG = fv.g * (radius + 1)
		var valB = fv.b * (radius + 1)

		for (j in radius) {
			let pixel = source.pixels[ti + j].rgba
			valR += pixel.r
			valG += pixel.g
			valB += pixel.b
		}

		for (j in radius + 1) {
			let pixel = source.pixels[ri++].rgba
			valR += (pixel.r - fv.r)
			valG += (pixel.g - fv.g)
			valB += (pixel.b - fv.b)

			target.pixels[ti].rgba.r = valR * iarr
			target.pixels[ti].rgba.g = valG * iarr
			target.pixels[ti].rgba.b = valB * iarr
			ti++
		}

		for (j in radius + 1 ... width - radius) {
			let pixelRi = source.pixels[ri++].rgba
			let pixelLi = source.pixels[li++].rgba

			valR += (pixelRi.r - pixelLi.r)
			valG += (pixelRi.g - pixelLi.g)
			valB += (pixelRi.b - pixelLi.b)

			target.pixels[ti].rgba.r = valR * iarr
			target.pixels[ti].rgba.g = valG * iarr
			target.pixels[ti].rgba.b = valB * iarr
			ti++
		}

		for (j in width - radius ... width) {
			let pixel = source.pixels[li++].rgba

			valR += (lv.r - pixel.r)
			valG += (lv.g - pixel.g)
			valB += (lv.b - pixel.b)

			target.pixels[ti].rgba.r = valR * iarr
			target.pixels[ti].rgba.g = valG * iarr
			target.pixels[ti].rgba.b = valB * iarr
			ti++
		}
	}
}

function boxBlur(source: {width: Int, height: Int, pixels: [Pixel]}, target, width, height, radius) {
	for (i in source.width*source.height)
		target.pixels[i].color = source.pixels[i].color
	boxBlurH(target, source, width, height, radius)
	boxBlurT(source, target, width, height, radius)
}

function boxesForGauss(sigma, n: Int) {
	let wIdeal = Math.sqrt((12 * sigma * sigma / n) + 1) // Ideal averaging filter width
	var wl = Math.floor(wIdeal)
	if (wl % 2 == 0) wl--
	let wu = wl + 2

	let mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4)
	let m = Math.round(mIdeal)

	let sizes = []
	for (i in n) {
		sizes[i] = i < m ? wl : wu
	}
	return sizes
}

class Pixel {
	var r = 0
	var g = 0
	var b = 0
	var a = 0

	new (r, g, b, a) {
		this.r = r
		this.g = g
		this.b = b
		this.a = a
	}

	var color: Pixel {
		get {
			return this
		}

		set (value) {
			this.r = value.r
			this.g = value.g
			this.b = value.b
			this.a = value.a
		}
	}

	let rgba: Pixel {
		get {
			return this
		}
	}
}

function gaussBlur(bitmapSource, radius) {
	let width: Int = bitmapSource.width
	let height: Int = bitmapSource.height

	let target = {
		width: width,
		height: height,
		pixels: new Array<Pixel>(width * height + width * 8)
	}

	let bitmap = {
		width: width,
		height: height,
		pixels: new Array<Pixel>(width * height + width * 8)
	}

	for (y in height) {
		for (x in width) {
			let off = (y * width + x)
			let r = bitmapSource.pixels[off * 4 + 0]
			let g = bitmapSource.pixels[off * 4 + 1]
			let b = bitmapSource.pixels[off * 4 + 2]
			let a = bitmapSource.pixels[off * 4 + 3]
			target.pixels[off] = new Pixel(r, g, b, a)
			bitmap.pixels[off] = new Pixel(r, g, b, a)

			target.pixels[off + width * 8] = new Pixel(r, g, b, a)
			bitmap.pixels[off + width * 8] = new Pixel(r, g, b, a)
		}
	}

	let boxes = boxesForGauss(radius, 3)
	console.log("boxes %d %d %d", boxes[0], boxes[1], boxes[2])
	boxBlur(bitmap, target, width, height + 8, (boxes[0] - 1) / 2)
	boxBlur(target, bitmap, width, height + 8, (boxes[1] - 1) / 2)
	boxBlur(bitmap, target, width, height + 8, (boxes[2] - 1) / 2)

	let pixels = Buffer.alloc(width * height * 4)

	for (y in height) {
		for (x in width) {
			let off = (y * width + x)
			pixels[off * 4 + 0] = target.pixels[off].r
			pixels[off * 4 + 1] = target.pixels[off].g
			pixels[off * 4 + 2] = target.pixels[off].b
			pixels[off * 4 + 3] = target.pixels[off].a
		}
	}

	return {
		width: width,
		height: height,
		pixels: pixels
	}
	return target
}
