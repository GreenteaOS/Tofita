// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun kiFastSystemCall(rcx: UInt64, rdx: Payload): UInt64 {
	return tofitaFastSystemCall(rcx as! TofitaSyscalls, rdx)
}

// TODO calling convention
// TODO no capture `@closure(false)`
declare Entry = (hInstance: ConstArrayPointer<Void>, hPrev: ConstArrayPointer<Void>, pCmdLine: ConstArrayPointer<Void>, nCmdShow: Int) => UInt32
declare DllEntry = (hinstDLL: ConstArrayPointer<Void>, fdwReason: DllEntryReason, lpvReserved: ConstArrayPointer<Void>) => Bool32
// TODO must error `hinstDLL` twice `declare DllEntry = (hinstDLL: ConstArrayPointer<Void>, fdwReason: DllEntryReason, hinstDLL: ConstArrayPointer<Void>) => Bool32`

@rename('hexa_startup') declare let hexa_startup: UInt64 // TODO size_t aka PointerSizedUInt (size_t is guaranteed to be an unsigned type)

@dllExport('memset')
fun memset(value: UInt32) {
	// TODO !!
}

enum DllEntryReason : UInt32 {
	DLL_PROCESS_ATTACH = 1
}

//TODO set as entry @linkName('greenteaosIsTheBest')
fun greenteaosIsTheBest(startup: ProcessStartupInformation) {
	let entry: Entry = startup.entry
	let pid: UInt64 = startup.pid
	let dllEntries: UInt64 = startup.dllEntries
	// TODO entry arguments (argv, argc)
	// TODO init DLLs
	// TODO PEB/TEB
	// TODO TLS callbacks
	// TODO load DLLs in usermode
	tofitaDebugLog("CRT ready for PID %u".utf16(), pid)
	// TODO as stricture `{ count UInt32, dllEntries ArrayByValue<...> }`
	let count = startup.dllCount
	let dllMains = dllEntries as! ConstArrayPointer<DllEntry>

	if dllEntries == 0 {
		tofitaDebugLog("dllEntries == 0 for PID %u".utf16(), pid)
	}

	for i in count {
		dllMains[i](null, DllEntryReason.DLL_PROCESS_ATTACH, null)
	}

	// TODO unmap entries/ProcessStartupInformation if required
	tofitaDebugLog("Done %u DLLs".utf16(), count)

	if entry != null {
		tofitaDebugLog("entry != null OK for PID %u".utf16(), pid)
	}

	if entry == null {
		tofitaDebugLog("entry == null ERROR for PID %u".utf16(), pid)
	}

	// TODO non-null stubs here, like HInstance etc
	tofitaExitProcess(entry(null, null, null, 0))
	while (true) {}
}

// TODO get this structure from FS/GS
greenteaosIsTheBest(hexa_startup as! ProcessStartupInformation)
