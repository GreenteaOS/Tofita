// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// TODO `let`
@struct
class RamDiskInfo {
	var ramDiskChecksum UInt32
	var ramDiskSize UInt32
	var assetsCount UInt32
}

@struct
class RamDiskAssetInfo {
	var path ArrayByValue<UInt16, 128>
	var size UInt32
	var offsetFromRamDiskFirstByte UInt32
}

@readonly var _ramdisk RamDisk = null as! RamDisk
fun setRamDisk(@readonly ramdisk RamDisk) {
	_ramdisk = ramdisk
}

@struct
class RamDiskAsset {
	var size UInt32
	var data ArrayPointer<UInt8>
	new () {}
}

fun getRamDiskAsset(asset RamDiskAsset, pathToAsset String) {
	asset.size = 0u32
	asset.data = null // TODO should error cause non-nullable
	let path = pathToAsset.utf16() as! ConstArrayPointer<UInt16>

	let ramDiskInfo = _ramdisk.base as! @readonly RamDiskInfo

	var id UInt32 = 0u32
	while id < ramDiskInfo.assetsCount { // TODO use iterators
		// Pointer arithmetic like a boss
		let ramDiskAssetInfoPtr UInt64 =
			(_ramdisk.base as! UInt64) + sizeOf<RamDiskInfo>() + sizeOf<RamDiskAssetInfo>() * id
		let ramDiskAssetInfo = ramDiskAssetInfoPtr as! @readonly RamDiskAssetInfo
		var found = true

		var at UInt8 = 0
		while at < 127 {
			if ramDiskAssetInfo.path[at] != path[at] {
				found = false
				break
			}

			if ramDiskAssetInfo.path[at] == 0 {
				break
			}

			at++
		}

		if found {
			asset.size = ramDiskAssetInfo.size
			asset.data = ((_ramdisk.base as! UInt64) + ramDiskAssetInfo.offsetFromRamDiskFirstByte) as! ArrayPointer<UInt8>
			// TODO `as! _` short syntax
			return
		}

		id++
	}

	serialPrintf("[ramdisk.getRamDiskAsset] asset '%S' not found in %d assets\n", path,
				 ramDiskInfo.assetsCount)
	return
}

fun getRamDiskFolder(asset RamDiskAsset) [String] {
	var filesList [String] = []
	var length = 0
	var at = 0u64 // TODO should work with 0u32 too
	for i in asset.size {
		// TODO `'\n'.charCodeAt(0)`
		// if i % 2 == 1 and asset.data[i] == 10 {
		if (i % 2 == 0) and (asset.data[i] == 10) {
			let offset = (asset.data as! UInt64) + at + 0u64
			let file = String.fromUTF16zUpTo(offset as! ConstArrayPointer<UInt16>, length / 2)
			at = i + 2u64
			length = 0
			filesList.push(file)
		} else {
			// UTF 16
			length++
		}
	}

	return filesList
}
