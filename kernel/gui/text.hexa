// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Simple bitmap font drawing
// Non-monospace

Bitmap32 *textFontBitmap
@extern Pixel32 *_pixels

@struct
class {
	UInt16 x
	UInt16 y
	Float width
} @packed TextFontList

TextFontList *textFontList = null

fun initText() {
	RamDiskAsset textFont = getRamDiskAsset("ascii.tofita")
	textFontList = (TextFontList *)textFont.data

	Bitmap32 *loadPng32(const RamDiskAsset *asset)
	RamDiskAsset a = getRamDiskAsset("root/Windows/Fonts/default.png")
	textFontBitmap = loadPng32(&a)
}

Int8 getLigatureAdvance(const Char8 left, const Char8 right) {
	if (left == 0)
		return 0
	if (right == 0)
		return 0
	return 8
}

Float getCharAdvance(const Char8 c) {
	if (textFontList == null)
		return 8
	TextFontList textChar = textFontList[(uint64_t)c]
	return textChar.width
}

UInt16 getTextAdvance(const Char8 *text) {
	UInt16 i = 0
	Float xx = 0
	while (text[i] != 0 && i < 255 * 255) {
		xx += textFontList[text[i]].width
		i++
	}
	return xx
}

Float drawChar(const Char8 c, Float x, Int16 y, Pixel32 color) {
	TextFontList textChar = textFontList[(uint64_t)c]

	Int16 xx = (int32_t)(x + 0.5)
	UInt8 w = (int32_t)(textChar.width + 0.5)

	for (UInt8 yi = 0; yi < 12; yi++)
		for (UInt8 xi = 0; xi < w; xi++) {
			const Int32 atx = xx + xi
			const Int32 aty = y + yi

			if (atx >= _framebuffer.width)
				continue
			if (atx < 0)
				continue

			if (aty >= _framebuffer.height)
				continue
			if (aty < 0)
				continue

			Pixel32 font =
				textFontBitmap.pixels[(textChar.y + yi) * textFontBitmap.width + (textChar.x + xi)]

			Pixel32 p = _pixels[aty * _framebuffer.width + atx]
			p.rgba.r = Blend255(p.rgba.r, color.rgba.r, font.rgba.r)
			p.rgba.g = Blend255(p.rgba.g, color.rgba.g, font.rgba.g)
			p.rgba.b = Blend255(p.rgba.b, color.rgba.b, font.rgba.b)
			_pixels[aty * _framebuffer.width + atx] = p
		}

	return textChar.width
}

Float drawAlphaChar(const Char8 c, Float x, Int16 y, Pixel32 color) {
	TextFontList textChar = textFontList[(uint64_t)c]

	Int16 xx = (int16_t)(x + 0.5)
	UInt8 w = (uint8_t)(textChar.width + 0.5)

	for (UInt8 yi = 0; yi < 12; yi++)
		for (UInt8 xi = 0; xi < w; xi++) {
			const Int16 atx = (int16_t)xx + (int16_t)xi
			const Int16 aty = (int16_t)y + (int16_t)yi

			if (atx >= _framebuffer.width)
				continue
			if (atx < 0)
				continue

			if (aty >= _framebuffer.height)
				continue
			if (aty < 0)
				continue

			Pixel32 font =
				textFontBitmap.pixels[(textChar.y + yi) * textFontBitmap.width + (textChar.x + xi)]

			Pixel32 p = _pixels[aty * _framebuffer.width + atx]
			p.rgba.r = Blend255(p.rgba.r, color.rgba.r, font.rgba.r)
			p.rgba.g = Blend255(p.rgba.g, color.rgba.g, font.rgba.g)
			p.rgba.b = Blend255(p.rgba.b, color.rgba.b, font.rgba.b)

			// Grayscale
			// TODO probably just blend color.rgb all with p.g?
			UInt16 sum = (uint16_t)p.rgba.r + (uint16_t)p.rgba.g + (uint16_t)p.rgba.b
			sum = sum * 0.33

			p.rgba.r = sum
			p.rgba.g = sum
			p.rgba.b = sum

			p.rgba.a = color.rgba.a
			blendPixel(atx, aty, p)
		}

	return textChar.width
}

/// Returns advance after last character
UInt16 drawAsciiText(const Char8 *text, Float x, Int16 y, Pixel32 color) {
	UInt16 i = 0
	Float xx = x
	while (text[i] != 0 && i < 255 * 255) {
		xx += drawChar(text[i], xx, y, color)
		i++
	}
	return xx - x
}

/// Returns advance after last character
UInt16 drawText(const wchar_t *text, Float x, Int16 y, Pixel32 color) {
	UInt16 i = 0
	Float xx = x
	while ((uint16_t)text[i] != 0 && i < 255 * 255) {
		xx += drawChar((uint16_t)text[i] & 0xFF, xx, y, color)
		i++
	}
	return xx - x
}

UInt16 drawIntegerText(Int64 value, Float x, Int16 y, Pixel32 color) {
	Float xx = x
	if (value < 0) {
		xx += drawAsciiText(u8"-", xx, y, color)
		value = -value
	}
	const Char8 *digits[] = {u8"0", u8"1", u8"2", u8"3", u8"4", u8"5", u8"6", u8"7", u8"8", u8"9"}
	const Char8 *chars[24] = {0}
	UInt8 count = 0
	do {
		chars[23 - count] = digits[value % 10]
		value = (int64_t)(value / 10)
		count++
	} while (value > 0)
	for (UInt8 i = 0; i < 24; ++i) {
		if (chars[i] != 0)
			xx += drawAsciiText(chars[i], xx, y, color)
	}
	return xx - x
}

fun drawShadowText(const Char8 *text, Float x, Int16 y) {
	UInt16 i = 0
	Float xx = x
	Pixel32 color
	color.color = 0x00000000
	color.rgba.a = 70
	while (text[i] != 0 && i < 255 * 255) {
		Char8 ch = text[i]

		drawAlphaChar(ch, xx + 1, y + 1, color)
		drawAlphaChar(ch, xx + 1, y + 2, color)

		drawAlphaChar(ch, xx - 1, y + 1, color)
		xx += drawAlphaChar(ch, xx - 1, y + 2, color)

		i++
	}
}
