// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on http://www.osdever.net/bkerndev/Docs/keyboard.htm

@rename('keyboardHandler')
@extern declare fun keyboardHandler() Void

// TODO this is just array of booleans
var keyboardPressedState ArrayByValue<UInt8, 128> = [0]
var keyboardEvents ArrayByValue<UInt8, 256> = [0]
var keyboardEventsLength UInt8 = 0
let keyboardMap [String] = [
	'', ''/*ESC*/, '1', '2', '3', '4', '5', '6', '7',
	'8', // 9
	'9',  '0', '-', '=',
	'\b', // Backspace
	'\t', // Tab
	'q',  'w', 'e',
	'r', // 19
	't',  'y', 'u', 'i', 'o', 'p', '[', ']',
	'\n', // Enter key
	'',	  // 29 - Control
	'a',  's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',
	';', // 39
	'\'', '`',
	'', // Left shift
	'\\', 'z', 'x', 'c', 'v', 'b',
	'n', // 49
	'm',  ',', '.', '/',
	'', // Right shift
	'*',
	'',	 // Alt
	' ', // Space bar
	'',	 // Caps lock
	'',	 // 59 - F1 key ... >
	'',	  '',   '',	'',	 '',	  '',   '',	'',
	'', // < ... F10
	'', // 69 - Num lock
	'', // Scroll Lock
	'', // Home key
	'', // Up Arrow
	'', // Page Up
	'-',
	'', // Left Arrow
	'',
	'', // Right Arrow
	'+',
	'', // 79 - End key
	'', // Down Arrow
	'', // Page Down
	'', // Insert Key
	'', // Delete Key
	'',	  '',   '',
	'', // F11 Key
	'', // F12 Key
	'' // All other keys are undefined
]

let dataPort = 0x60u8

fun handleKeyboardPacket() {
	// if (polls)
	//	return

	// if (lockMouse)
	//	return
	// while lockMouse {}
	// lockMouse = true

	// UInt8 status = readPort(STATUS_REGISTER)

	/// PS2 Mouse
	// if (status & 0x20) {
	//	//    UInt8 keycode = readPort(DATA_PORT)
	//	//    //if keycode < 0 {
	//	lockMouse = false
	//	handleMousePacket()
	//	return
	//	//    //}
	//	//    //UInt8 buffer[] = {keyboardMap[keycode], 0}
	//	//    UInt8 buffer[] = {'M','o','u','s','e',':', 0}
	//	//    serialPrint(buffer)
	//	//    serialPrint(buffer)
	//}

	// TODO if status & 0x1 != 0
	{
		let keycode UInt8 = readPort(dataPort)

		// TODO should hint that `<` useless here for `uint8`
		//if keycode < 0 {
		//	// lockMouse = false
		//	// TODO this is why `@defer` is required, had a bug here
		//	writePort(pic1_command, pic_eoi)
		//	return
		//}

		// Last one will always be overwritten, makes sense, but any better ideas?
		keyboardEvents[keyboardEventsLength] = keycode
		if keyboardEventsLength < 255 {
			keyboardEventsLength++
		}

		if keycode < 128 {
			// serialPrint("[")
			// serialPrint(buffer)
			keyboardPressedState[keycode] = 1

			if 41 == keycode {
				haveToQuake = !haveToQuake
				requestAnimationFrame()
			}

			if haveToQuake {
				quakeHandleButtonDown(keycode)
			} else {
				// TODO quake should block keyboard input
			}
		} else {
			let keycode = keycode - 128u8
			// serialPrint("[")
			// serialPrint(buffer)
			// serialPrintf(" up] %d\n", keycode + 128)
			keyboardPressedState[keycode] = 0
		}
		// if (status & 0x20) {
		//    UInt8 buffer[] = {'M', 0}
		//    serialPrint(buffer)
		//}
	}

	// Note: Quake terminal has higher priority than kernel itself
	keyboardActivity = true

	// keyDownHandler = null
	// if (haveToQuake)
	//	keyDownHandler = quakeHandleButtonDown

	// EOI
	// Disable this line if polling is used
	// TODO @defer
	writePort(pic1_command, pic_eoi)
	// lockMouse = false
}

// TODO interrupt
fun handleKeyboard() {
	handleKeyboardPacket()
	// pollForce = status
}
