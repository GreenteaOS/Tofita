// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

@emitHeader @linkAsIs
declare fun kernelThreadStart() Void

let stackSizeForKernelThread UInt64 = 1024 * 1024u64

@aligned(64)
// TODO let
// TODO ArrayByValue cannot be `var`
// TODO use `stackSizeForKernelThread` in <>
var kernelStack ArrayByValue<UInt8, 1048576> = [0]

fun kernelThread() {
	serialPrintln("<Tofita> [kernelThread] thread started")

	// TODO move to preTest with infinite loop on fail
	//serialPrintf("<seh> before\n")
	//serialPrintf("<seh> 0 == %u\n", probeForReadOkay(321, 1))
	//serialPrintf("<seh> 1 == %u\n", probeForReadOkay(currentThread as! UInt64, 1))
	//serialPrintf("<seh> 0 == %u\n", probeForReadOkay(999999999, 1))
	//serialPrintf("<seh> 1 == %u\n", probeForReadOkay(guiStack as! UInt64, 1))
	//serialPrintf("<seh> 0 == %u\n", probeForReadOkay(-1u64, 1)) // TODO `-1u64` is invalid, also fix `~1`
	//serialPrintf("<seh> 1 == %u\n", probeForReadOkay(switchToNextProcess as! UInt64, 1))
	//serialPrintf("<seh> done\n")

	while true {
		// TODO optimize cast to 1u64
		// TODO no need for `@volatile` here and there
		@volatile var index UInt64 = 1 // Idle process ignored
		while index < processes.length {
			let process = processes[index]
			// TODO `for process in processes { if process.pid == 0 { continue } }`
			// TODO ^ interlocked iteration? interlocked processes?
			if process != null, process.present == true {
				// TODO `present` is useless when we have nullability?
				// TODO global isAnythingHappened to avoid Noop check for every process. It also must me TLS?
				if process.syscallToHandle != TofitaSyscalls.Noop {
					kernelThreadBusy = true
					@volatile let syscall = process.syscallToHandle
					process.syscallToHandle = TofitaSyscalls.Noop
					@volatile var frame = process.frame

					// Remember pml4 for proper restore from scheduling
					pml4kernelThread = process.pml4
					// Select pml4 to work within current process memory
					writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))

					// TODO refactor to separate syscall handler per-DLL and handlers table by syscall id

					if syscall == TofitaSyscalls.DebugLog {
						if process.is64bit {
							serialPrintf("[[DebugLog:PID %d]] ", index)
						} else {
							serialPrintf("[[DebugLog:PID %d (32-bit)]] ", index)
						}
						serialPrintf("[[rcx=%u rdx=%8 r8=%8]] ", frame.rcxArg0, frame.rdxArg1, frame.r8)

						if probeForReadOkay(frame.rdxArg1, sizeOf<DebugLogPayload>()) {
							var payload = frame.rdxArg1 as! DebugLogPayload
							// Note this is still very unsafe
							// TODO safer one, with SEH + check to addresses be at user space
							if probeForReadOkay(payload.message, 1) {
								// TODO Probably SEH in %s of serialPrintf itself
								// (at page boundary)
								serialPrintf(
									// TODO just %S utf16 instead of allocation
									String.fromUTF16z(payload.message as! ConstArrayPointer<UInt16>),
									payload.extra,
									payload.more
								)
							} else {
								serialPrintf("{payload.message read probe failed}")
							}
						} else {
							serialPrintf("{rdx read probe failed}")
						}

						serialPrintf("\n")
						process.schedulable = true
					} else if syscall == TofitaSyscalls.ExitProcess {
						serialPrintf("[[ExitProcess:PID %d]] %d\n", index, frame.rdxArg1)
						process.present = false

						// Select pml4 of idle process for safety
						// TODO idle as `idle TofitaProcess` var, not `[0]`
						pml4kernelThread = processes[0].pml4
						writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))

						// De-allocate process
						// TODO as TofitaProcess class method
						processDestroy(process)
					} else if syscall == TofitaSyscalls.Cpu {
						// TODO ^ rename to CpuException or something
						process.present = false
						serialPrintf("[[Cpu:PID %d]] rdx=%d\n", index, frame.rdxArg1)
						quakePrintf("Process '%S' #%d force quit due to a CPU exception #%u\n".utf16(), process.name.utf16(), index, frame.index)

						// Page fault
						// TODO `switch`
						if frame.index == 0x0E {
							quakePrintf("#PF with CR2 at %8 and IP at %8\n".utf16(), process.cr2PageFaultAddress, frame.ip)
						} else
						if frame.index == 0x0D {
							quakePrintf("#GPF with IP at %8\n".utf16(), frame.ip)
						} else
						if frame.index == 0x03 {
							quakePrintf("#BP with IP at %8\n".utf16(), frame.ip)
						}

						// Select pml4 of idle process for safety
						pml4kernelThread = processes[0].pml4
						// TODO `TofitaProcess.this.writeOwnCr3`
						writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))

						// De-allocate process
						processDestroy(process)
					} else {
						// TODO TofitaSyscalls.type.tagNameFromValue(syscall)
						frame.raxReturn = 0 // Must return at least something
						// Note ^ some code in syscall handlers may *read* this value
						// So set it to zero just in case

						if
							not userCallHandled(process, syscall),
							not njraaCallHandled(process, syscall)
						{
							// Unknown syscall is no-op
							serialPrintf("[[PID %d]] Unknown or unhandled syscall %d\n", index,
										 frame.rcxArg0)
							frame.raxReturn = 0
							process.schedulable = true
						}
					}

					// TODO `@defer` this
					kernelThreadBusy = false
				}
			}
			index++
		}

		switchToUserProcess()
	}
}
