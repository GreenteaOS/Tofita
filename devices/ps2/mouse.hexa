// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// PS/2 Mouse

@rename('mouseHandler')
@linkName('mouseHandler')
declare fun mouseHandler() Void

enum MouseActionType : UInt8 {
	Noop = 0
	LeftDown
	LeftUp
	RightDown
	RightUp
	MiddleDown
	MiddleUp
	// TODO ScrollFromUser
	// TODO ScrollToUser
	Moved
}

@volatile var lockMouse = false
@volatile var mouseCycle UInt8 = 0
@volatile var mouseByte ArrayByValue<UInt8, 3> = [0]

// Note: those are controlled by driver
@volatile var leftDown = false
@volatile var rightDown = false
@volatile var middleDown = false

@struct
class MouseAction {
	var mouseXdiff Int16
	var mouseYdiff Int16
	var type MouseActionType
	// TODO time stamp
	new () {}
}

let mouseActionsLimit UInt8 = 255
@volatile let mouseActionsZeta [MouseAction] = []
@volatile let mouseActionsGama [MouseAction] = []
@volatile var mouseActionsUseZeta Bool = false
@volatile var mouseActionsZetaAmount UInt8 = 0
@volatile var mouseActionsGamaAmount UInt8 = 0

fun pushMouseAction(type MouseActionType, mouseXdiff Int16 = 0, mouseYdiff Int16 = 0) {
	if mouseActionsUseZeta {
		if mouseActionsZetaAmount == mouseActionsLimit {
			// TODO compact mouse events on overflow like that:
			// down->move->move->move->up
			// becomes
			// down->move->up or just filter-out all moves
			return
		}

		// TODO refactor
		if mouseActionsZeta[mouseActionsZetaAmount] == null {
			mouseActionsZeta[mouseActionsZetaAmount] = new MouseAction()
		}

		mouseActionsZeta[mouseActionsZetaAmount].mouseXdiff = mouseXdiff
		mouseActionsZeta[mouseActionsZetaAmount].mouseYdiff = mouseYdiff
		mouseActionsZeta[mouseActionsZetaAmount].type = type

		mouseActionsZetaAmount++
	} else {
		if mouseActionsGamaAmount == mouseActionsLimit {
			return
		}

		if mouseActionsGama[mouseActionsGamaAmount] == null {
			mouseActionsGama[mouseActionsGamaAmount] = new MouseAction()
		}

		mouseActionsGama[mouseActionsGamaAmount].mouseXdiff = mouseXdiff
		mouseActionsGama[mouseActionsGamaAmount].mouseYdiff = mouseYdiff
		mouseActionsGama[mouseActionsGamaAmount].type = type

		mouseActionsGamaAmount++
	}
}

fun getBit(byte UInt8, bit UInt8) UInt8 {
	return (byte & (1 << bit)) >> bit
}

fun handleMousePacket() {
	while lockMouse {}
	lockMouse = true

	switch mouseCycle {
	case 0: {
		mouseByte[0] = mouseRead()
		if (mouseByte[0] & 0x08) != 0 {
			mouseCycle++ // Only accept this as the first byte if the "must be 1" bit is set
		}
		// mouseCycle++
	}
	case 1: {
		mouseByte[1] = mouseRead()
		mouseCycle++
	}
	case 2: {
		mouseByte[2] = mouseRead()

		var mouseXd Int16 = mouseByte[1]
		var mouseYd Int16 = mouseByte[2]
		mouseYd = -mouseYd

		// Overflow
		if getBit(mouseByte[0], 6) != 0 {
			mouseXd = 0
		} else if getBit(mouseByte[0], 4) != 0 {
			mouseXd -= 0x100i16
		}

		if getBit(mouseByte[0], 7) != 0 {
			mouseYd = 0
		} else if getBit(mouseByte[0], 5) != 0 {
			mouseYd += 0x100i16
		}

		mouseCycle = 0

		// Ignore all state changes until message pool is ready
		// Otherwise we will have situaion like DOWN-UP-UP instead of D-U-D-U
		if mouseActionsUseZeta && mouseActionsZetaAmount == mouseActionsLimit {
			// TODO break
		}
		if !mouseActionsUseZeta && mouseActionsGamaAmount == mouseActionsLimit {
			// TODO break
		}

		if mouseXd != 0 || mouseYd != 0 {
			pushMouseAction(MouseActionType.Moved, mouseXd, mouseYd)
		}

		let left Bool = getBit(mouseByte[0], 0) != 0
		let right Bool = getBit(mouseByte[0], 1) != 0
		let middle Bool = getBit(mouseByte[0], 2) != 0

		if left == false && leftDown == true {
			pushMouseAction(MouseActionType.LeftUp)
		}
		if left == true && leftDown == false {
			pushMouseAction(MouseActionType.LeftDown)
		}

		if right == false && rightDown == true {
			pushMouseAction(MouseActionType.RightUp)
		}
		if right == true && rightDown == false {
			pushMouseAction(MouseActionType.RightDown)
		}

		if middle == false && middleDown == true {
			pushMouseAction(MouseActionType.MiddleUp)
		}
		if middle == true && middleDown == false {
			pushMouseAction(MouseActionType.MiddleDown)
		}

		leftDown = left
		rightDown = right
		middleDown = middle
	}
	}

	// Trigger DWM to handle mouse packets
	mouseActivity = true

	// EOI
	// Disable those lines if polling is used
	writePort(0xA0, 0x20)
	writePort(0x20, 0x20)
	lockMouse = false
}

// TODO interrupt
fun handleMouse() {
	handleMousePacket()

	// This is hack to avoid race condition in poller
	// this way we handle mouse *only* in poller
	// if true {
	//	pollForce = true
	//	writePort(0xA0, 0x20)
	//	writePort(0x20, 0x20)
	//	return
	//}

	// Avoid race condition
	// polls = true
	// handleMousePacket()
	// UInt8 poll = readPort(0x64)
	// while getBit(poll, 0) == 1 && getBit(poll, 5) == 1 {
	//	// if (getBit(poll, 0) == 1 && getBit(poll, 5) == 1) {
	//	// handleMousePacket()
	//	poll = readPort(0x64)
	//}
	// writePort(0xA0, 0x20)
	// writePort(0x20, 0x20)
	// haveToRender = 1
	// polls = false
}

fun enablePS2Mouse() {
	serialPrintln("[mouse] begin: setting PS/2 mouse")
	// Auxiliary
	mouseWait(1)
	writePort(ps2_control_port, 0xA8)
	// Interrupts
	mouseWait(1)
	writePort(ps2_control_port, 0x20)
	mouseWait(0)
	// IRQ12
	var status UInt8 = (readPort(ps2_data_port) | 2u8)
	// status &= ~0x20 // TODO Clock
	mouseWait(1)
	writePort(ps2_control_port, 0x60)
	mouseWait(1)
	writePort(ps2_data_port, status)
	// Defaults
	mouseWrite(0xF6)
	// Ack
	mouseRead()
	// Enable
	mouseWrite(0xF4)
	// Ack
	mouseRead()
	serialPrintln("[mouse] done: setting PS/2 mouse")
}

fun mouseWait(@volatile aType UInt8) {
	@volatile var timeOut UInt32 = 1000000
	if aType == 0 {
		while timeOut-- { // TODO Should error (not Bool)
			// Data
			if (readPort(ps2_control_port) & 1) == 1 {
				return
			}
		}
	} else {
		while timeOut-- {
			// Signal TODO `> 0`
			if (readPort(ps2_control_port) & 2) == 0 {
				return
			}
		}
	}
}

fun mouseWrite(@volatile aWrite UInt8) {
	mouseWait(1)
	writePort(ps2_control_port, 0xD4)
	mouseWait(1)
	writePort(ps2_data_port, aWrite)
}

fun mouseRead() UInt8 {
	mouseWait(0)
	return readPort(ps2_data_port)
}
