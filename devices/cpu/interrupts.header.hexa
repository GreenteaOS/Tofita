// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

@struct
class InterruptFrame {
	// SSE
	@volatile xmm[8: UInt64 * 2]

	@volatile r15: UInt64
	@volatile r14: UInt64
	@volatile r13: UInt64
	@volatile r12: UInt64
	@volatile r11: UInt64
	@volatile r10: UInt64
	@volatile r9: UInt64
	@volatile r8: UInt64

	// Note: ECX is RCX, EAX is RAX, etc in 32-bit mode
	@volatile rdi: UInt64
	@volatile rsi: UInt64
	@volatile rbp: UInt64
	@volatile rbx: UInt64
	@volatile rdxArg1: UInt64
	@volatile rcxArg0: UInt64
	@volatile raxReturn: UInt64

	// IRQ index
	@volatile index: UInt64

	// IRQ error code
	@volatile code: UInt64

	@volatile ip: UInt64 // Instruction pointer
	@volatile cs: UInt64 // Code segment
	@volatile flags: UInt64 // RFLAGS\EFLAGS (same on AMD64 and x86)
	@volatile sp: UInt64 // Stack pointer
	@volatile ss: UInt64 // Stack segment
}

_Static_assert(sizeof(InterruptFrame) == 0xb0 + 128, "sizeof is incorrect")

// Scheduling
const UInt8 THREAD_INIT = 0 // kernelMain, it will be destroyed
const UInt8 THREAD_GUI = 1
const UInt8 THREAD_KERNEL = 2
const UInt8 THREAD_USER = 3

@volatile UInt8 currentThread = THREAD_INIT

InterruptFrame kernelThreadFrame

fun switchToKernelThread(@volatile frame: Pointer<InterruptFrame>)
