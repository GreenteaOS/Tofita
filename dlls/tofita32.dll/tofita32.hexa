// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

/// Shared memory allocator for Hexa projects

let defaultReserveMegabytes = #if bit64 4096 #else 128 #end
let reserveAtVirtualMegabyte = #if bit64 4096*4096*4 #else (4096/4)*3 - (defaultReserveMegabytes*2) #end

fun reserveIgnore(megabytes: UInt16) {
	// Nothing, already did reserve
}

// TODO take custom reserveAtVirtualMegabyte
fun reserve(megabytes: UInt16) {
	// TODO
	wrapReserve = reserveIgnore
	wrapAllocate = allocate
	wrapFree = free
}

fun allocate(size: UInt32): #if bit64 UInt64 #else UInt32 #end {
	// TODO
	return 0
}

fun allocateFirst(size: UInt32): #if bit64 UInt64 #else UInt32 #end {
	reserve(defaultReserveMegabytes)
	return allocate(size)
}

fun free(pointer: UInt64, size: UInt32) {
	// TODO
}

fun freeStub(pointer: UInt64, size: UInt32) {
	// Nothing, not yet ready
}

var wrapReserve = reserve

var wrapAllocate = allocateFirst

var wrapFree = freeStub

@stdcall
module exports

// TODO Use higher allocation density on 32-bit to prolong buffer usage
@draft
@dllExport('tofitaHexaReserve')
fun tofitaHexaReserve(megabytes: UInt16) {
	wrapReserve(megabytes)
}

@draft
@dllExport('tofitaHexaAllocate')
fun tofitaHexaAllocate(size: UInt32) {
	return wrapAllocate(size)
}

@draft
@dllExport('tofitaHexaAllocate')
fun tofitaHexaFree(pointer: #if bit64 UInt64 #else UInt32 #end, size: UInt32) {
	return wrapFree(pointer, size)
}

// High performance function, that does completely nothing
// TODO link names
@fastcall
fun tofitaFastStub(rcx: UInt64, rdx: UInt64): UInt32 {
	tofitaDebugLog("--> tofitaFastStub --> rcx=%8 rdx=%8".wide(), rcx, rdx)
	return 0
}

@stdcall
fun tofitaStdStub(arg: VoidPointer): UInt32 {
	tofitaDebugLog("--> tofitaStdStub --> arg=%8".wide(), arg as! UInt64)
	return 0
}

// External
@fastcall
declare fun tofitaFastSystemCallWrapper(rcx: TofitaSyscalls, rdx: #if bit64 UInt64 #else UInt32 #end): #if bit64 UInt64 #else UInt32 #end

// Return value is placed into RAX
fun tofitaFastSystemCall(rcx: TofitaSyscalls,
#if bit64
	rdx: UInt64 = 0
#else
	rdx: UInt32 = 0
#end
): #if bit64 UInt64 #else UInt32 #end
{
	return tofitaFastSystemCallWrapper(rcx, rdx)
}

fun tofitaExitProcess(exitCode: UInt32): Void {
	tofitaFastSystemCall(TofitaSyscalls.ExitProcess, exitCode)
}

fun tofitaDebugLog(message: ConstWideCharPointer, extra: UInt64, more: UInt64): Void {
	let payload = new DebugLogPayload()
	// TODO @stack
	// TODO ^ optimize to allocate on stack, some lifetime flag on creation and usage?
	payload.message = message
	payload.extra = extra
	payload.more = more
	tofitaFastSystemCall(TofitaSyscalls.DebugLog, payload as! UInt64)
}

fun njraaSwapWindowFramebuffer(windowId: UInt64, fb: WindowFramebuffer): Void {
	let payload = new SwapWindowFramebufferPayload()
	payload.windowId = windowId
	payload.fb = fb
	tofitaFastSystemCall(TofitaSyscalls.SwapWindowFramebuffer, payload as! UInt64)
}

fun njraaGetOrCreateWindowFramebuffer(windowId: UInt64, fb: WindowFramebuffer): Void {
	let payload = new SwapWindowFramebufferPayload()
	payload.windowId = windowId
	payload.fb = fb
	tofitaFastSystemCall(TofitaSyscalls.GetOrCreateWindowFramebuffer, payload as! UInt64)
}

fun tofitaCreateWindowEx(payload: CreateWindowExPayload): UInt64 {
	return tofitaFastSystemCall(TofitaSyscalls.CreateWindowEx, payload as! UInt64)
}

fun tofitaShowWindow(windowId: UInt64, nCmdShow: CmdShow): Void {
	let payload = new ShowWindowPayload()
	payload.windowId = windowId
	payload.nCmdShow = nCmdShow
	tofitaFastSystemCall(TofitaSyscalls.ShowWindow, payload as! UInt64)
}

fun tofitaGetMessage(payload: GetMessagePayload): Bool32 {
	// TODO filters
	// TODO UInt64 -> Bool32 is a lossy conversion, type check it somehow
	return tofitaFastSystemCall(TofitaSyscalls.GetMessage, payload as! UInt64) as! Bool32
}

fun tofitaPostMessage(payload: PostMessagePayload): Bool32 {
	return tofitaFastSystemCall(TofitaSyscalls.PostMessage, payload as! UInt64) as! Bool32
}
