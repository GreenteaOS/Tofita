// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Constants: shared data from the bootloader to the kernel

// Start of kernel sections in memory
let kernelVirtualBase = 0xffff800000000000u64
let framebufferStart = (kernelVirtualBase + 768 * 1024 * 1024)
// TODO: no need for mapping framebufferStart if wholePhysicalStart used
// TODO proper dynamically computed numbers

// Mapping of 1:1 of physical memory as virtual = physical + wholePhysicalStart
// Note: Mapping is done on-demand per-page for faster loading
let wholePhysicalStart = (framebufferStart + 128 * 1024 * 1024)
let pageSize = 4096 // 4 KiB

// Helpers

@struct @sizeOf(8)
class Physical<T> {
	var physical: UInt64

	static fun toPhysical(physical: UInt64): Physical<T> {
		return physical as! Physical<T>
	}

	fun toVirtual(): Pointer<T> {
		var result: UInt64 = (wholePhysicalStart as! UInt64) + physical
		return result as! Pointer<T>
	}

	fun toVirtualOffset(offset: UInt64): Pointer<T> {
		var result: UInt64 = (wholePhysicalStart as! UInt64) + physical + offset
		return result as! Pointer<T>
	}
}

// Data transferred from UEFI application into kernel loader

@struct
@sizeOf(40)
// TODO ^ implement actual check in code gen
class EfiMemoryMap {
	var memoryMap: EFI_MEMORY_DESCRIPTOR
	var memoryMapSize: UInt64
	var mapKey: UInt64
	var descriptorSize: UInt64
	var descriptorVersion: UInt32
}

@struct
@sizeOf(32)
class Framebuffer {
	var base: UInt64 // virtual address
	var physical: UInt64 // physical address
	var size: UInt32 // in bytes
	var width: UInt32
	var height: UInt32
	var pixelsPerScanLine: UInt32
}

@struct
@sizeOf(24)
class RamDisk {
	var base: UInt64 // virtual address
	var physical: UInt64 // physical address
	var size: UInt64 // in bytes
}

@struct
class KernelParams {
	var pml4: UInt64
	var stack: UInt64
	var physicalBuffer: UInt64 // physical address of where kernel loader placed
	var physicalBytes: UInt64
	var physicalRamBitMaskVirtual: UInt64 // virtual address of where RAM usage
										// bit-map stored
	var efiMemoryMap: EfiMemoryMap
	var efiRuntimeServices: Pointer<efi.EFI_RUNTIME_SERVICES> = null
	var framebuffer: Framebuffer
	var ramdisk: RamDisk
	var imageHandle: EFI_HANDLE
	var acpiTablePhysical: UInt64
	var ramBytes: UInt64

	var time: EFI_TIME
	var capabilities: EFI_TIME_CAPABILITIES
	// UInt8 isLiveBootWithInstaller; == 1 == 0, don't show logon screen (and
	// don't allow to login! in the sense that it looks like a security hole
	// like "let it in without entering a login-password")
}

declare InitKernel = @fastcall (params: ConstPointer<KernelParams>) => Void
// TODO ^ fix that in quake
declare InitKernelTrampoline = @fastcall (kernelParams: UInt64, pml4: UInt64, stack: UInt64,
												entry: UInt64) => Void
