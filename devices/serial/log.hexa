// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on https://gitlab.com/nagisa/huehuehuehuehue/blob/master/src/serial.c
// Check `serialPrintf` to see supported features

let serial_register_base = 0x03F8
let serial_baud_rate = 115200
let serial_clock_rate = 1843200
let serial_line_control = 0x03
let serial_register_stride = 1
let serial_fifo_control = 0x07
let serial_extended_fifo_tx_size = 64
let serial_use_hw_flow_control = false
let serial_detect_cable = false

// 16550 UART register offsets and bitfields
let r_uart_rxbuf = 0
let r_uart_txbuf = 0
let r_uart_baud_low = 0
let r_uart_baud_high = 1
let r_uart_fcr = 2
let b_uart_fcr_fifoe = (1 << 0)
let b_uart_fcr_fifo64 = (1 << 5)
let r_uart_lcr = 3
let b_uart_lcr_dlab = (1 << 7)
let r_uart_mcr = 4
let b_uart_mcr_dtrc = (1 << 0)
let b_uart_mcr_rts = (1 << 1)
let r_uart_lsr = 5
let b_uart_lsr_rxrdy = (1 << 0)
let b_uart_lsr_txrdy = (1 << 5)
let b_uart_lsr_temt = (1 << 6)
let r_uart_msr = 6
let b_uart_msr_cts = (1 << 4)
let b_uart_msr_dsr = (1 << 6)
let b_uart_msr_ri = (1 << 7)
let b_uart_msr_dcd = (1 << 8)

UInt64 kstrlen(const data: Pointer<UInt8>) {
	var r: UInt64
	for (r = 0; *data != 0; data++, r++)

	return r
}

UInt8 portInb(@volatile UInt16 port)

fun portOutb(@volatile UInt16 port, @volatile UInt8 value)

UInt8 readSerialRegister(offset: UInt16) {
	return portInb(SERIAL_REGISTER_BASE + offset * SERIAL_REGISTER_STRIDE)
}

fun writeSerialRegister(offset: UInt16, d: UInt8) {
	portOutb(SERIAL_REGISTER_BASE + offset * SERIAL_REGISTER_STRIDE, d)
}

fun serialPortWritable(): Bool {
	if SERIAL_USE_HW_FLOW_CONTROL {
		if SERIAL_DETECT_CABLE {
			// Wait for both DSR and CTS to be set
			//   DSR is set if a cable is connected.
			//   CTS is set if it is ok to transmit data
			//
			//   DSR  CTS  Description                               Action
			//   ===  ===  ========================================  ========
			//    0    0   No cable connected.                       Wait
			//    0    1   No cable connected.                       Wait
			//    1    0   Cable connected, but not clear to send.   Wait
			//    1    1   Cable connected, and clear to send.       Transmit
			return ((readSerialRegister(R_UART_MSR) & (B_UART_MSR_DSR | B_UART_MSR_CTS)) ==
						  (B_UART_MSR_DSR | B_UART_MSR_CTS)) as! Bool
		} else {
			// Wait for both DSR and CTS to be set OR for DSR to be clear.
			//   DSR is set if a cable is connected.
			//   CTS is set if it is ok to transmit data
			//
			//   DSR  CTS  Description                               Action
			//   ===  ===  ========================================  ========
			//    0    0   No cable connected.                       Transmit
			//    0    1   No cable connected.                       Transmit
			//    1    0   Cable connected, but not clear to send.   Wait
			//    1    1   Cable connected, and clar to send.        Transmit
			return ((readSerialRegister(R_UART_MSR) & (B_UART_MSR_DSR | B_UART_MSR_CTS)) !=
						  (B_UART_MSR_DSR)) as! Bool
		}
	}
	return true
}

UInt64 serialPortWrite(buffer: Pointer<UInt8>, size: UInt64) {
	if buffer == null {
		return 0
	}
	if size == 0 {
		// Flush the hardware
		//
		// Wait for both the transmit FIFO and shift register empty.
		while (readSerialRegister(R_UART_LSR) & (B_UART_LSR_TEMT | B_UART_LSR_TXRDY)) !=
			   (B_UART_LSR_TEMT | B_UART_LSR_TXRDY) {}

		while !serialPortWritable() {}

		return 0
	}
	// Compute the maximum size of the Tx FIFO
	var fifoSize: UInt64 = 1
	if (SERIAL_FIFO_CONTROL & B_UART_FCR_FIFOE) != 0 {
		if (SERIAL_FIFO_CONTROL & B_UART_FCR_FIFO64) == 0 {
			fifoSize = 16
		} else {
			fifoSize = SERIAL_EXTENDED_FIFO_TX_SIZE
		}
	}
	while size != 0 {
		// Wait for the serial port to be ready, to make sure both the transmit FIFO
		// and shift register empty.
		while (readSerialRegister(R_UART_LSR) & B_UART_LSR_TEMT) == 0 {}

		// Fill then entire Tx FIFO
		for (UInt64 index = 0; index < fifoSize && size != 0; index++, size--, buffer++) {
			// Wait for the hardware flow control signal
			while (!serialPortWritable()) {}

			// Write byte to the transmit buffer.
			writeSerialRegister(R_UART_TXBUF, *buffer)
		}
	}

	return size
}

fun serialPrintInt(n: UInt64): Void {
	var buf[24]: UInt8
	for i in 24 {
		buf[i] = 0
	}

	var bp: Pointer<UInt8> = buf + 24
	do {
		bp--
		*bp = '0' + n % 10
		n /= 10
	} while (n != 0)
	serialPortWrite((UInt8 *)bp, buf - bp + 24)
}

fun serialPrintHex(n: UInt64): Void {
	serialPrintf("0x")
	UInt8 buf[16], *bp = buf + 16
	for i in 16 {
		buf[i] = '0'
	}

	do {
		bp--
		var mod: UInt8 = n % 16
			*bp = '0' + mod
		if mod < 10 {
		} else {
			*bp = 'A' - 10 + mod
		}
		n /= 16
	} while (n != 0)
	serialPortWrite((UInt8 *)buf, 16)
}

fun serialPrintBits(value: UInt64): Void {
	serialPrintf("0b")
		if (value & (1ull << i)) {
	for i in 64 {
			serialPrintInt(i)
		}
	}
}

Int32 __cdecl putchar(c: UInt8) {
	var buffer[]: UInt8 = {c, 0}
	serialPortWrite(buffer, 1)
	return c
}

let eof = 0
Int32 puts(const string: Pointer<UInt8>) {
	var i: Int32 = 0
	while string[i] // standard c idiom for looping through a null-terminated string
	{
		if putchar(string[i]) == eof // if we got the EOF value from writing the uint8_t
		{
			return eof
		}
		i++
	}
	return 1 // to meet spec.
}

UInt8 *comItoA(i: Int64, b[]: UInt8) {
	UInt8 const digit[] = "0123456789"
	var p: Pointer<UInt8> = b
	if (i < 0) {
		*p++ = '-'
		i *= -1
	}
	var shifter: Int32 = i
	do { // Move to where representation ends
		++p
		shifter = shifter / 10
	} while (shifter)
	*p = '\0'
	do { // Move back, inserting digits as u go
		*--p = digit[i % 10]
		i = i / 10
	} while (i)
	return b
}

fun serialPrintf(const c: Pointer<WideChar>, ...) {
	va_list lst
	va_start(lst, c)
	while (*c != '\0') {
		if (*c != '%') {
			putchar(*c & 0xFF)
			c++
			continue
		}

		c++

		if (*c == '\0') {
			break
		}

		switch (*c) {
		case 's': { // ASCII of UTF-8
			const UInt8 *string = va_arg(lst, UInt8 *)
			if string != null {
				puts(string)
			}
		} break
		case 'S': { // ASCII of UTF-16
			const UInt16 *string = va_arg(lst, UInt16 *)
			var i: UInt32 = 0
			if string != null {
				while string[i] != 0 {
					putchar(string[i] & 0xFF)
					i++
				}
			}
		} break
		case 'c':
			putchar(va_arg(lst, int32_t))
			break
		case 'd': {
			var value: Int32 = va_arg(lst, int32_t)
			var buffer[16]: UInt8
			for i in 16 {
				buffer[i] = 0
			}
			comItoA(value, buffer)
			var c: Pointer<UInt8> = buffer
			while (*c != '\0') {
				putchar(*c)
				c++
			}
			break
		}
		case 'u': {
			var value: UInt32 = va_arg(lst, uint32_t)
			var buffer[16]: UInt8
			for i in 16 {
				buffer[i] = 0
			}
			comItoA(value, buffer)
			var c: Pointer<UInt8> = buffer
			while (*c != '\0') {
				putchar(*c)
				c++
			}
			break
		}
		case '8': {
			var value: UInt64 = va_arg(lst, uint64_t)
			serialPrintHex(value)
			break
		}
		case 'b': {
			var value: UInt64 = va_arg(lst, uint64_t)
			serialPrintBits(value)
			break
		}
		}
		c++
	}
}

fun serialPrint(const print: Pointer<WideChar>) {
	serialPrintf(print)
}

fun serialPrintln(const print: Pointer<WideChar>) {
	serialPrintf(print)
	serialPrintf("\n")
}
