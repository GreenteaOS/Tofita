// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// trampoline.asm . incbin
@extern @rename('binFont') declare let binFont: ConstArrayPointer<UInt8>
@extern @rename('binFontBitmap') declare let binFontBitmap: ConstArrayPointer<UInt8>
let fontWidth: UInt32 = 512
let fontHeight: UInt32 = 32

@extern @rename('binLeavesBitmap') declare let binLeavesBitmap: ConstArrayPointer<UInt8>
let leavesWidth: UInt32 = 36
let leavesHeight: UInt32 = 25

let _fltused: Int64 = 0

fun drawPixel(framebuffer: FrameBuffer, x: UInt32, y: UInt32, color: UInt32) {
	var pixels = framebuffer.base as! ArrayPointer<UInt32>
	pixels[(y * framebuffer.pixelsPerScanLine) + x] = color
}

@struct @packed @sizeOf(4)
@stack
class UefiPixel {
	var b: UInt8
	var g: UInt8
	var r: UInt8
	var a: UInt8
}

fun getBitmapPixel(bmp: ConstArrayPointer<UInt8>, x: UInt32, y: UInt32, width: UInt32, height: UInt32): UInt32 {
	let bmpHeaderSize = 54u64
	let colors: ConstArrayPointer<UInt8> = (bmp as! UInt64 + bmpHeaderSize) as! ConstArrayPointer<UInt8>
	var pixel: ByValue<UefiPixel> = new ByValue<UefiPixel>()
	pixel.ref.b = colors[((height - y - 1) * width + x) * 3 + 0]
	pixel.ref.g = colors[((height - y - 1) * width + x) * 3 + 1]
	pixel.ref.r = colors[((height - y - 1) * width + x) * 3 + 2]
	pixel.ref.a = 0xFF
	var color = pixel.ref as! ArrayPointer<UInt32>
	// TODO `@union`
	return color[0]
}

@struct @packed @sizeOf(12)
class TextFontList {
	var x: UInt16
	var y: UInt16
	var width: Float
}

var textFontList = null as! ArrayPointer<ByValue<TextFontList>>
// TODO `ConstArrayPointer<TextFontList>` + `@const @struct { let }`

fun initText() {
	textFontList = binFont as! ArrayPointer<ByValue<TextFontList>> // TODO as! _
}

fun getCharAdvance(c: UInt8) {
	var textChar: TextFontList = textFontList[c as! UInt64].ref
	return textChar.width
}

fun drawChar(c: UInt8, x: Float, y: Int16, framebuffer: FrameBuffer) {
	var textChar: TextFontList = textFontList[c as! UInt64].ref

	var xx: Int16 = (x + 0.5) as! Int32 as! Int16
	var w: UInt16 = (textChar.width + 0.5) as! Int32 as! UInt16

	var yi: UInt16 = 0
	while yi < 12 {
		var xi: UInt16 = 0
		while xi < w {
			let atx: UInt32 = xx + xi
			let aty: UInt32 = y + yi

			let font = getBitmapPixel(binFontBitmap, textChar.x + xi, textChar.y + yi, fontWidth, fontHeight)

			drawPixel(framebuffer, atx, aty, font)

			xi++
		}

		yi++
	}

	return textChar.width
}

fun drawText(text: String, y: Int16, framebuffer: FrameBuffer) {
	let text: ConstArrayPointer<ClangWideChar> = text.utf16()
	var i: UInt16 = 0

	// Get width to center text on screen
	var width: Float = 0

	while (text[i] as! UInt16) != 0 && i < 255 * 255 {
		width += getCharAdvance((text[i] as! UInt16) & 0xFF as! UInt8)
		i++
	}

	var xx: Float = (framebuffer.width / 2) - (width / 2)

	i = 0
	while (text[i] as! UInt16) != 0 && i < 255 * 255 {
		xx += drawChar((text[i] as! UInt16) & 0xFF as! UInt8, xx, y, framebuffer)
		i++
	}
}
