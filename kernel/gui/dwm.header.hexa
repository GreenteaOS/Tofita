// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Desktop window manager (i.e. GUI logic)

// Zero for system GUI (like taskbar)
var firstResponder UInt64 = 0 // Active window to catch keyboard input

// TODO move this declaration somewhere else
@struct
class OverlappedWindow {
	var present Bool
	var pid UInt64 // Owner
	// TODO tid - thread id

	// TODO this id is kinda useless and may go out of sync
	// when topmost updated
	var windowId UInt64
	var nextId UInt64
	var prevId UInt64
	var hWnd HWnd

	var visible Bool

	/// Aka "hidden to taskbar", unrelated to `maximized`
	var minimized Bool = false

	/// Aka "full screen", unrelated to `minimized`
	var maximized Bool = false

	// TODO var notResponding Bool = false
	// TODO var respondingTimeoutMs UInt16 = 0
	// ^ count milliseconds>N before setting notResponding

	var title String

	var x Int16
	var y Int16

	var width UInt16
	var height UInt16

	// fb.pixels == null if framebuffer not present
	// Note: fb size may be != current window size
	var fbZeta Bitmap32
	var fbGama Bitmap32
	var fbCurrentZeta Bool // Use to swap chain

	new () {}
}

let windowsLimit UInt64 = 256

// TODO allocate dynamically (just use Hexa Array or something)
let windowsList [OverlappedWindow] = []

var rootWindow UInt64 = 0
var topmostWindow UInt64 = 0

var mouseDragCapturedWindow Bool = false
var mouseDragWindow UInt64 = 0
var mouseDragLastX Int16 = 0
var mouseDragLastY Int16 = 0

// Something happened
var mouseActivity Bool = false
var keyboardActivity Bool = false

// Note: those are controlled by DWM
@volatile var mouseX Int16 = 256i16
@volatile var mouseY Int16 = 256i16

enum FrameHover : UInt8 {
	Noop = 0
	Min
	Max
	Close
}

var frameHoverWindow UInt64 = 0
var frameHoverWindowDown Bool = false
var frameHoverWindowInsideButtonArea Bool = false
var frameHoverState FrameHover = FrameHover.Noop
