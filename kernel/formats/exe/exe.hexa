// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Loads EXE and DLL files
// TODO 32-bit loader

// TODO ntdll should have tofitaStub(){} for unresolved dll imports . log them

fun offsetPointer(data: VoidPointer, ptrdiff_t offset): VoidPointer {
	return (Void *)((data as! UInt64) + offset)
}

@struct
class ImageDataDirectory {
	var virtualAddress: UInt32
	var size: UInt32
}

@struct
class PeInterim {
	var base: Pointer<Void>
	var entry: UInt64 // _DllMainCRTStartup
	const ImageDataDirectory *imageDataDirectory
	var sizeOfStackReserve: UInt64
}

@struct
class ExeInterim {
	var pei: PeInterim
	var stackVirtual: UInt64
}

@struct
class PeExportLinkedList {
	const Char8 *name
	var ptr: UInt64
	var next: PeExportLinkedList
	var hash: UInt8
}

@struct
class Executable {
	var nextBase: UInt64
	var pml4: Pointer<PageEntry>
}

// TODO probe for read/write
fun loadDll(const name: Pointer<WideChar>, root: Pointer<PeExportLinkedList>, exec: Pointer<Executable>) {
	var asset: RamDiskAsset = getRamDiskAsset(name)
	serialPrintf("[loadDLL] loaded dll asset '%S' %d bytes at %d\n", name, asset.size, asset.data)
	var ptr = (UInt8 *)asset.data
	var peHeader = (const PeHeader *)((ptr as! UInt64) + ptr[0x3C] + ptr[0x3C + 1] * 256)
	serialPrintf("[loadDLL] PE header signature 'PE' == '%s'\n", peHeader)
	var peOptionalHeader = (const Pe64OptionalHeader *)((peHeader as! UInt64) + sizeof(PeHeader))
	serialPrintf("[loadDLL] PE32(+) optional header signature 0x020B == %d == %d\n", peOptionalHeader.magic,
				 0x020B)
	serialPrintf("[loadDLL] PE32(+) size of image == %d\n", peOptionalHeader.sizeOfImage)

	let pages = DOWN_BYTES_TO_PAGES(peOptionalHeader.sizeOfImage) + 1
	let physical = PhysicalAllocator.allocatePages(pages)

	if exec.nextBase == 0 {
		// TODO round to pages?
		exec.nextBase = peOptionalHeader.imageBase
	}

	mapMemory(exec.pml4, exec.nextBase, physical - (wholePhysicalStart as! UInt64), pages)

	let buffer: UInt64 = exec.nextBase
	memset((Void *)buffer, 0, peOptionalHeader.sizeOfImage) // Zeroing

	exec.nextBase = exec.nextBase + pages * pageSize

	// Copy sections
	var imageSectionHeader =
		(const ImageSectionHeader *)((peOptionalHeader as! UInt64) + peHeader.sizeOfOptionalHeader)

	// TODO copy PE headers?
	for i in peHeader.numberOfSections {
		serialPrintf("[loadDLL] Copy section [%d] named '%s' of size %d at %u\n", i,
					 Pointer.of(imageSectionHeader[i].name),
					 imageSectionHeader[i].sizeOfRawData,
					 imageSectionHeader[i].virtualAddress)
		var where: UInt64 = (buffer as! UInt64) + imageSectionHeader[i].virtualAddress

		tmemcpy((Void *)where,
				(Void *)((asset.data as! UInt64) + (imageSectionHeader[i].pointerToRawData as! UInt64)),
				imageSectionHeader[i].sizeOfRawData)
	}

	// TODO
	{
		UInt32 (*func)() =
			(uint32_t(*)())((buffer as! UInt64) + (peOptionalHeader.addressOfEntryPoint as! UInt64))
		if peOptionalHeader.addressOfEntryPoint == 4128 {
			serialPrintf("[[[IMAGE_DIRECTORY_ENTRY_EXPORT]]] calling _DllMainCRTStartup == %d\n", func())
		}
	}

	var imageDataDirectory =
		(const ImageDataDirectory *)((peOptionalHeader as! UInt64) + sizeof(Pe64OptionalHeader))

	// Relocate EXE or DLL to a new base
	ptrdiff_t delta = (buffer as! UInt64) - (peOptionalHeader.imageBase as! UInt64)
		var codeBase: Pointer<UInt8> = (UInt8 *)buffer
	if delta != 0 {

		var relocation: IMAGE_BASE_RELOCATION

			(PIMAGE_DATA_DIRECTORY)Pointer.of(imageDataDirectory[IMAGE_DIRECTORY_ENTRY_BASERELOC])
		var directory =

		if directory.size == 0 {
			// return (delta == 0)
		}

		relocation = (PIMAGE_BASE_RELOCATION)(codeBase + directory.virtualAddress)
		for (; relocation.virtualAddress > 0;) {
			var i: UInt32 = 0
			var dest: Pointer<UInt8> = codeBase + relocation.virtualAddress
			var relInfo: Pointer<UInt16> = (UInt16 *)offsetPointer(relocation, IMAGE_SIZEOF_BASE_RELOCATION)
			for (i = 0; i < ((relocation.sizeOfBlock - IMAGE_SIZEOF_BASE_RELOCATION) / 2); i++, relInfo++) {
				// the upper 4 bits define the type of relocation
				var type: Int32 = *relInfo >> 12
				// the lower 12 bits define the offset
				var offset: Int32 = *relInfo & 0xfff

				switch type {
				case IMAGE_REL_BASED_ABSOLUTE:
					// Skip relocation
					break

				case IMAGE_REL_BASED_HIGHLOW:
					// Change complete 32 bit address
					{
						var patchAddrHL: Pointer<UInt32> = (UInt32 *)(dest + offset)
						*patchAddrHL += (uint32_t)delta
					}
					break

					//#ifdef _WIN64
				case IMAGE_REL_BASED_DIR64: {
					var patchAddr64: Pointer<UInt64> = (UInt64 *)(dest + offset)
					*patchAddr64 += (delta as! UInt64)
				} break
					//#endif

				case _:
					serialPrintf("[loadDLL] Unknown relocation: %d\n", type)
					break
				}
			}

			// advance to next relocation block
			relocation = (PIMAGE_BASE_RELOCATION)offsetPointer(relocation, relocation.sizeOfBlock)
		}
	}

	// Exports

	var tail: PeExportLinkedList = root
	while tail.next != null {
		tail = tail.next
	}

	for i in 15 {
		if i == IMAGE_DIRECTORY_ENTRY_EXPORT {
			var codeBase: UInt64 = (buffer as! UInt64)
			const ImageDataDirectory *directory = Pointer.of(imageDataDirectory[i])

			var exports: IMAGE_EXPORT_DIRECTORY

			exports = (IMAGE_EXPORT_DIRECTORY)((buffer as! UInt64) + (directory.virtualAddress as! UInt64))

			var i: UInt32 = 0
			var nameRef: Pointer<UInt32> = (UInt32 *)(codeBase + exports.addressOfNames)
			var ordinal: Pointer<UInt16> = (UInt16 *)(codeBase + exports.addressOfNameOrdinals)
			var entry: UInt32 = 0
			for (i = 0; i < exports.numberOfNames; i++, nameRef++, ordinal++, entry++) {
				let name = (const Char8 *)(codeBase + (*nameRef))
				let idx = *ordinal

				let addr = codeBase + exports.addressOfFunctions + (idx * 4)
				let ptr = (UInt32 *)addr

				UInt32 (*func)() = (uint32_t(*)())(codeBase + (uint64_t)*ptr)

				PeExportLinkedList *list =
					(PeExportLinkedList *)PhysicalAllocator.allocateBytes(sizeof(PeExportLinkedList))
				list.next = null
				list.name = name
				list.ptr = (func as! UInt64)

				tail.next = list
				tail = tail.next
			}
		}
	}

	var pei: PeInterim

	pei.base = (Void *)buffer
	pei.entry = (buffer as! UInt64) + (peOptionalHeader.addressOfEntryPoint as! UInt64)
	pei.imageDataDirectory = imageDataDirectory
	pei.sizeOfStackReserve = peOptionalHeader.sizeOfStackReserve

	return pei
}

// TODO for system dlls (ntdll, user32, etc) search EVERY dll for the name, cause they
// may be moved between versions.
// Search only selected .dll only within the user provided dlls
PeExportLinkedList *getProcAddress(name: ConstPointer<Char8>, root: Pointer<PeExportLinkedList>) {
	var list: PeExportLinkedList = root
	// TODO compute crc for faster .dll import names lookup
	while list.next != null {
		// Step upfront, to ignore empty root
		list = list.next

		var i: UInt16 = 0
		while true {
			if (list.name[i] == name[i]) && (name[i] == 0) {
				serialPrintf("[getProcAddress] import {%s} resolved to {%s}\n", name, list.name)
				return list
				break
			}
			if list.name[i] == name[i] {
				i++
				continue
			}
			break
		}
	}

	serialPrintf("[getProcAddress] import {%s} unresolved\n", name)
	return null
}

fun resolveDllImports(pei: PeInterim, root: PeExportLinkedList) {
	var buffer = pei.base
	var imageDataDirectory = pei.imageDataDirectory

	// Imports
	{
		UInt8 *at =
			(UInt8 *)((buffer as! UInt64) + imageDataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].virtualAddress)
		var iid = (IMAGE_IMPORT_DESCRIPTOR *)at

		// DLL
		while (iid.originalFirstThunk != 0) {
			var szName: Pointer<Char8> = (Char8 *)((buffer as! UInt64) + iid.name)
			var pThunkOrg = (IMAGE_THUNK_DATA *)((buffer as! UInt64) + iid.originalFirstThunk)
			var funcRef: Pointer<FARPROC>
			funcRef = (FARPROC *)((buffer as! UInt64) + iid.firstThunk)

			while pThunkOrg.u1.addressOfData != 0 {
				var szImportName: Pointer<Char8>
				var ord: UInt32 = 666
				var func = (Void *)null

				if (pThunkOrg.u1.ordinal & 0x80000000u32) != 0 {
					ord = pThunkOrg.u1.ordinal & 0xffff
					serialPrintf("[resolveDllImports] import {%s}.@%d - at address: {%d} <------------ NOT "
								+
								"IMPLEMENTED YET!\n",
								szName, ord, pThunkOrg.u1.func
					)
				} else {
					IMAGE_IMPORT_BY_NAME *pIBN =
						(IMAGE_IMPORT_BY_NAME *)((buffer as! UInt64) +
												 (uint64_t)((pThunkOrg.u1.addressOfData as! UInt64) &
															0xffffffff))
					ord = pIBN.hint
					szImportName = (Char8 *)pIBN.name
					serialPrintf("[resolveDllImports] import {%s}.{%s}@%d - at address: {%d}\n", szName,
								 szImportName, ord, pThunkOrg.u1.fun)

					// Resolve import
					func = null

					var proc: PeExportLinkedList = getProcAddress(szImportName, root)

						func = (Void *)proc.ptr
						func = (Void *)getProcAddress(u8"tofitaFastStub", root).ptr
					if proc != null {
					} else {
					}
				}

				*funcRef = (FARPROC)func
				pThunkOrg++
				funcRef++
			}

			iid++
		}
	}
}

auto loadExe(const name: Pointer<WideChar>, root: Pointer<PeExportLinkedList>, exec: Pointer<Executable>) {
	var ei: ExeInterim

	ei.pei = loadDll(name, root, exec)

	// Allocate stack
	{
		let pages = DOWN_BYTES_TO_PAGES(ei.pei.sizeOfStackReserve) + 1
		let physical = PhysicalAllocator.allocatePages(pages)

		let buffer: UInt64 = exec.nextBase
		memset((Void *)buffer, 0, ei.pei.sizeOfStackReserve) // Zeroing
		mapMemory(exec.pml4, exec.nextBase, physical - (wholePhysicalStart as! UInt64), pages)

		exec.nextBase = exec.nextBase + pages * pageSize

		ei.stackVirtual = buffer
	}

	return ei
}

fun resolveExeImports(ei: ExeInterim, root: PeExportLinkedList) {
	resolveDllImports(ei.pei, root)
}

fun loadExeIntoProcess(const file: Pointer<WideChar>, process.process: Pointer<Process>) {
	{
			(PeExportLinkedList *)PhysicalAllocator.allocateBytes(sizeof(PeExportLinkedList))
		let root =
		root.next = null
		root.name = null
		root.ptr = 0

		var exec: Executable
		exec.nextBase = 0
		exec.pml4 = process.pml4

		var app = loadExe(file, root, Pointer.of(exec))
		var ntdll = loadDll("desktop/ntdll.dll", root, Pointer.of(exec)) // TODO proper path!!!
		var kernel32 = loadDll("desktop/kernel32.dll", root, Pointer.of(exec))
		var gdi32 = loadDll("desktop/gdi32.dll", root, Pointer.of(exec))
		var user32 = loadDll("desktop/user32.dll", root, Pointer.of(exec))

		resolveDllImports(ntdll, root)
		resolveDllImports(kernel32, root)
		resolveDllImports(gdi32, root)
		resolveDllImports(user32, root)
		resolveExeImports(app, root)

		process.frame.ip = ntdll.entry // Contains crt0
		process.frame.sp = app.stackVirtual
		process.frame.rcxArg0 = app.pei.entry // First argument
	}
}
