// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on the http://blog.ivank.net/fastest-gaussian-blur.html

Int32 @fastcall floor(float x) {
	if (x >= 0) {
		return (int32_t)x
	} else {
		var y: Int32 = (int32_t)x
		return ((float)y == x) ? y : y - 1
	}
}

float @fastcall sqrt(float number) {
	Int32 i
	float x2, y
	const float threehalfs = 1.5F

	x2 = number * 0.5F
	y = number
	i = *(Int32 *)&y // floating point bit level hacking [sic]
	i = 0x5f3759df - (i >> 1) // Newton's approximation
	y = *(float *)&i
	y = y * (threehalfs - (x2 * y * y)) // 1st iteration
	y = y * (threehalfs - (x2 * y * y)) // 2nd iteration
	y = y * (threehalfs - (x2 * y * y)) // 3rd iteration

	return 1.0f / y
}

fun @fastcall
boxBlurT(Bitmap32 *source, Bitmap32 *target, width: UInt16, height: UInt16, radius: UInt8) {
	var iarr: Float = (double)1.0 / (radius + radius + 1)
	for (UInt16 i = 0; i < width; i++) {
		var ti: UInt32 = i
		var li: UInt32 = ti
		var ri: UInt32 = ti + radius * width

		var fv: PixelRGBAData = source.pixels[ti].rgba
		var lv: PixelRGBAData = source.pixels[ti + width * (height - 1)].rgba

		var val_r: UInt16 = fv.r * (radius + 1)
		var val_g: UInt16 = fv.g * (radius + 1)
		var val_b: UInt16 = fv.b * (radius + 1)

		for (UInt8 j = 0; j < radius; j++) {
			var pixel: PixelRGBAData = source.pixels[ti + j * width].rgba
			val_r += pixel.r
			val_g += pixel.g
			val_b += pixel.b
		}

		for (UInt8 j = 0; j <= radius; j++) {
			var pixel: PixelRGBAData = source.pixels[ri].rgba
			val_r += (pixel.r - fv.r)
			val_g += (pixel.g - fv.g)
			val_b += (pixel.b - fv.b)

			target.pixels[ti].rgba.r = val_r * iarr
			target.pixels[ti].rgba.g = val_g * iarr
			target.pixels[ti].rgba.b = val_b * iarr

			ri += width
			ti += width
		}

		for (UInt8 j = radius + 1; j < height - radius; j++) {
			var pixel_ri: PixelRGBAData = source.pixels[ri].rgba
			var pixel_li: PixelRGBAData = source.pixels[li].rgba

			val_r += (pixel_ri.r - pixel_li.r)
			val_g += (pixel_ri.g - pixel_li.g)
			val_b += (pixel_ri.b - pixel_li.b)

			target.pixels[ti].rgba.r = val_r * iarr
			target.pixels[ti].rgba.g = val_g * iarr
			target.pixels[ti].rgba.b = val_b * iarr

			li += width
			ri += width
			ti += width
		}

		for (UInt16 j = height - radius; j < height; j++) {
			var pixel: PixelRGBAData = source.pixels[li].rgba

			val_r += (lv.r + pixel.r)
			val_g += (lv.g + pixel.g)
			val_b += (lv.b + pixel.b)

			target.pixels[ti].rgba.r = val_r * iarr
			target.pixels[ti].rgba.g = val_g * iarr
			target.pixels[ti].rgba.b = val_b * iarr

			li += width
			ti += width
		}
	}
}

fun @fastcall
boxBlurH(Bitmap32 *source, Bitmap32 *target, width: UInt16, height: UInt16, radius: UInt8) {
	var iarr: Float = (double)1.0 / (radius + radius + 1)
	for (UInt16 i = 0; i < height; i++) {
		var ti: UInt32 = i * width
		var li: UInt32 = ti
		var ri: UInt32 = ti + radius
		var fv: PixelRGBAData = source.pixels[ti].rgba
		var lv: PixelRGBAData = source.pixels[ti + width - 1].rgba

		var val_r: UInt16 = fv.r * (radius + 1)
		var val_g: UInt16 = fv.g * (radius + 1)
		var val_b: UInt16 = fv.b * (radius + 1)

		for (UInt8 j = 0; j < radius; j++) {
			var pixel: PixelRGBAData = source.pixels[ti + j].rgba
			val_r += pixel.r
			val_g += pixel.g
			val_b += pixel.b
		}

		for (UInt8 j = 0; j <= radius; j++) {
			var pixel: PixelRGBAData = source.pixels[ri++].rgba
			val_r += (pixel.r - fv.r)
			val_g += (pixel.g - fv.g)
			val_b += (pixel.b - fv.b)

			target.pixels[ti].rgba.r = val_r * iarr
			target.pixels[ti].rgba.g = val_g * iarr
			target.pixels[ti].rgba.b = val_b * iarr
			ti++
		}

		for (UInt8 j = radius + 1; j < width - radius; j++) {
			var pixel_ri: PixelRGBAData = source.pixels[ri++].rgba
			var pixel_li: PixelRGBAData = source.pixels[li++].rgba

			val_r += (pixel_ri.r - pixel_li.r)
			val_g += (pixel_ri.g - pixel_li.g)
			val_b += (pixel_ri.b - pixel_li.b)

			target.pixels[ti].rgba.r = val_r * iarr
			target.pixels[ti].rgba.g = val_g * iarr
			target.pixels[ti].rgba.b = val_b * iarr
			ti++
		}

		for (UInt16 j = width - radius; j < width; j++) {
			var pixel: PixelRGBAData = source.pixels[li++].rgba

			val_r += (lv.r - pixel.r)
			val_g += (lv.g - pixel.g)
			val_b += (lv.b - pixel.b)

			target.pixels[ti].rgba.r = val_r * iarr
			target.pixels[ti].rgba.g = val_g * iarr
			target.pixels[ti].rgba.b = val_b * iarr
			ti++
		}
	}
}

fun @fastcall
boxBlur(Bitmap32 *source, Bitmap32 *target, width: UInt16, height: UInt16, radius: UInt8) {
	for (UInt32 i = 0; i < source.width * source.height; i++)
		target.pixels[i].color = source.pixels[i].color
	boxBlurH(target, source, width, height, radius)
	boxBlurT(source, target, width, height, radius)
}

UInt8 *boxesForGauss(sigma: Float, n: UInt8) {
	var wIdeal: Float = sqrt((12 * sigma * sigma / n) + 1) // Ideal averaging filter width
	var wl: UInt8 = (uint8_t)floor(wIdeal)
	if (wl % 2 == 0)
		wl--
	var wu: UInt8 = wl + 2

	var mIdeal: Float = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4)
#define round(x) ((x) >= 0 ? (int64_t)((x) + 0.5) : (int64_t)((x)-0.5))
	var m: Int8 = round(mIdeal)


	UInt8 *sizes = (UInt8 *)PhysicalAllocator.allocateBytes(n)
	for (UInt8 i = 0; i < n; i++) {
		sizes[i] = i < m ? wl : wu
	}
	return sizes
}

Bitmap32 *gaussBlur(Bitmap32 *bitmap, radius: Float) {
	Bitmap32 *target = allocateBitmap(bitmap.width, bitmap.height)

	UInt8 *boxes = boxesForGauss(radius, 3)
	boxBlur(bitmap, target, bitmap.width, bitmap.height, (boxes[0] - 1) / 2)
	boxBlur(target, bitmap, bitmap.width, bitmap.height, (boxes[1] - 1) / 2)
	boxBlur(bitmap, target, bitmap.width, bitmap.height, (boxes[2] - 1) / 2)

	// TODO freeFromBuffer(3, boxes)
	return target
}

// Algorithm from https://fastcpp.blogspot.com/2011/06/bilinear-pixel-interpolation-using-sse.html
PixelRGBAData @fastcall
interpolatePixel(const Bitmap32 *bitmap, const float x, const float y) {
	let px: UInt16 = (uint16_t)x // Same as floor(x)
	let py: UInt16 = (uint16_t)y // Same as floor(y)
	let stride: UInt16 = bitmap.width
	const PixelRGBAData *data = (const PixelRGBAData *)bitmap.pixels
	const PixelRGBAData *p0 = &data[px + py * stride] // pointer to first pixel

	// Calculate the weights
	const float fx = x - px
	const float fy = y - py
	const float fx1 = 1.0f - fx
	const float fy1 = 1.0f - fy

	let w1: UInt32 = fx1 * fy1 * 256.0f
	let w2: UInt32 = fx * fy1 * 256.0f
	let w3: UInt32 = fx1 * fy * 256.0f
	let w4: UInt32 = fx * fy * 256.0f

	PixelRGBAData result

	// Neighboring pixels
	let p1: PixelRGBAData = p0[0]
	let p2: PixelRGBAData = p0[1]
	let p3: PixelRGBAData = p0[stride]
	let p4: PixelRGBAData = p0[1 + stride]

	// Weighted sum of pixels
	result.r = (p1.r * w1 + p2.r * w2 + p3.r * w3 + p4.r * w4) >> 8
	result.g = (p1.g * w1 + p2.g * w2 + p3.g * w3 + p4.g * w4) >> 8
	result.b = (p1.b * w1 + p2.b * w2 + p3.b * w3 + p4.b * w4) >> 8
	result.a = (p1.a * w1 + p2.a * w2 + p3.a * w3 + p4.a * w4) >> 8

	return result
}
