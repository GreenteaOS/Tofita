// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

#define USER32_DLL @dllExport
import "user32.hpp"
import "user32Vars.hpp"
import "../kernel32.dll/kernel32.hpp"

// Utils

fun handleToWindow(hWnd: wapi.HWnd): Pointer<user32.Window> {
	if hWnd == null {
		return null // TODO return desktop
	}
	if hWnd == INVALID_HANDLE_VALUE {
		return null
	if (((user32.Window *)hWnd).windowIsWindow != user32.windowIsWindow)
	}
		return null
	return hWnd as! Pointer<user32.Window>
}

fun windowToHandle(user32.window: Pointer<Window>): wapi.HWnd {
	// TODO offset ptr 8-byte aligned + reserved space
	// os it fits into upper half of virtual space
	return window as! HWnd
}

// WAPI
@rename('RegisterClassW')
fun registerClassW(const wapi.wc: Pointer<WindowClass>): wapi.Atom {
	tofitaDebugLog("RegisterClassW called")

	// TODO use libc func utf16le
	var len = 0
	// TODO lpszClassName takes atoms?
	var str = (const UInt16 *)wc.lpszClassName
	for i in 256 {
		// Increment upfront to rezerve for zeros
		len += 2
		// Null-termination of utf16le is \0\0
		if str[i] == 0 {
			break
		}
	}

	var tail = Pointer.of(user32.rootClass)
	while tail.next != null {
		tail = tail.next
	}

	var list = (user32.ClassesLinkedList *)LocalAlloc(0, sizeof(user32.ClassesLinkedList))
	var name = (UInt16 *)LocalAlloc(0, len)
	list.next = null

	for i in len {
		name[i] = str[i]
	}

	list.name = name
	list.wc = *wc

	tail.next = list
	tail = tail.next

	tofitaDebugLog("RegisterClassW done")
	return 0 as! Atom
}

@rename('CreateWindowExW')
fun createWindowExW(UInt32 dwExStyle, lpClassName: ConstWideCharPointer, lpWindowName: ConstWideCharPointer,
						   UInt32 dwStyle, x: Int32, y: Int32, nWidth: Int32, nHeight: Int32,
						   wapi.HWnd hWndParent, wapi.HMenu hMenu, wapi.HInstance hInstance,
						   Void *lpParam): wapi.HWnd {
	tofitaDebugLog("CreateWindowExW called")

	// Find class
	var list = Pointer.of(user32.rootClass)
	var name = lpClassName
	var found = false
	const wapi.WindowClass *wc = null

	while list.next != null {
		// Step upfront, to ignore empty root
		list = list.next

		var i: UInt16 = 0
		while true {
			if ((list.name[i] == name[i]) && (name[i] == 0)) {
				tofitaDebugLog("CreateWindowExW found class {%S}\n", (name as! UInt64))
				found = true
				wc = Pointer.of(list.wc)
				break
			}
			if (list.name[i] == name[i]) {
				i++
				continue
			}
			break
		}
	}

	if !found {
		tofitaDebugLog("CreateWindowExW not found return")
		return null
	}

	// Prepare for syscall
	var payload: CreateWindowExPayload

	payload.wc = wc

	payload.lpClassName = lpClassName
	payload.lpWindowName = lpWindowName
	payload.dwStyle = dwStyle
	payload.x = x
	payload.y = y
	payload.nWidth = nWidth
	payload.nHeight = nHeight
	payload.hWndParent = hWndParent
	payload.hMenu = hMenu
	payload.hInstance = hInstance
	payload.lpParam = lpParam

	// Create local window counterpart
	var window = (user32.Window *)LocalAlloc(0, sizeof(user32.Window))

	let hWnd = window as! HWnd
	payload.hWnd = hWnd

	// Create native window counterpart
	var windowId: UInt64 = tofitaCreateWindowEx(Pointer.of(payload))

	window.windowId = windowId
	window.windowIsWindow = user32.windowIsWindow
	window.proc = wc.lpfnWndProc

	// Initial paint
	// TODO should be called somewhere else, in syscall of windows creation?
	PostMessage(hWnd, Message.WM_PAINT, null, null)

	tofitaDebugLog("CreateWindowExW done")
	return hWnd
}

@rename('ShowWindow')
fun showWindow(hWnd: wapi.HWnd, nCmdShow: Int32): wapi.Bool {
	tofitaDebugLog("ShowWindow called")
	var window = handleToWindow(hWnd)
	var result: Bool = 0
	if (window != null) {
		switch (nCmdShow) {
		case SW_HIDE: {
			tofitaShowWindow(window.windowId, nCmdShow)
			result = 1
			break
		}
		case SW_SHOW:
		case SW_SHOWNORMAL:
		case SW_SHOWDEFAULT: {
			tofitaShowWindow(window.windowId, nCmdShow)
			result = 1
			break
		}
		case _: {
			// TODO
		}
		}
	}
	tofitaDebugLog("ShowWindow done")
	return result
}

// TODO take 2 or more messages at a time for better perf (this is pretty common)
@rename('GetMessageW')
fun getMessageW(msg: Pointer<wapi.Msg>, hWnd: wapi.HWnd, wMsgFilterMin: UInt32, wMsgFilterMax: UInt32): wapi.Bool {
	tofitaDebugLog("GetMessageW called")
	var result: Bool = 1

	var payload: GetMessagePayload
	payload.msg = msg
	payload.hWnd = hWnd
	payload.wMsgFilterMin = wMsgFilterMin
	payload.wMsgFilterMax = wMsgFilterMax
	tofitaGetMessage(Pointer.of(payload))

	// Stop iteration
	if msg.message == Message.WM_QUIT {
		result = 0
	}

	tofitaDebugLog("GetMessageW done")
	return result
}

@rename('TranslateMessage')
fun translateMessage(msg: Pointer<wapi.Msg>): wapi.Bool {
	tofitaDebugLog("TranslateMessage called")
	// TODO
	tofitaDebugLog("TranslateMessage done")
	return 0
}

@rename('DispatchMessageW')
fun dispatchMessageW(msg: Pointer<wapi.Msg>): wapi.LResult {
	tofitaDebugLog("DispatchMessageW called")
	var result: LResult = 0
	if msg.hwnd != null {
		var window = handleToWindow(msg.hwnd)
		if window == null {
			return 0
		}
		// ERROR_INVALID_HANDLE
		if msg.message == Message.WM_PAINT {
			result = window.proc(msg.hwnd, msg.message, msg.wParam, msg.lParam)
		} else {
			result = window.proc(msg.hwnd, msg.message, msg.wParam, msg.lParam)
		}
		// result = ERROR_SUCCESS
	} else {
		// TODO
	}
	tofitaDebugLog("DispatchMessageW done")
	return result
}

@rename('PostMessage')
fun postMessage(hWnd: wapi.HWnd, msg: wapi.Message, wParam: VoidPointer, lParam: VoidPointer): wapi.Bool {
	var payload: PostMessagePayload
	payload.hWnd = hWnd
	payload.msg = msg
	payload.wParam = wParam
	payload.lParam = lParam
	return tofitaPostMessage(Pointer.of(payload))
}

@rename('PostQuitMessage')
fun postQuitMessage(nExitCode: Int32): Void {
	tofitaDebugLog("PostQuitMessage called")
	PostMessage(null, Message.WM_QUIT, nExitCode as! VoidPointer, null)
	tofitaDebugLog("PostQuitMessage done")
	// TODO ERROR_SUCCESS
}

@rename('BeginPaint')
fun beginPaint(wapi.HWnd hWnd, wapi.ps: Pointer<PaintStruct>): wapi.HDc {
	tofitaDebugLog("BeginPaint called")
	var window = handleToWindow(hWnd)
	if window == null {
		return null
	}
	// We do this every time, cause window may be resized
	njraaGetOrCreateWindowFramebuffer(window.windowId, Pointer.of(window.fb))
	ps.rcPaint.left = 0
	ps.rcPaint.top = 0
	ps.rcPaint.right = window.fb.width
	ps.rcPaint.bottom = window.fb.height
	tofitaDebugLog("BeginPaint done")
	return (wapi.HDc)Pointer.of(window.fb) // TODO
}

@fastcall fun setPixel(nj.fb: Pointer<WindowFramebuffer>, x: Int16, y: Int16, nj.Pixel32 pixel): Void {
	if (x < 0) || (y < 0) {
		return
	}
	if (x > fb.width - 1) || (y > fb.height - 1) {
		return
	}
	fb.pixels[y * fb.width + x] = pixel
}

@rename('FillRect')
fun fillRect(dc: wapi.HDc, lprc: ConstPointer<wapi.Rect>, brush: wapi.HBrush): Int32 {
	tofitaDebugLog("FillRect called")

	var fb = (nj.WindowFramebuffer *)dc

	var color: Pixel32
	color.color = 0xFFAA0000u32

	for y in lprc.top ... lprc.bottom {
		for x in lprc.left ... lprc.right {
			setPixel(fb, x, y, color)
		}
	}

	tofitaDebugLog("FillRect done")
	return 1
}

@rename('EndPaint')
fun endPaint(hWnd: wapi.HWnd, ps: Pointer<wapi.PaintStruct>): wapi.Bool {
	tofitaDebugLog("EndPaint called")
	var window = handleToWindow(hWnd)
	if window == null {
		return 0
	}
	njraaSwapWindowFramebuffer(window.windowId, Pointer.of(window.fb))
	tofitaDebugLog("EndPaint done")
	return 1
}

@rename('DefWindowProcW')
fun defWindowProcW(wapi.HWnd hWnd, wapi.Message uMsg, Void *wParam, Void *lParam): wapi.LResult {
	tofitaDebugLog("DefWindowProcW called")
	var window = handleToWindow(hWnd)
	if window == null {
		return 0
	}
	if uMsg == Message.WM_CLOSE {
		// TODO DestroyWindow(hWnd)
		// TODO probably should be async post?
		window.proc(hWnd, Message.WM_DESTROY, 0, 0)
		window.proc(hWnd, Message.WM_NCDESTROY, 0, 0)
		return 0
	}
	tofitaDebugLog("DefWindowProcW done")
	return 0
}

@rename('_DllMainCRTStartup')
@fastcall fun _DllMainCRTStartup(): Void {
	user32.rootClass.next = null
}
