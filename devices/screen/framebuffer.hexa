// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Performs visualization onto the screen

// Speed of rendering mostly depends on cache-locality
// Remember: top-down, left-to-right: for(y) for(x) {}, not other way!

Framebuffer *_framebuffer

// Avoid one level of pointer indirection
Pixel32 *_pixels

Bitmap32 *allocateBitmap(width: UInt16, height: UInt16) {
	var result = (Bitmap32Interim *)PhysicalAllocator.allocateBytes(sizeof(uint16_t) * 2 +
																	 sizeof(Pixel32) * width * height)
	result.width = width
	result.height = height
	return (Bitmap32 *)result
}

fun setFramebuffer(const Framebuffer *framebuffer) {
	_framebuffer = const_cast<Framebuffer *>(framebuffer)
	_pixels = (Pixel32 *)_framebuffer.base
}

// Very fast, but not precise, alpha multiply
#define Mul255(a255, c255) (((uint32_t)a255 + 1) * (uint32_t)c255 >> 8)
#define Blend255(target, color, alpha) (Mul255(alpha, color) + Mul255(255 - alpha, target))

fun @fastcall blendPixel(x: Int16, y: Int16, pixel: Pixel32) {
	var _framebuffer = ._framebuffer // Faster access
	if ((x > _framebuffer.width - 1) || (y > _framebuffer.height - 1) || (x < 0) || (y < 0))
		return
	var p: Pixel32 = _pixels[y * _framebuffer.width + x]

	p.rgba.r = Mul255(pixel.rgba.a, pixel.rgba.r) + Mul255(255 - pixel.rgba.a, p.rgba.r)
	p.rgba.g = Mul255(pixel.rgba.a, pixel.rgba.g) + Mul255(255 - pixel.rgba.a, p.rgba.g)
	p.rgba.b = Mul255(pixel.rgba.a, pixel.rgba.b) + Mul255(255 - pixel.rgba.a, p.rgba.b)

	_pixels[y * _framebuffer.width + x] = p
}

fun @fastcall setPixel(x: Int16, y: Int16, pixel: Pixel32) {
	var _framebuffer = ._framebuffer // Faster access
	if ((x > _framebuffer.width - 1) || (y > _framebuffer.height - 1) || (x < 0) || (y < 0))
		return
	_pixels[y * _framebuffer.width + x] = pixel
}

fun drawBitmap32WithAlpha(Bitmap32 *bitmap, x: UInt16, y: UInt16) {
	for (Int16 yy = 0; yy < bitmap.height; yy++) {
		for (Int16 xx = 0; xx < bitmap.width; xx++) {
			blendPixel(x + xx, y + yy, bitmap.pixels[yy * bitmap.width + xx])
		}
	}
}

fun drawBitmap32(Bitmap32 *bitmap, x: UInt16, y: UInt16) {
	for (Int16 yy = 0; yy < bitmap.height; yy++) {
		for (Int16 xx = 0; xx < bitmap.width; xx++) {
			setPixel(x + xx, y + yy, bitmap.pixels[yy * bitmap.width + xx])
		}
	}
}

fun drawRectangleWithAlpha(color: Pixel32, x: UInt16, y: UInt16, width: UInt16, height: UInt16) {
	for (Int16 yy = 0; yy < height; yy++) {
		for (Int16 xx = 0; xx < width; xx++) {
			blendPixel(x + xx, y + yy, color)
		}
	}
}

fun drawRectangle(color: Pixel32, x: UInt16, y: UInt16, width: UInt16, height: UInt16) {
	for (Int16 yy = 0; yy < height; yy++) {
		for (Int16 xx = 0; xx < width; xx++) {
			setPixel(x + xx, y + yy, color)
		}
	}
}

fun drawRectangleOutline(color: Pixel32, x: UInt16, y: UInt16, width: UInt16, height: UInt16) {
	for (Int16 yy = 0; yy < height; yy++) {
		for (Int16 xx = 0; xx < width; xx++) {
			// Rendering left and far right points sequentally should be
			// better for cache-locality than vertical lines
			// At least this is true for small rectangles (like buttons)
			if (yy == 0 || xx == 0 || xx == width - 1 || yy == height - 1)
				setPixel(x + xx, y + yy, color)
		}
	}
}

fun line45smooth(color: Pixel32, x: Int16, y: Int16, width: Int16, mod: Int16) {
	color.rgba.a = 98
	var xx: Int16 = 0
	for (Int16 xi = 0; xi < width - 1; xi++) {
		xx += mod
		setPixel(xx + x, y + xi, color)
		blendPixel(xx + x, y + xi + 1, color)
		blendPixel(xx + x + mod, y + xi, color)
	}
	xx += mod
	setPixel(xx + x, y + width - 1, color)
}

fun lineHorizontal(color: Pixel32, x: Int16, y: Int16, rightLength: UInt16) {
	for (UInt16 i = 0; i < rightLength; ++i) {
		setPixel(x + i, y, color)
	}
}

fun lineHorizontalWithAlpha(color: Pixel32, x: Int16, y: Int16, rightLength: UInt16) {
	for (UInt16 i = 0; i < rightLength; ++i) {
		blendPixel(x + i, y, color)
	}
}

fun lineVertical(color: Pixel32, x: Int16, y: Int16, bottomLength: UInt16) {
	for (UInt16 i = 0; i < bottomLength; ++i) {
		setPixel(x, y + i, color)
	}
}

fun lineVerticalWithAlpha(color: Pixel32, x: Int16, y: Int16, bottomLength: UInt16) {
	for (UInt16 i = 0; i < bottomLength; ++i) {
		blendPixel(x, y + i, color)
	}
}
