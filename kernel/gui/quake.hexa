// The Tofita Kernel
// Copyright (C) 2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Quake-style console with ~

var quakeHeight: UInt8 = 255
var quakeCommand: String = ""
// `var quakeLines: [String] = [0]` // TODO `= [0]` not valid type
var quakeLines: [String] = []
// TODO `= []` is inferred as `Array_$Any_$new_(0);`
var quakeLine: UInt8 = 0
var quakeRow: UInt8 = 0
var quakeAdvance: Float = 0.0
var quakeCommandSize: UInt8 = 0
var haveToQuake: Bool = false

fun quake() {
	if haveToQuake == false {
		return
	}

	drawVibrancedRectangle(0, 0, _framebuffer.width as! UInt16, quakeHeight)
	var color = new ByValue<Pixel32>()
	color.ref.color = 0x126099FF
	lineHorizontal(color, 0, quakeHeight, _framebuffer.width as! UInt16)
	// color.rgba.r = color.rgba.g = color.rgba.b = 48
	color.ref.rgba.ref.r = color.ref.rgba.ref.g = color.ref.rgba.ref.b = 0xDDu8
	var x = drawAsciiText(quakeCommand, 2, quakeHeight - 14u8, color.ref)
	drawAsciiText("|", x + 2, quakeHeight - 15u8, color.ref)

	for i in 17 {
		if let line = quakeLines[i] {
			drawAsciiText(line, 2, i * 14i16 + 2i16, color.ref)
		}
	}
}

fun quakeHandleButtonDown(key: UInt8) {
	serialPrintf("quakeHandleButtonDown %d\n", key)
	if keyboardMap[key] == null or keyboardMap[key].length == 0 {
		serialPrintf("quakeHandleButtonDown null\n")
		return
	}

	if keyboardMap[key] == '\b' && quakeCommandSize > 0 {
		quakeCommand = '' // TODO substr -1
		quakeCommandSize--
	}

	if keyboardMap[key] == '\n' && quakeCommandSize > 0 {
		if quakeCommand == 're' {
			quakePrintf("Doing hot reload. Note: this log may be persistent between hot reloads\n".utf16())
			var start: InitKernel = upper as! InitKernel // TODO `= (InitKernel)` compiles
			start(paramsCache) // TODO pml4, stack
		} else if quakeCommand == 'da' { // TODO startsWith
			// Dark theme
			// TODO
		} else if quakeCommand == 'li' {
			// Light theme
			// TODO
		} else if quakeCommand == 'he' {
			quakePrintf("Hit `~` to show/hide this terminal\n".utf16(), quakeCommand)
			quakePrintf(("Command 'reload' does quick kernel restart (without actual reboot). Note: this "
						+
						"destroys all unsaved data and may crash the system!\n").utf16(),
						quakeCommand)
		} else {
			quakePrintf("Command '%S' not supported\n".utf16(), quakeCommand)
			quakePrintf("Enter 'help' for commands\n".utf16())
		}
		quakeCommand = ''
		quakeCommandSize = 0
	}

	// TODO support string comparisons `if (keyboardMap[key] >= 'a' && keyboardMap[key] <= 'z') ||`
	if let char = keyboardMap[key] {
		let charCode = char.charCodeAt(0) as! UInt16 // TODO `?? 0`
		// TODO nullables are incomparable, do some cool way to avoid this `if (charCode >= 'a'.charCodeAt(0) && charCode <= 'z'.charCodeAt(0)) ||`
		// TODO ^ better error `you are comparing nullable values`
		if (charCode >= 97 && charCode <= 122) ||
			(charCode >= 48 && charCode <= 57) || (charCode == 32) {
			if quakeCommandSize < 255 {
				// quakeCommand += keyboardMap[key]
				quakeCommand = quakeCommand + char
				serialPrintf("quake append\n")
				quakeCommandSize++
			}
		}
		serialPrintf("quake command is %S +%S %d\n", quakeCommand.utf16(), char.utf16(), charCode)
	}
}

var qsodHappened = false
fun qsod(format: ConstArrayPointer<ClangWideChar>, extra: UInt64, more: UInt64) {
	qsodHappened = true
	haveToQuake = true
	quakePrintf("Kernel stopped working. Please, reboot.\n".utf16())
	quakePrintf(format, extra, more)
	kernelThreadBusy = false
}

// TODO `private`
fun quakeNewline() {
	quakeLine++
	quakeRow = 0
	quakeAdvance = 0.0
	if quakeLine == 17 {
		// Move all lines upper
		quakeLine = 16
		for i in 16 {
			quakeLines[i] = quakeLines[i + 1]
		}
		quakeLines[16] = ''
	}
}

fun quakePutChar(c: UInt8): UInt8 {
	if c != 0 {
		putchar(c) // Copy to serial log
		if let char = '\n'.charCodeAt(0), c == char {
			quakeNewline()
			return c
		}
		quakeAdvance += getCharAdvance(c as! UInt8)
		if quakeAdvance > _framebuffer.width {
			quakeNewline()
			quakeAdvance = getCharAdvance(c as! UInt8)
		}

		if quakeLines[quakeLine] == null {
			quakeLines[quakeLine] = ``
		}

		// TODO how this should work then? `nullADD`?
		quakeLines[quakeLine] += String.fromCharCode(c)
		quakeRow++
		if quakeRow > 255 {
			quakeNewline()
		}
		return c
	}
	return 0
}

fun quakePutString(string: ArrayPointer<UInt8>): Int32 {
	var i: Int32 = 0
	while string[i] != 0 {
		if quakePutChar(string[i]) == 0 {
			return 0
		}
		i++
	}
	return 1
}

// TODO batch whole lines or store separate chars as strings to avoid `+=char`
fun quakePutStringUnicode(string: ConstArrayPointer<ClangWideChar>): Int32 {
	var i: Int32 = 0
	while string[i] != 0 as! ClangWideChar {
		if quakePutChar(string[i] as! UInt8) == 0 { // TODO
			return 0
		}
		i++
	}
	return 1
}

fun quakePrintHex(n: UInt64) {
	quakePutString("0x".utf16() as! ArrayPointer<UInt8>)

	var n = n
	var buf: ArrayByValue<UInt8, 16> = [0]
	var bp = ((buf as! UInt64) + 16) as! ArrayPointer<UInt8>

	for i in 16 {
		buf[i] = '0'.charCodeAt(0)
	}

	do {
		bp--
		var mod: UInt8 = (n % 16) as! UInt8
		if mod < 10 {
			bp[0] = '0'.charCodeAt(0) + mod
		} else {
			bp[0] = 'A'.charCodeAt(0) - 10 + mod
		}
		n /= 16
	} while (n != 0)

	for i in 16 {
		quakePutChar(buf[i] as! UInt8)
	}
}

fun quakePrintf(c: ConstArrayPointer<ClangWideChar>, ...args) {
	// TODO
	serialPrintf("quakePrintf: %S\n", c)
	quakePutStringUnicode(c)
	/*
	var s: ArrayPointer<UInt8>
	va_list lst
	va_start(lst, c)
	while c[0] != '\0' {
		if c[0] != '%' {
			quakePutChar(c[0] & 0xFF)
			c++
			continue
		}

		c++

		if c[0] == '\0' {
			break
		}

		switch c[0] {
		case 's':
			quakePutString(vaArg<ArrayPointer<UInt8> >(lst))
			break
		case 'c':
			quakePutChar(vaArg(lst, int32_t))
			break
		case 'd': {
			var value: Int32 = vaArg<Int32>(lst)
			var buffer: ArrayByValue<UInt8, 16>
			for i in 16 {
				buffer[i] = 0
			}
			quakeItoA(value, buffer)
			var c: ArrayPointer<UInt8> = buffer
			while c[0] != '\0' {
				quakePutChar(c[0])
				c++
			}
			break
		}
		case 'u': {
			var value: UInt32 = va_arg(lst, uint32_t)
			var buffer: ArrayByValue<UInt8, 16>
			for i in 16 {
				buffer[i] = 0
			}
			quakeItoA(value, buffer)
			var c: ArrayPointer<UInt8> = buffer
			while c[0] != '\0' {
				quakePutChar(c[0])
				c++
			}
			break
		}
		case '8': {
			var value: UInt64 = va_arg(lst, uint64_t)
			quakePrintHex(value)
			break
		}
		}
		c++
	}*/
}
