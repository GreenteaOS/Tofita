// The Tofita Kernel
// Copyright (C) 2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

class Cursor {
	var x: UInt16
	var y: UInt16
	var width: UInt8
	var height: UInt8
	var bmp: ArrayPointer<UInt8>
	// TODO just use Bitmap32
	var bmpStart: UInt64
	new () {}
}

fun loadCursor(asset: RamDiskAsset): Cursor {
	let buffer = asset.data as! ArrayPointer<UInt8>

	// Reserved. Must always be 0.
	if buffer[0] != 0 {
		return null // TODO `Cursor?`
	}
	// Specifies image type: 1 for icon (.ICO) image, 2 for cursor (.CUR) image.
	// Other values are invalid.
	if buffer[2] != 2 {
		return null
	}
	// Specifies number of images in the file.
	let count: Int = buffer[4] + buffer[5] * 0xFF
	serialPrintf("%d images in a cursor\n", count)
	if count == 0 {
		return null
	}

	// Search for the largest one with best quality
	var best = 6u32 // Offset
	var bestId = 0
	var offset = 6u32
	for i in count {
		// Specifies image width in pixels. Can be any number between 0 and 255. Value 0 means image width is 256 pixels.
		// Specifies image height in pixels. Can be any number between 0 and 255. Value 0 means image height is 256 pixels.
		// Specifies number of colors in the color palette. Should be 0 if the image does not use a color palette.
		serialPrintf("%d image is %dx%d, palette = %d\n", i, buffer[offset], buffer[offset + 1], buffer[offset + 2])
		if buffer[offset] + buffer[offset + 1] >= buffer[best] + buffer[best + 1] {
			best = offset
			bestId = i
		}
		offset += 16
		// Reserved. Should be 0.

		// In ICO format: Specifies color planes. Should be 0 or 1.[Notes 3]
		// In CUR format: Specifies the horizontal coordinates of the hotspot in number of pixels from the left.

		// In ICO format: Specifies bits per pixel. [Notes 4]
		// In CUR format: Specifies the vertical coordinates of the hotspot in number of pixels from the top.

		// Specifies the size of the image's data in bytes
		//let size = toInt32(buffer[offset + 8], buffer[offset + 9], buffer[offset + 10], buffer[offset + 11])
		//console.log("%d size\n", size)
		// Specifies the offset of BMP or PNG data from the beginning of the ICO/CUR file
	}

	serialPrintf("The best image is %dx%d, palette = %d, id %d\n", buffer[best], buffer[best + 1], buffer[best + 2], bestId)

	let cur = new Cursor()

	// Specifies image width in pixels. Can be any number between 0 and 255. Value 0 means image width is 256 pixels.
	cur.width = buffer[best]
	// Specifies image height in pixels. Can be any number between 0 and 255. Value 0 means image height is 256 pixels.
	cur.height = buffer[best + 1]

	// Specifies number of colors in the color palette. Should be 0 if the image does not use a color palette.
	// Reserved. Should be 0.
	// In CUR format: Specifies the horizontal coordinates of the hotspot in number of pixels from the left.
	cur.x = buffer[best + 4] + buffer[best + 5] * 0xFFu16

	// In CUR format: Specifies the vertical coordinates of the hotspot in number of pixels from the top.
	cur.y = buffer[best + 6] + buffer[best + 7] * 0xFFu16

	// TODO must copy data if `copyData Bool`
	cur.bmp = buffer

	// Specifies the size of the image's data in bytes
	let imageSize = toInt32(buffer[best + 8], buffer[best + 9], buffer[best + 10], buffer[best + 11])
	// Specifies the offset of BMP or PNG data from the beginning of the ICO/CUR file
	offset = toInt32(buffer[best + 12], buffer[best + 13], buffer[best + 14], buffer[best + 15])

	serialPrintf("The cursor is %dx%d, %d:%d, %d bytes at %d\n", cur.width, cur.height, cur.x, cur.y, imageSize, offset)
	// A PNG file starts with an 8-byte signature (refer to hex editor image on the right):
	serialPrintf("Header at %d: %d %d %d %d\n", offset, buffer[offset], buffer[offset + 1], buffer[offset + 2], buffer[offset + 3])
	serialPrintf("Header at %d %d %d %d\n", buffer[best + 12], buffer[best + 13], buffer[best + 14], buffer[best + 15])

	let fsize = cur.width * cur.height * 4
	let start = offset + 20 + 16 + 4
	// TODO cur.bmp = buffer.slice(start, start + imageSize)
	cur.bmpStart = start

	return cur
}

fun drawCursor(cur: Cursor, x: UInt16, y: UInt16) {
	// TODO mirror cursor in this code if global setting for cursors mirroring is set
	// to affect all apps
	let pixel = new ByValue<Pixel32>()
	let bmp = (cur.bmp as! UInt64 + cur.bmpStart) as! ArrayPointer<UInt32>

	for yi in cur.height {
		for xi in cur.width {
			let yy: UInt32 = cur.height - yi - 1u32
			pixel.ref.color = bmp[xi + yy * (cur.width as! UInt32)] as! UInt32
			blendPixel(x + xi - cur.x + 1, y + yi - cur.y + 1, pixel.ref)
		}
	}
}
