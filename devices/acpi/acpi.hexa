// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// ACPI 2.0 is required by Tofita
// So we don't need to support ACPI 1.0
// TODO check if more generic table ST.ConfigurationTable viable



// Types

const UInt32 byteswap(x: UInt32) {
	return ((x >> 24) & 0x000000ff) | ((x >> 8) & 0x0000ff00) | ((x << 8) & 0x00ff0000) |
		   ((x << 24) & 0xff000000)
}

#define TABLE_HEADER(signature)                                                                              \
	static const UInt32 typeId = byteswap(signature);                                                      \
	var header: AcpiTableHeader

@struct
class AcpiTableHeader {
	var type: UInt32
	var length: UInt32
	var revision: UInt8
	var checksum: UInt8
	var oem_id[6]: Char8
	var oem_table[8]: Char8
	var oem_revision: UInt32
	var creator_id: UInt32
	var creator_revision: UInt32

	Bool validate(UInt32 expectedType = 0) const
} @packed

Bool AcpiTableHeader.validate(expectedType: UInt32) {
	return !expectedType || (expectedType == type)
}

@struct
class AcpiMcfgEntry {
	var base: UInt64
	var group: UInt16
	var busStart: UInt8
	var busEnd: UInt8
	var reserved: UInt32
} @packed

@struct
class AcpiMcfg {
	TABLE_HEADER('MCFG')
	var reserved: UInt64
	var entries[0]: AcpiMcfgEntry
} @packed

@struct
class AcpiApic {
	TABLE_HEADER('APIC')
	var localAddress: UInt32
	var flags: UInt32
	var controllerData[0]: UInt8
} @packed

@struct
class XSDT {
	TABLE_HEADER('XSDT')
	var headers[0]: Pointer<AcpiTableHeader>
} @packed

@struct
class Acpi20 {
	var length: UInt32
	Physical<XSDT> xsdtAddress
	var checksum: UInt8
	var reserved[3]: UInt8
} @packed

@struct
class Acpi10 {
	var signature[8]: Char8
	var checksum: UInt8
	var oemID[6]: Char8
	var revision: UInt8
	var rsdtAddress: UInt32
} @packed

@struct
class ACPI {
	var acpi10: Acpi10
	var acpi20: Acpi20
} @packed

@extern "C++" template <typename T> UInt64 acpiTableEntries(const T *t, size: UInt64) {
	return (t.header.length - sizeof(T)) / size
}

@extern "C++" template <typename T> Bool acpiValidate(const T *t) {
	return t.header.validate(T.typeId)
}

static Void put_sig(into: Pointer<Char8>, type: UInt32) {
	for (Int32 j = 0; j < 4; ++j)
		into[j] = reinterpret_cast<Char8 *>(Pointer.of(type))[j]
}

@extern "C++" template <typename T> inline T *offset_pointer(T *p, n: UInt64) {
	return reinterpret_cast<T *>(reinterpret_cast<uint64_t>(p) + n)
}

static inline UInt16 busAddr(bus: UInt8, device: UInt8, func: UInt8) {
	return bus << 8 | device << 3 | func
}

@struct
class PciGroup {
	var group: UInt16
	var busStart: UInt16
	var busEnd: UInt16
	var base: Pointer<UInt32>

	UInt32 *baseFor(bus: UInt8, device: UInt8, func: UInt8) {
		return offset_pointer(base, busAddr(bus, device, func) << 12)
	}

	Bool hasDevice(bus: UInt8, device: UInt8, func: UInt8) {
		return (*baseFor(bus, device, func) & 0xffff) != 0xffff
	}
}



class ACPIParser {
  public
	static Bool parse(acpiVendorTable: UInt64) {
		serialPrint("[ACPI] parsing started at physical ")
		serialPrintHex((uint64_t)(acpiVendorTable))
		serialPrint("\n")

		if (acpiVendorTable == 0) {
			serialPrintln("[ACPI] not present at all")
			return false
		}

		var acpiTable = (const acpi.ACPI *)physicalToVirtual(acpiVendorTable)

		var acpi10 = Pointer.of(acpiTable.acpi10)

		serialPrint("[ACPI] signature is '")
		for (Int32 i = 0; i < sizeof(acpi10.signature); i++)
			putchar(acpi10.signature[i])
		serialPrint("'\n")

		serialPrintf("[ACPI] revision is %d\n", acpi10.revision)

		let signature[9]: Char8 = u8"RSD PTR "

		for (Int32 i = 0; i < sizeof(acpi10.signature); i++)
			if (acpi10.signature[i] != signature[i]) {
				serialPrintln("[ACPI] RSDP table signature is incorrect")
				return false
			}

		var checksum: UInt8 = 0
		for (Int32 i = 0; i < sizeof(acpi.Acpi10); i++)
			checksum += ((UInt8 *)acpi10)[i]
		if (checksum != 0) {
			serialPrintln("[ACPI] checksum ACPI 1.0 failed")
			return false
		}

		let acpi20data = (const acpi.Acpi20 *)(Pointer.of(acpiTable.acpi20))
		let acpi20raw = (const UInt8 *)acpi20data
		checksum = 0
		for (Int32 i = 0; i < sizeof(acpi.Acpi20); i++)
			checksum += (acpi20raw)[i]
		if (checksum != 0) {
			serialPrintln("[ACPI] checksum ACPI 2.0 failed")
			return false
		}

		var xsdt = acpiTable.acpi20.xsdtAddress.toVirtual()

		loadXsdt(xsdt)

		serialPrintln("[ACPI] loaded")
		return true
	}

  private
	static UInt64 physicalToVirtual(physical: UInt64) {
		var result: UInt64 = (WholePhysicalStart as! UInt64) + (physical as! UInt64)
		return result
	}

	static fun dump32(msg: ConstPointer<Char8>, const Void *virtualAddress) {
		serialPrintf("\n[DUMP] %s: ", msg)
		const Char8 *x = (Char8 *)((uint64_t)(virtualAddress))
		const UInt8 *y = (UInt8 *)((uint64_t)(virtualAddress))
		for (Int32 j = 0; j < 8; ++j) {
			var buffer[2]: WideChar
			buffer[0] = (y[j] == 0 || y[j] < 32) ? '?' : x[j]
			buffer[1] = (char8_t)0
			serialPrint(buffer)
		}
		serialPrint("\n")
	}

	static fun loadXsdt(const acpi.xsdt: Pointer<XSDT>) {
		if (xsdt == null)
			return

		serialPrintf("[ACPI] acpiValidate(xsdt) %d\n", acpiValidate(xsdt))

		var sig[5]: Char8 = {0, 0, 0, 0, 0}
		serialPrintf("[ACPI] ACPI 2.0+ tables loading\n")
		acpi.put_sig(sig, xsdt.header.type)
		serialPrintf("[ACPI] Found table %s\n", sig)
		quakePrintf("[ACPI] Found table %s, ", sig)

		var numTables: UInt64 = acpiTableEntries(xsdt, sizeof(Void *))
		serialPrintf("[ACPI] acpiTableEntries %d\n", numTables)

		for (UInt64 i = 0; i < numTables; ++i) {
			var header = (const acpi.AcpiTableHeader *)physicalToVirtual((xsdt.headers[i] as! UInt64))

			acpi.put_sig(sig, header.type)
			serialPrintf("[ACPI] Found table %s\n", sig)
			quakePrintf("found table %s, ", sig)

			serialPrintf("[ACPI] acpiValidate(header) %d\n", header.validate())

			switch (header.type) {
			case acpi.AcpiApic.typeId:
				loadApic((const acpi.AcpiApic *)(header))
				break

			case acpi.AcpiMcfg.typeId:
				loadMcfg((const acpi.AcpiMcfg *)(header))
				break

			default:
				break
			}
		}

		quakePrintf("done.\n")
	}

	static fun loadApic(const acpi.apic: Pointer<AcpiApic>) {
		var local: Pointer<UInt32> = reinterpret_cast<UInt32 *>(apic.localAddress)
		serialPrintf("loadApic\n")
	}

	static fun loadMcfg(const acpi.mcfg: Pointer<AcpiMcfg>) {
		serialPrintf("loadMcfg\n")
		var count: UInt64 = acpiTableEntries(mcfg, sizeof(acpi.AcpiMcfgEntry))
		var mPci[count]: acpi.PciGroup

		for (UInt32 i = 0; i < count; ++i) {
			const acpi.AcpiMcfgEntry *mcfge = Pointer.of(mcfg.entries[i])

			mPci[i].group = mcfge.group
			mPci[i].busStart = mcfge.busStart
			mPci[i].busEnd = mcfge.busEnd
			mPci[i].base = reinterpret_cast<UInt32 *>(mcfge.base)

			var num_busses: Int32 = mPci[i].busEnd - mPci[i].busStart + 1
		}

		probePci(mPci, count)
	}

	static Bool multi(acpi.group: Pointer<PciGroup>, bus: UInt8, device: UInt8, func: UInt8) {
		var mBase: Pointer<UInt32> = group.baseFor(bus, device, func)
		var mMulti = ((mBase[3] >> 16) & 0x80) == 0x80
		return mMulti
	}

	static fun probePci(acpi.PciGroup *mPci, count: UInt64) {
		serialPrintf("[PCI] probePci\n")
		for (UInt32 i = 0; i < count; ++i) {
			var pci: Pointer<acpi.PciGroup> = Pointer.of(mPci[i])
			for (Int32 bus = pci.busStart; bus <= pci.busEnd; ++bus) {
				for (Int32 dev = 0; dev < 32; ++dev) {
					// TODO
				}
			}
		}
	}
}

// Management

/// `false` if failed to do so
/// TODO `poweroff` quake command
fun shutdownComputer(): Bool {
	return false
}

/// `false` if failed to do so
/// TODO `reboot` quake command
fun rebootComputer(): Bool {
	return false
}
