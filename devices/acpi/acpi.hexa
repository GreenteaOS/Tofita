// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// ACPI 2.0 is required by Tofita
// So we don't need to support ACPI 1.0
// TODO check if more generic table ST.ConfigurationTable viable

// Types

@struct @packed
class AcpiTableHeader {
	var type AcpiTypeId
	var length UInt32
	var revision UInt8
	var checksum UInt8
	var oemId ArrayByValue<UInt8, 6>
	var oemTable ArrayByValue<UInt8, 8>
	var oemRevision UInt32
	var creatorId UInt32
	var creatorRevision UInt32

	fun validate(expectedType AcpiTypeId) Bool {
		return expectedType == type
	}
}

// TODO this is probably useless
fun validate(expectedType AcpiTypeId, type AcpiTypeId) Bool {
	return expectedType == type
}

@struct @packed
class AcpiMcfgEntry {
	var base UInt64
	var group UInt16
	var busStart UInt8
	var busEnd UInt8
	var reserved UInt32
}

enum AcpiTypeId : UInt32 {
	MCFG = 0x4d434647 // TODO Buffer.from('MCFG')
	APIC = 0x41504943
	XSDT = 0x58534454
}

@struct @packed
class AcpiMcfg {
	// TODO static let sign = @acpiHeaderSignature 'MCFG'
	var header ByValue<AcpiTableHeader>
	var reserved UInt64
	var entries ArrayByValue<ByValue<AcpiMcfgEntry>, 0>
}

@struct @packed
class AcpiApic {
	// TODO static let sign = @acpiHeaderSignature 'APIC'
	var header AcpiTableHeader
	var localAddress UInt32
	var flags UInt32
	var controllerData ArrayByValue<UInt8, 0>
}

@struct @packed
class XSDT {
	// TODO static let sign = @acpiHeaderSignature 'XSDT'
	var header ByValue<AcpiTableHeader>
	// TODO ArrayByValueArbitarySized <- otherwise check bounds at ctime where possible
	var headers ArrayByValue<AcpiTableHeader, 0>
}

@struct @packed
class Acpi20 {
	var length UInt32
	var xsdtAddress XSDT
	var checksum UInt8
	var reserved ArrayByValue<UInt8, 3>
}

@struct @packed
class Acpi10 {
	var signature ArrayByValue<UInt8, 8>
	var checksum UInt8
	var oemID ArrayByValue<UInt8, 6>
	var revision UInt8
	var rsdtAddress UInt32
}

@struct @packed
class ACPI {
	var acpi10 ByValue<Acpi10>
	var acpi20 ByValue<Acpi20>
}

// TODO
fun acpiTableEntries<T>(t T, size UInt64) UInt64 {
	return 0 // (t.header.length - sizeOf<T>()) / size
}

fun acpiTableEntriesXSDT(t XSDT, size UInt64) UInt64 {
	return (t.header.ref.length - sizeOf<XSDT>()) / size
}

fun acpiTableEntriesAcpiMcfg(t AcpiMcfg, size UInt64) UInt64 {
	return (t.header.ref.length - sizeOf<AcpiMcfg>()) / size
}

// TODO
fun acpiValidate<T>(t T) Bool {
	// TODO `return t.header.validate(T.typeId)`
	return true
}

fun acpiValidateXSDT(t XSDT) Bool {
	// TODO `return t.header.validate(T.typeId)`
	return true
}

fun putSig(into ArrayPointer<UInt8>, type AcpiTypeId) Void {
	let typeId ArrayByValue<UInt32, 1> = [type as! UInt32]
	let typeRef = typeId.ref as! ArrayPointer<UInt8>
	for j in 4 {
		into[j] = typeRef[j]
	}
}

@inline
fun busAddr(bus UInt8, device UInt8, func UInt8) UInt16 {
	return bus << 8 | device << 3 | func
}

@struct
class PciGroup {
	var group UInt16
	var busStart UInt16
	var busEnd UInt16
	var base ArrayPointer<UInt32>

	fun baseFor(bus UInt8, device UInt8, func UInt8) ArrayPointer<UInt32> {
		return (base as! UInt64 + busAddr(bus, device, func) << 12) as! ArrayPointer<UInt32>
	}

	fun hasDevice(bus UInt8, device UInt8, func UInt8) Bool {
		return (baseFor(bus, device, func)[0] & 0xffff) != 0xffff
	}
}

class ACPIParser {
	static fun parse(acpiVendorTable UInt64) Bool {
		serialPrint("[ACPI] parsing started at physical ")
		serialPrintHex(acpiVendorTable as! UInt64)
		serialPrint("\n")

		if acpiVendorTable == 0 {
			serialPrintln("[ACPI] not present at all")
			return false
		}

		var acpiTable = physicalToVirtual(acpiVendorTable) as! ACPI

		var acpi10 = acpiTable.acpi10

		serialPrint("[ACPI] signature is '")

		for i in sizeOf<ArrayByValue<UInt8, 8> >() {
			putChar(acpi10.ref.signature[i])
		}

		serialPrint("'\n")

		serialPrintf("[ACPI] revision is %d\n", acpi10.ref.revision)

		// TODO ensure \0 at end of array
		var signature ArrayByValue<UInt8, 9> = "RSD PTR "

		// TODO sizeOf accepts 0 args! `for i in sizeOf(acpi10.ref.signature) {`
		for i in sizeOf<ArrayByValue<UInt8, 8> >() {
			if acpi10.ref.signature[i] != signature[i] {
				serialPrintln("[ACPI] RSDP table signature is incorrect")
				return false
			}
		}

		var checksum UInt8 = 0

		for i in sizeOf<Acpi10>() {
			checksum += (acpi10 as! ArrayPointer<UInt8>)[i]
		}

		if checksum != 0 {
			serialPrintln("[ACPI] checksum ACPI 1.0 failed")
			return false
		}

		let acpi20data = acpiTable.acpi20 as! Acpi20
		let acpi20raw = acpi20data as! ArrayPointer<UInt8>
		checksum = 0

		for i in sizeOf<Acpi20>() {
			checksum += (acpi20raw)[i]
		}

		if checksum != 0 {
			serialPrintln("[ACPI] checksum ACPI 2.0 failed")
			return false
		}

		// TODO `Physical.toVirtual()` helper
		var xsdt = (acpiTable.acpi20.ref.xsdtAddress as! UInt64 + wholePhysicalStart) as! XSDT

		loadXsdt(xsdt)

		serialPrintln("[ACPI] loaded")
		return true
	}

	static /*TODO private*/ fun physicalToVirtual(physical UInt64) UInt64 {
		var result UInt64 = (wholePhysicalStart as! UInt64) + (physical as! UInt64)
		return result
	}

	static fun dump32(msg ConstArrayPointer<UInt8>, virtualAddress ConstArrayPointer<UInt8>) {
		serialPrintf("\n[DUMP] %s: ", msg)
		let x = virtualAddress as! ArrayPointer<UInt8>
		let y = virtualAddress as! ArrayPointer<UInt8>

		for j in 8 {
			var buffer ArrayByValue<UInt16, 2> = [0, 0]
			buffer[0] = (y[j] == 0 or y[j] < 32) ? '?'.charCodeAt(0) as! UInt8 : x[j]
			buffer[1] = 0 as! UInt8
			serialPrint(String.fromUTF16z(buffer.ref as! ConstArrayPointer<UInt16>))
		}

		serialPrint("\n")
	}

	static fun loadXsdt(xsdt XSDT) {
		if xsdt == null {
			return
		}

		serialPrintf("[ACPI] acpiValidate(xsdt) %d\n", acpiValidateXSDT(xsdt))

		var sig ArrayByValue<UInt8, 5> = [0, 0, 0, 0, 0]
		serialPrintf("[ACPI] ACPI 2.0+ tables loading\n")
		putSig(sig.ref, xsdt.header.ref.type)
		serialPrintf("[ACPI] Found table %s\n", sig.ref)
		quakePrintf("[ACPI] Found table %s, ".utf16(), sig.ref)

		var numTables UInt64 = acpiTableEntriesXSDT(xsdt, 8)
		serialPrintf("[ACPI] acpiTableEntries %d\n", numTables)

		for i in numTables {
			var header = physicalToVirtual((xsdt.headers[i] as! UInt64)) as! AcpiTableHeader

			putSig(sig.ref, header.type)
			serialPrintf("[ACPI] Found table %s\n", sig)
			quakePrintf("found table %s, ".utf16(), sig)

			// TODO this validation is nonsense
			serialPrintf("[ACPI] acpiValidate(header) %d\n", header.validate(header.type))

			switch header.type {
			case APIC:
				loadApic(header as! AcpiApic)
				break

			case MCFG:
				loadMcfg(header as! AcpiMcfg)
				break

			case _:
				break
			}
		}

		quakePrintf("done.\n".utf16())
	}

	static fun loadApic(apic AcpiApic) {
		var local ArrayPointer<UInt32> = (apic.localAddress) as! ArrayPointer<UInt32>
		serialPrintf("loadApic\n")
	}

	static fun loadMcfg(mcfg AcpiMcfg) {
		serialPrintf("loadMcfg\n")
		var count UInt64 = acpiTableEntriesAcpiMcfg(mcfg, sizeOf<AcpiMcfgEntry>()) // TODO sizeOf must error
		var mPci [PciGroup] = []

		for i in count {
			let mcfge = mcfg.entries[i].ref

			mPci[i].group = mcfge.group
			mPci[i].busStart = mcfge.busStart
			mPci[i].busEnd = mcfge.busEnd
			mPci[i].base = (mcfge.base) as! ArrayPointer<UInt32>

			var busses Int32 = mPci[i].busEnd - mPci[i].busStart + 1
		}

		probePci(mPci, count)
	}

	static fun multi(group PciGroup, bus UInt8, device UInt8, func UInt8) Bool {
		// TODO ^ proper name
		var mBase ArrayPointer<UInt32> = group.baseFor(bus, device, func)
		var mMulti = ((mBase[3] >> 16) & 0x80) == 0x80
		return mMulti
		// TODO ^ proper name
	}

	static fun probePci(mPci [PciGroup], count UInt64) {
		serialPrintf("[PCI] probePci\n")
		for i in count {
			var pci = mPci[i]
			for bus in pci.busStart ... pci.busEnd + 1 {
				for dev in 32 {
					// TODO
				}
			}
		}
	}
}

// Management

/// `false` if failed to do so
/// TODO `poweroff` quake command
fun shutdownComputer() Bool {
	return false
}

/// `false` if failed to do so
/// TODO `reboot` quake command
fun rebootComputer() Bool {
	return false
}
