// The Tofita Kernel
// Copyright (C) 2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

@rename('stbi_load_from_memory')
@deep
@noGenerate
declare fun stbi_load_from_memory(
	data: ArrayPointer<UInt8>,
	size: UInt32,
	width: ArrayPointer<Int32>,
	height: ArrayPointer<Int32>,
	bpp: ArrayPointer<Int32>,
	bytes: Int32
): ArrayPointer<UInt8>

fun loadPng32FromBuffer(data: ArrayPointer<UInt8>, size: UInt32): Bitmap32 {
	// TODO better idea, like `ArrayByValue` or just `ByValue`?
	var width: ArrayByValue<Int32, 1> = [0]
	var height: ArrayByValue<Int32, 1> = [0]
	var bpp: ArrayByValue<Int32, 1> = [0]

	var colors: ArrayPointer<UInt8> = stbi_load_from_memory(
		data,
		size,
		width.ref,
		height.ref,
		bpp.ref,
		4
	)

	let width = width[0]
	let height = height[0]
	let bpp = bpp[0]
	// TODO validate bpp

	serialPrintln("<Tofita> loadPng32FromBuffer before allocateBitmap")

	// TODO should error due to data loss `ArrayByValue<Int32, 1> as! UInt32` `var bitmap: Bitmap32 = allocateBitmap(width as! UInt32, height as! UInt32)`
	var bitmap: Bitmap32 = allocateBitmap(width as! UInt32, height as! UInt32)

	serialPrintln("<Tofita> loadPng32FromBuffer before rgba")
	var rgba: ArrayPointer<UInt32> = colors as! ArrayPointer<UInt32>
	for y in height {
		for x in width {
			bitmap.pixels[y * width + x].ref.color = rgba[y * width + x]
			// This should be fixed in framebuffer? Or PNG really BGRA?
			var temp: UInt8 = bitmap.pixels[y * width + x].ref.rgba.ref.r
			bitmap.pixels[y * width + x].ref.rgba.ref.r = bitmap.pixels[y * width + x].ref.rgba.ref.b
			bitmap.pixels[y * width + x].ref.rgba.ref.b = temp
		}
	}

	return bitmap
}

fun loadPng32(asset: RamDiskAsset): Bitmap32 {
	return loadPng32FromBuffer(asset.data, asset.size)
}
