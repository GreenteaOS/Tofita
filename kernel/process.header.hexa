// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// TODO use Thread instead of TofitaProcess for easier scheduling & syscalls
// and threads will have parentPID and that's
// so we don't have linked list of threads per process
@struct
// TODO just a class, not struct
class TofitaProcess {
	// Is process exists at all and fully initialized
	@volatile var present Bool
	// TODO SoA

	// Index
	@volatile var pid UInt64

	// Is it allowed to make this process current
	@volatile var schedulable Bool
	// TODO combine booleans into bit/flag mask?

	// Should be false after creation
	@volatile var scheduleOnNextTick Bool

	// CR3, should be page aligned
	@volatile var pml4 ArrayPointer<ByValue<PageEntry>>

	// State
	var frame InterruptFrame

	// Filled on #PF
	@volatile var cr2PageFaultAddress UInt64

	// When syscall happens, process halted and handled retroactively
	// in the kernel's event loop
	@volatile var syscallToHandle TofitaSyscalls // = Noop if no actions required
													  // TODO do this on per-thread basis

	// TODO separate syscall arguments, cause they differ in 32-bit
	// TODO syscall *optional* return value? not every syscall does
	// oh probably

	// Ring buffer
	var messages [Msg]
	var messagesUsed UInt64
	var awaitsGetMessage Bool
	// TODO Bool wmQuit/wmPaint for lowest-priority must-never-lost messages

	// 32-bit
	var is64bit Bool
	var limits AddressAwareness
	var name String

	new () {}
}

/// List of all processes
let processes [TofitaProcess] = []

// TODO must use locking for sane SMP
fun appendProcess(process TofitaProcess) {
	if processes.includes(process) {
		quakePrintf("Process '%S' is added twice to the scheduler, this is a bug\n".utf16(), process.name.utf16())
		return
	}

	// TODO note `null`, handling of `T?` should be fixed in the `array.hexa`
	let emptySlot = processes.indexOf(null)
	if emptySlot != -1 {
		processes[emptySlot] = process
		return
	}

	processes.push(process)
}

// TODO split processes to threads

// Working process pid, with restored state and active CR3
// TODO convert to TLS
@volatile var currentProcess UInt64 = 0
