// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// CRT
fun memzero(dest ArrayPointer<UInt8>, len UInt64) {
	memset(dest, 0, len)
}

// Clang workaround
@keep
@rename('___chkstk_ms')
fun chkstkStub() Void {}

// Hexa definitions
@extern @rename('versionMajor') declare let versionMajor Int
@extern @rename('versionMinor') declare let versionMinor Int
@extern @rename('versionTag') declare let versionTag Int

/// Entry point from trampoline.asm
fun kernelInit(params UefiPayload) {
	serialPrintln("<Tofita> Greentea OS " + versionMajor + "." + versionMinor + "." + versionTag + " kernel loaded and operational")
	serialPrintf("<Tofita> CR3 points to: %8\n", params.pml4 as! UInt64)
	// TODO `anyPtrOrObj as! UInt32` -> error precision lost on 64-bit
	paramsCache = params
	PhysicalAllocator.init(params)
	// Ensure to allocate within 1 MB
	PhysicalAllocator.resetCounter()
	let trapezePadding = PhysicalAllocator.allocateOnePage()
	// TODO ^ rename to "first reserved 4k"? Does it even works like that? Clarify in comments
	let trapeze = PhysicalAllocator.allocatePages(8) // Bootloader
	let trapezePhysical = trapeze - (wholePhysicalStart as! UInt64)

	pml4entries = ((wholePhysicalStart as! UInt64) + (params.pml4 as! UInt64)) as! ArrayPointer<ByValue<PageEntry>>

	// CPU features
	{
		// Page Attribute Table (PAT)
		// TODO SMP enable PAT for each AP
		pat()
	}

	// TODO move to kernel\health\sanityChecks.hexa
	if false /*not SanityChecks.isVirtualMemoryOkay() { error }*/ {
		mapMemory(pml4entries, 4096, 4096, 256, accessibleByUser: false)
		mapMemory(pml4entries, 4096, 4096, 256, accessibleByUser: false)
		mapMemory(pml4entries, 4096 * 20u64, 4096 * 10u64, 256, accessibleByUser: false)

		serialPrintf("<> %8 == %8\n", (4096u64 * 10),
					 resolveAddr(pml4entries, 4096u64 * 20))
		serialPrintf("<> %8 == %8\n", (4096 * 10 + 123),
					 resolveAddr(pml4entries, 4096u64 * 20 + 123))
		serialPrintf("<> %8 == %8\n", (0),
					 resolveAddr(pml4entries, (wholePhysicalStart as! UInt64)))
		serialPrintf("<> %8 == %8\n", (0 + 123),
					 resolveAddr(pml4entries, (wholePhysicalStart as! UInt64) + 123))
		serialPrintf("<> %8 == %8\n", (0 + 4096),
					 resolveAddr(pml4entries, (wholePhysicalStart as! UInt64) + 4096))
		serialPrintf( // TODO hint that (wholePhysicalStart as! UInt64) useless cause it is same T already
			"<> %8 == %8\n", (0 + 4096 * 1000 + 123),
			resolveAddr(pml4entries, (wholePhysicalStart as! UInt64) + 4096 * 1000 + 123))
		serialPrintf("<> %8 == %8\n", (1048576),
					 resolveAddr(pml4entries, 0xffff800000000000u64))
		serialPrintf("<> %8 == %8\n", (1048576 + 123),
					 resolveAddr(pml4entries, 0xffff800000000000u64 + 123))

		// TODO move all these to SanityCheck module
		// serialPrint("resolves from, to, wh, wh+8888: ")
		// serialPrint("\n")
		// serialPrintHex(4096 * 10)
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr(4096 * 20 + 123))
		// serialPrint("==\n")
		// serialPrintHex(pages.resolveAddr(4096 * 20))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr((wholePhysicalStart as! UInt64)))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr((wholePhysicalStart as! UInt64) + 8888))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr((wholePhysicalStart as! UInt64) + 4096 * 1000))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr(0xffff800000000000))
		// serialPrint("\n")
	}

	setFramebuffer(params.framebuffer.ref)
	setRamDisk(params.ramdisk.ref)

	// TODO >>
	// TODO move to SanityCheck
	// TODO this seems not to work?!
	if sizeOf<ArrayPointer<UInt8> >() == 4 {
		serialPrintln("<Tofita> void*: 4 bytes")
		// TODO QSOD
	} else {
		// Ok
	}
	if sizeOf<ArrayPointer<UInt8> >() == 8 {
		serialPrintln("<Tofita> void*: 8 bytes")
		// Ok
	} else {
		// TODO QSOD
	}

	// disablePic() TODO should be disabled after APIC
	setupInterruptsAndExceptions()
	// TODO rename to initializeInterrupts()
	enablePS2Mouse()

	initText()
	versionText = "Development copy. Build " + versionMajor + "." + versionMinor + "." + versionTag
	initializeCompositor()
	defaultSession.resize()

	serialPrintln("<Tofita> quakePrintf(versionText.utf16())")
	let versionText = "Greentea OS " + versionMajor + "." + versionMinor + "." + versionTag + " is loaded and operational\n"
	quakePrintf(versionText.utf16())

	// TODO enableLocalApic()

	var cpuid CPUID = getCPUID()

	var megs Int32 = Math.round(params.ramBytes / (1024.0 * 1024.0))
	quakePrintf("[CPU] %s %s %d MB RAM\n".utf16(), cpuid.vendorID, cpuid.brandName, megs)

	if trapezePhysical > 1068032 {
		// TODO exact address should be 0x8000u64?
		serialPrintln("<Tofita> cannot allocate trapeze under 1 MB")
		qsod("Cannot allocate trapeze under 1 MB, got at %8\n".utf16(), trapezePhysical, 0)
		while true {}
		// TODO test by >1 if it even renders this message
	}

	// SMP trapeze
	{
		var asset RamDiskAsset = new RamDiskAsset()
		getRamDiskAsset(asset, "trapeze.tofita")
		serialPrintf("Copy trapeze %d bytes\n", asset.size)
		let trapeze = 0x8000u64 + (wholePhysicalStart as! UInt64)
		// TODO why fixed address here? Wasn't it updated at BSP code?
		tmemcpy(trapeze as! ArrayPointer<UInt8>, asset.data as! ConstArrayPointer<UInt8>, asset.size)
	}

	// disablePic() TODO may be required before activation
	if not ACPIParser.parse(params.acpiTablePhysical) {
		quakePrintf("ACPI is *not* loaded, probably incompatible motherboard or outdated BIOS\n".utf16())
	} else {
		quakePrintf("ACPI 2.0 is loaded and ready\n".utf16())
	}

	quakePrintf("\nHere you may toggle experimental features and see some internal information (for developers)\n".utf16())
	quakePrintf("Enter 'help' for commands or press ~ to hide this window\n".utf16())

	{
		// TODO move to compositor/DWM
		var a RamDiskAsset = new RamDiskAsset()
		getRamDiskAsset(a, "root/Windows/Web/Wallpaper/Tofita/default.png")
		wallpaperSource = loadPng32(a)
		// TODO var bmp Bitmap32 = loadBitMap24(Buffer.fromBytes(a.data))
		// ^ Buffer should not create a copy of data
		setWallpaper(wallpaperSource, WallpaperStyle.Center)
	}

	// TODO var sandbox = sandbox.createSandbox()
	initDwm()

	// Setup scheduling
	currentThread = ThreadKind.THREAD_INIT

	// GUI thread
	{
		memset(guiThreadFrame as! ArrayPointer<UInt8>, 0, sizeOf<InterruptFrame>()) // Zeroing TODO sizeOf
		memset(guiStack.ref, 0, stackSizeForKernelThread) // Zeroing
		// TODO allocate stack with PhyAllocator

		guiThreadFrame.ip = guiThreadStart as! UInt64
		guiThreadFrame.cs = Selector.SYS_CODE64_SEL
		// TODO allocate as physical memory
		guiThreadFrame.sp = guiStack.ref as! UInt64 + stackSizeForKernelThread
		guiThreadFrame.ss = Selector.SYS_DATA32_SEL
	}

	// Main thread
	{
		// TODO InterruptFrame.fillWithZeros() in constructor
		memset(kernelThreadFrame as! ArrayPointer<UInt8>, 0, sizeOf<InterruptFrame>()) // Zeroing
		memset(kernelStack.ref, 0, stackSizeForKernelThread) // Zeroing

		kernelThreadFrame.ip = kernelThreadStart as! UInt64
		kernelThreadFrame.cs = Selector.SYS_CODE64_SEL
		kernelThreadFrame.sp = kernelStack as! UInt64 + stackSizeForKernelThread
		kernelThreadFrame.ss = Selector.SYS_DATA32_SEL
	}

	// Idle process
	{
		// TODO must error `sizeOf(processes)`
		// processes[0] = new TofitaProcess()
		// TODO optimizer: set Array.capacity to 256 upfront cause known value `for i in 256 { arr[i] =`

		// TODO this is entirely useless
		for i in windowsLimit {
			// TODO ^ remove this limit
			let window = new OverlappedWindow()
			window.present = false
			windowsList[i] = window
		}

		// TODO make a kernel a process too with ultimate priority
		// TODO process.name = "Tofita"
		// TODO idle process must have NxN threads, thread per CPU core?
		let idle TofitaProcess = new TofitaProcess()
		appendProcess(idle)
		idle.frame = new InterruptFrame()
		idle.pml4 = pml4entries // Save CR3 template to idle process
		idle.schedulable = true // At idle schedule to idle process
		idle.present = true
		idle.syscallToHandle = TofitaSyscalls.Noop
		idle.name = "System"
		// TODO idle.name = "System Idle Process"
		// TODO idle.name = "Tofita"? is idle process really required?
		currentProcess = 0
		pml4kernelThread = processes[0].pml4
	}

	// GUI
	// TODO should be done at main thread
	// TODO use some kind of autorun.ini asset
	if true {
		for i in 3
		{
			let guiProcess TofitaProcess = processCreate() // TODO just `new` and no `@struct`
			serialPrintf("<Tofita> GUI process ID == %u\n", guiProcess.pid)
			processInit(guiProcess)
			disableSerial = 1
			// TODO `@defer disableSerial = 0` <- `@` must have the lowest priority?
			if i == 1 {
				loadExeIntoProcess("desktop/wndapp32.exe", guiProcess)
				guiProcess.name = "wndapp32.exe"
			} else {
				loadExeIntoProcess("desktop/wndapp.exe", guiProcess)
				guiProcess.name = "wndapp.exe"
			}

			disableSerial = 0
			// TODO loadExeIntoProcess(""root/Windows/GreenteaGUI.exe", guiProcess)
			// TODO guiProcess.name = "Greentea OS GUI"
			guiProcess.schedulable = true
		}
	}

	startupMilliseconds = paramsCache.time.ref.hour * 60 * 60 * 1000 + paramsCache.time.ref.minute * 60 * 1000 +
						  paramsCache.time.ref.second * 1000u64

	// Show something before scheduling delay
	composite(startupMilliseconds)
	copyToScreen()
	serialPrintln("<Tofita> [ready for scheduling]")
	// TODO must disable scheduler until this function exits
	// ^ currentThread = ThreadKind.THREAD_NOT_READY
}

@rename('__sync_synchronize')
declare fun __sync_synchronize() Void

fun kernelMain(params UefiPayload) {
	kernelInit(params)

	// This is probably useless but looks cool
	__sync_synchronize()

	// TODO composite here first frame!!!
	// cause if crashes on hardware, at least it shows something

	// sti -> start scheduling here
	// It will erase whole stack on next scheduling
	// TODO kernel `yield`/`await`
	// TODO de-allocate pre-thread after first yield
	while true {
		enableAllInterruptsAndHalt()
	}
	// TODO hexa: error if code present in unreachable block
	// (no break/continue/throw)
}

// Data passed from UEFI
@rename('kernelParams') declare let kernelParams UefiPayload

// Entry point of the project
kernelMain(kernelParams)
