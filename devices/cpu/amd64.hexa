// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// AMD64 assembly instructions wrapper

@customHeader('
	inline void amd64cpuid(uint32_t leaf, uint32_t subLeaf, uint32_t *eax, uint32_t *ebx, uint32_t *ecx,
						uint32_t *edx) {
		uint32_t a, b, c, d;
		asm volatile("cpuid" : "=a"(a), "=b"(b), "=c"(c), "=d"(d) : "a"(leaf), "c"(subLeaf));
		*eax = a;
		*ebx = b;
		*ecx = c;
		*edx = d;
	}
')
@rename('amd64cpuid')
declare fun cpuid(
	leaf: UInt32,
	subLeaf: UInt32,
	eax: ArrayPointer<UInt32>,
	ebx: ArrayPointer<UInt32>,
	ecx: ArrayPointer<UInt32>,
	edx: ArrayPointer<UInt32>
): Void
/* {
	var a: UInt32 = 0
	var b: UInt32 = 0
	var c: UInt32 = 0
	var d: UInt32 = 0
	// asm volatile("cpuid" : "=a"(a), "=b"(b), "=c"(c), "=d"(d) : "a"(leaf), "c"(subleaf))
	// TODO to cpu.asm
	eax[0] = a
	ebx[0] = b
	ecx[0] = c
	edx[0] = d
}*/

/// Note: this also a way to clear TLB cache even if cr3 not switched to another
@rename('writeCr3') // TODO rename didn't work
@emitHeader @linkAsIs
declare fun writeCr3(value: UInt64): Void

// TODO asm("invd")
@rename('halt')
@emitHeader @linkAsIs
declare fun halt(): Void

@rename('enableAllInterrupts')
@emitHeader @linkAsIs
declare fun enableAllInterrupts(): Void

// Except non-maskable
@rename('disableAllInterrupts')
@emitHeader @linkAsIs
declare fun disableAllInterrupts(): Void

@rename('enableAllInterruptsAndHalt')
@emitHeader @linkAsIs
declare fun enableAllInterruptsAndHalt(): Void

@rename('pause')
@emitHeader @linkAsIs
declare fun pause(): Void

@rename('yield')
@emitHeader @linkAsIs
declare fun yield(): Void

/*
// TODO support `enum class` in hexa cpp codegen `enum class MSR : uint32_t {`
enum MSR {
	IA32_APIC_BASE = 27,
};

uint64_t rdmsr(enum MSR addr) {
	uint32_t low, high;
	__asm__ __volatile__ ("rdmsr" : "=a"(low), "=d"(high) : "c"(addr));
	return ((uint64_t)(high) << 32) | low;
	// return (static_cast<uint64_t>(high) << 32) | low;
}

void wrmsr(enum MSR addr, uint64_t value) {
	uint32_t low = value & 0xffffffff;
	uint32_t high = value >> 32;
	__asm__ __volatile__ ("wrmsr" :: "c"(addr), "a"(low), "d"(high));
}
*/
