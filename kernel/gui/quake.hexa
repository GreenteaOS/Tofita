// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Quake-style console with ~

var quakeHeight: UInt8 = 255
var quakeCommand[256]: Char8 = {0}
var quakeLines[17][256]: Char8 = {0}
var quakeLine: UInt8 = 0
var quakeRow: UInt8 = 0
var quakeAdvance: Float = 0.0
var quakeCommandSize: UInt8 = 0

fun quakePrintf(const c: Pointer<WideChar>, ...)

fun quake() {
	if (haveToQuake == 0) {
		return
	}

	drawVibrancedRectangle(0, 0, _framebuffer.width, quakeHeight)
	var color: Pixel32
	color.color = 0x126099FF
	lineHorizontal(color, 0, quakeHeight, _framebuffer.width)
	// color.rgba.r = color.rgba.g = color.rgba.b = 48
	color.rgba.r = color.rgba.g = color.rgba.b = 0xDD
	var x = drawAsciiText(quakeCommand, 2, quakeHeight - 14, color)
	drawAsciiText(u8"|", x + 2, quakeHeight - 15, color)

	for (var i = 0; i < 17; i++) {
		drawAsciiText(quakeLines[i], 2, i * 14 + 2, color)
	}
}

fun quakeHandleButtonDown(key: UInt8) {
	serialPrintf("quakeHandleButtonDown %d\n", key)

	if (keyboardMap[key] == '\b' && quakeCommandSize > 0) {
		quakeCommand[quakeCommandSize - 1] = 0
		quakeCommandSize--
	}

	if (keyboardMap[key] == '\n' && quakeCommandSize > 0) {
		if (quakeCommand[0] == 'r' && quakeCommand[1] == 'e') {
			@extern const KernelParams *paramsCache
			quakePrintf("Doing hot reload. Note: this log may be persistent between hot reloads\n")
			var start: InitKernel = (InitKernel)kernelVirtualBase
			start(paramsCache) // TODO pml4, stack
		} else if (quakeCommand[0] == 'd' && quakeCommand[1] == 'a') {
			// Dark theme
			// TODO
		} else if (quakeCommand[0] == 'l' && quakeCommand[1] == 'i') {
			// Light theme
			// TODO
		} else if (quakeCommand[0] == 'h' && quakeCommand[1] == 'e') {
			quakePrintf("Hit `~` to show/hide this terminal\n", quakeCommand)
			quakePrintf("Command 'reload' does quick kernel restart (without actual reboot). Note: this "
						"destroys all unsaved data and may crash the system!\n",
						quakeCommand)
		} else {
			quakePrintf("Command '%s' not supported\n", quakeCommand)
			quakePrintf("Enter 'help' for commands\n")
		}
		for (UInt8 i = 0; i < 255; i++)
			quakeCommand[i] = 0
		quakeCommandSize = 0
	}

	if ((keyboardMap[key] >= 'a' && keyboardMap[key] <= 'z') ||
		(keyboardMap[key] >= '0' && keyboardMap[key] <= '9') || (keyboardMap[key] == ' '))
		if (quakeCommandSize < 255) {
			quakeCommand[quakeCommandSize] = keyboardMap[key]
			quakeCommandSize++
		}

	serialPrintf("quake command is %s\n", quakeCommand)
}

fun qsod(const format: Pointer<WideChar>, extra: UInt64, const UInt64 more) {
	haveToQuake = 1
	quakePrintf("Kernel stopped working. Please, reboot.\n")
	quakePrintf(format, extra, more)
}

UInt8 *_quakeItoA(i: Int32, b[]: UInt8) {
	UInt8 const digit[] = "0123456789"
	var p: Pointer<UInt8> = b
	if (i < 0) {
		*p++ = '-'
		i *= -1
	}
	var shifter: Int32 = i
	do { // Move to where representation ends
		++p
		shifter = shifter / 10
	} while (shifter)
	*p = '\0'
	do { // Move back, inserting digits as u go
		*--p = digit[i % 10]
		i = i / 10
	} while (i)
	return b
}

fun _quake_newline() {
	quakeLine++
	quakeRow = 0
	quakeAdvance = 0.0
	if (quakeLine == 17) {
		// Move all lines upper
		quakeLine = 16
		for (var i = 0; i < 16; i++) {
			for (var k = 0; k < sizeof(quakeLines[i]); k++)
				quakeLines[i][k] = 0
			for (var k = 0; k < sizeof(quakeLines[i]); k++)
				quakeLines[i][k] = quakeLines[i + 1][k]
		}
		for (var i = 0; i < sizeof(quakeLines[16]); i++)
			quakeLines[16][i] = 0
	}
}

UInt8 __cdecl _quake_putchar(const UInt8 c) {
	Float getCharAdvance(const Char8 c)

	if (c != 0) {
		putchar(c) // Copy to serial log
		if (c == '\n') {
			_quake_newline()
			return c
		}
		quakeAdvance += getCharAdvance(c)
		if (quakeAdvance > _framebuffer.width) {
			_quake_newline()
			quakeAdvance = getCharAdvance(c)
		}
		quakeLines[quakeLine][quakeRow] = c
		quakeRow++
		if (quakeRow > 255)
			_quake_newline()
		return c
	}
	return EOF
}

Int32 _quake_puts(const string: Pointer<UInt8>) {
	var i: Int32 = 0
	while (string[i] != 0) {
		if (_quake_putchar(string[i]) == EOF) {
			return EOF
		}
		i++
	}
	return 1
}

fun quakePrintHex(n: UInt64) {
	_quake_puts((const UInt8 *)"0x")
	UInt8 buf[16], *bp = buf + 16
	for (Int32 i = 0; i < 16; i++)
		buf[i] = '0'
	do {
		bp--
		var mod: UInt8 = n % 16
		if (mod < 10) {
			*bp = '0' + mod
		} else {
			*bp = 'A' - 10 + mod
		}
		n /= 16
	} while (n != 0)
	for (Int32 i = 0; i < 16; i++)
		_quake_putchar(buf[i])
}

fun quakePrintf(const c: Pointer<WideChar>, ...) {
	var s: Pointer<UInt8>
	va_list lst
	va_start(lst, c)
	while (*c != '\0') {
		if (*c != '%') {
			_quake_putchar(*c & 0xFF)
			c++
			continue
		}

		c++

		if (*c == '\0') {
			break
		}

		switch (*c) {
		case 's':
			_quake_puts(va_arg(lst, UInt8 *))
			break
		case 'c':
			_quake_putchar(va_arg(lst, int32_t))
			break
		case 'd': {
			var value: Int32 = va_arg(lst, int32_t)
			var buffer[16]: UInt8
			for (UInt8 i = 0; i < 16; i++)
				buffer[i] = 0
			_quakeItoA(value, buffer)
			var c: Pointer<UInt8> = buffer
			while (*c != '\0') {
				_quake_putchar(*c)
				c++
			}
			break
		}
		case 'u': {
			var value: UInt32 = va_arg(lst, uint32_t)
			var buffer[16]: UInt8
			for (UInt8 i = 0; i < 16; i++)
				buffer[i] = 0
			_quakeItoA(value, buffer)
			var c: Pointer<UInt8> = buffer
			while (*c != '\0') {
				_quake_putchar(*c)
				c++
			}
			break
		}
		case '8': {
			var value: UInt64 = va_arg(lst, uint64_t)
			quakePrintHex(value)
			break
		}
		}
		c++
	}
}
