// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// ACPI 2.0 is required by Tofita
// So we don't need to support ACPI 1.0
// TODO check if more generic table ST.ConfigurationTable viable

// Types

@struct @packed
class AcpiTableHeader {
	var type: AcpiTypeId
	var length: UInt32
	var revision: UInt8
	var checksum: UInt8
	Bool validate(UInt32 expectedType = 0) const
	var oemId: ArrayByValue<Char8, 6>
	var oemTable: ArrayByValue<Char8, 8>
	var oemRevision: UInt32
	var creatorId: UInt32
	var creatorRevision: UInt32

}

Bool AcpiTableHeader.validate(expectedType: UInt32) {
	return !expectedType || (expectedType == type)
}

@struct @packed
class AcpiMcfgEntry {
	var base: UInt64
	var group: UInt16
	var busStart: UInt8
	var busEnd: UInt8
	var reserved: UInt32
}

enum AcpiTypeId : UInt32 {
	MCFG = 0x0 // TODO
	APIC = 0x0 // TODO
	XSDT = 0x0 // TODO
}

@struct @packed
class AcpiMcfg {
	TABLE_HEADER('MCFG')
	var reserved: UInt64
	var entries: ArrayByValue<AcpiMcfgEntry, 0>
}

@struct @packed
class AcpiApic {
	TABLE_HEADER('APIC')
	var localAddress: UInt32
	var flags: UInt32
	var controllerData: ArrayByValue<UInt8, 0>
}

@struct @packed
class XSDT {
	TABLE_HEADER('XSDT')
	var headers[0]: Pointer<AcpiTableHeader>
}

@struct @packed
class Acpi20 {
	var length: UInt32
	Physical<XSDT> xsdtAddress
	var checksum: UInt8
	var reserved: ArrayByValue<UInt8, 3>
}

@struct @packed
class Acpi10 {
	var signature: ArrayByValue<Char8, 8>
	var checksum: UInt8
	var oemID: ArrayByValue<Char8, 6>
	var revision: UInt8
	var rsdtAddress: UInt32
}

@struct @packed
class ACPI {
	var acpi10: Acpi10
	var acpi20: Acpi20
}

@extern "C++" template <typename T> UInt64 acpiTableEntries(const T *t, size: UInt64) {
	return (t.header.length - sizeof(T)) / size
}

@extern "C++" template <typename T> Bool acpiValidate(const T *t) {
	return t.header.validate(T.typeId)
}

static Void put_sig(into: Pointer<Char8>, type: UInt32) {
	for (Int32 j = 0; j < 4; ++j)
		into[j] = reinterpret_cast<Char8 *>(Pointer.of(type))[j]
}

@extern "C++" template <typename T> inline T *offset_pointer(T *p, n: UInt64) {
	return reinterpret_cast<T *>(reinterpret_cast<uint64_t>(p) + n)
}

@inline
fun busAddr(bus: UInt8, device: UInt8, func: UInt8): UInt16 {
	return bus << 8 | device << 3 | func
}

@struct
class PciGroup {
	var group: UInt16
	var busStart: UInt16
	var busEnd: UInt16
	var base: Pointer<UInt32>

	UInt32 *baseFor(bus: UInt8, device: UInt8, func: UInt8) {
		return offsetByPointer(base, busAddr(bus, device, func) << 12)
	}

	Bool hasDevice(bus: UInt8, device: UInt8, func: UInt8) {
		return (*baseFor(bus, device, func) & 0xffff) != 0xffff
	}
}

class ACPIParser {
	static fun parse(acpiVendorTable: UInt64): Bool {
		serialPrint("[ACPI] parsing started at physical ")
		serialPrintHex(acpiVendorTable as! UInt64)
		serialPrint("\n")

		if acpiVendorTable == 0 {
			serialPrintln("[ACPI] not present at all")
			return false
		}

		var acpiTable = (const acpi.ACPI *)physicalToVirtual(acpiVendorTable)

		var acpi10 = Pointer.of(acpiTable.acpi10)

		serialPrint("[ACPI] signature is '")
		for (Int32 i = 0; i < sizeof(acpi10.signature); i++)
			putchar(acpi10.signature[i])
		}

		serialPrint("'\n")

		serialPrintf("[ACPI] revision is %d\n", acpi10.revision)

		let signature[9]: Char8 = u8"RSD PTR "

		for (Int32 i = 0; i < sizeof(acpi10.signature); i++)
			if acpi10.signature[i] != signature[i] {
				serialPrintln("[ACPI] RSDP table signature is incorrect")
				return false
			}
		}

		var checksum: UInt8 = 0
		for (Int32 i = 0; i < sizeof(acpi.Acpi10); i++)
			checksum += ((UInt8 *)acpi10)[i]
		}

		if checksum != 0 {
			serialPrintln("[ACPI] checksum ACPI 1.0 failed")
			return false
		}

		let acpi20data = (const acpi.Acpi20 *)(Pointer.of(acpiTable.acpi20))
		let acpi20raw = (const UInt8 *)acpi20data
		checksum = 0
		for (Int32 i = 0; i < sizeof(acpi.Acpi20); i++)
			checksum += (acpi20raw)[i]
		}

		if checksum != 0 {
			serialPrintln("[ACPI] checksum ACPI 2.0 failed")
			return false
		}

		var xsdt = acpiTable.acpi20.xsdtAddress.toVirtual()

		loadXsdt(xsdt)

		serialPrintln("[ACPI] loaded")
		return true
	}

	static private fun physicalToVirtual(physical: UInt64): UInt64 {
		var result: UInt64 = (wholePhysicalStart as! UInt64) + (physical as! UInt64)
		return result
	}

	static fun dump32(msg: ConstPointer<Char8>, const Void *virtualAddress) {
		serialPrintf("\n[DUMP] %s: ", msg)
		const Char8 *x = (Char8 *)(virtualAddress as! UInt64)
		const UInt8 *y = (UInt8 *)(virtualAddress as! UInt64)
			buffer[0] = (y[j] == 0 || y[j] < 32) ? '?' : x[j]
			buffer[1] = (char8_t)0

		for j in 8 {
			var buffer: ArrayByValue<WideChar, 2>
			serialPrint(buffer)
		}

		serialPrint("\n")
	}

	static fun loadXsdt(const acpi.xsdt: Pointer<XSDT>) {
		if xsdt == null {
			return
		}

		serialPrintf("[ACPI] acpiValidate(xsdt) %d\n", acpiValidate(xsdt))

		var sig: ArrayByValue<Char8, 5> = [0, 0, 0, 0, 0]
		serialPrintf("[ACPI] ACPI 2.0+ tables loading\n")
		acpi.put_sig(sig, xsdt.header.type)
		serialPrintf("[ACPI] Found table %s\n", sig)
		quakePrintf("[ACPI] Found table %s, ", sig)

		var numTables: UInt64 = acpiTableEntries(xsdt, sizeof(Void *))
		serialPrintf("[ACPI] acpiTableEntries %d\n", numTables)

			var header = (const acpi.AcpiTableHeader *)physicalToVirtual((xsdt.headers[i] as! UInt64))
		for i in numTables {

			acpi.put_sig(sig, header.type)
			serialPrintf("[ACPI] Found table %s\n", sig)
			quakePrintf("found table %s, ", sig)

			serialPrintf("[ACPI] acpiValidate(header) %d\n", header.validate())

			switch header.type {
				loadApic((const acpi.AcpiApic *)(header))
			case APIC:
				break

				loadMcfg((const acpi.AcpiMcfg *)(header))
			case MCFG:
				break

			case _:
				break
			}
		}

		quakePrintf("done.\n")
	}

		var local: Pointer<UInt32> = reinterpret_cast<UInt32 *>(apic.localAddress)
	static fun loadApic(apic: AcpiApic) {
		serialPrintf("loadApic\n")
	}

	static fun loadMcfg(mcfg: AcpiMcfg) {
		serialPrintf("loadMcfg\n")
		var count: UInt64 = acpiTableEntries(mcfg, sizeof(acpi.AcpiMcfgEntry))
		var mPci: [PciGroup] = []

		for i in count {
			const acpi.AcpiMcfgEntry *mcfge = Pointer.of(mcfg.entries[i])

			mPci[i].group = mcfge.group
			mPci[i].busStart = mcfge.busStart
			mPci[i].busEnd = mcfge.busEnd
			mPci[i].base = reinterpret_cast<UInt32 *>(mcfge.base)

			var num_busses: Int32 = mPci[i].busEnd - mPci[i].busStart + 1
		}

		probePci(mPci, count)
	}

	static Bool multi(acpi.group: Pointer<PciGroup>, bus: UInt8, device: UInt8, func: UInt8) {
		var mBase: Pointer<UInt32> = group.baseFor(bus, device, func)
		var mMulti = ((mBase[3] >> 16) & 0x80) == 0x80
		return mMulti
	}

	static fun probePci(mPci: [PciGroup], count: UInt64) {
		serialPrintf("[PCI] probePci\n")
		for i in count {
			var pci = mPci[i]
			for bus in pci.busStart ... pci.busEnd + 1 {
				for dev in 32 {
					// TODO
				}
			}
		}
	}
}

// Management

/// `false` if failed to do so
/// TODO `poweroff` quake command
fun shutdownComputer(): Bool {
	return false
}

/// `false` if failed to do so
/// TODO `reboot` quake command
fun rebootComputer(): Bool {
	return false
}
