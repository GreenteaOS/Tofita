// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun loadRamDiskFromVolume(
	bootsvc EFI_BOOT_SERVICES,
	root EFI_FILE_PROTOCOL,
	ramdisk RamDisk
) EFI_STATUS {
	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] begin\n")
	var name = "TOFITA.DAT"

	var file EFI_FILE_PROTOCOL = null
	var sfile ArrayByValue<EFI_FILE_PROTOCOL, 1> = []

	let status EFI_STATUS = root.open(
		root,
		sfile.ref,
		name.utf16() as! ArrayPointer<UInt16>,
		EFI_OpenMode.EFI_FILE_MODE_READ,
		EFI_FileAttribute.EFI_FILE_READ_ONLY | // TODO and
		EFI_FileAttribute.EFI_FILE_HIDDEN | // TODO and
		EFI_FileAttribute.EFI_FILE_SYSTEM
		// TODO `and not` operator to disable flags
	)

	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] done root.open\n")

	file = sfile[0]

	if status == EFI_STATUS.EFI_NOT_FOUND {
		serialPrintf("[[[uefi.loadRamDiskFromVolume]]] status EFI_NOT_FOUND\n")
		return status
	}

	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] status Open %d\n", status)

	// TODO `uint8_t info[sizeOf(efi::EFI_FILE_INFO) + 100];`
	// TODO `uint64_t infoSize = sizeOf(info);`
	let info = new EFI_FILE_INFO()
	// TODO Hexa: use not array here but ByValue<UInt64> or some other
	var infoSize ArrayByValue<UInt64, 1> = [4096]

	var genericFileInfo EFI_GUID = new EFI_FILE_INFO_ID()

	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] file.getInfo\n")
	let status = file.getInfo(file, genericFileInfo, infoSize.ref, info)
	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] status GetInfo %d\n", status)

	var size ArrayByValue<UInt64, 1> = [(info as! EFI_FILE_INFO).fileSize]
	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] FileSize %d\n", size[0])

	// TODO must error `size /` at `var sizeAlloc ArrayByValue<UInt64, 1> = [(size / pageSize + 1) * pageSize]`
	var sizeAlloc ArrayByValue<UInt64, 1> = [(size[0] / pageSize + 1) * pageSize]

	// Combined allocation for mem map
	sizeAlloc[0] += sizeOf<EFI_MEMORY_DESCRIPTOR>() * 512u64 + 4096u64

	var address ArrayByValue<UInt64, 1> = [0]
	let status = uefiAllocate(bootsvc, sizeAlloc.ref, address.ref)
	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] status: uefiAllocate %d, size %d at %d\n", status,
				 size[0], address)

	if status != EFI_STATUS.EFI_SUCCESS {
		return status
	}

	// TODO size.ref
	let status = file.read(file, size.ref, address[0] as! EFI_HANDLE)
	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] status Read %d\n", status)

	let status = file.close(file)
	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] status Close %d\n", status)

	var uints = address[0] as! ArrayPointer<UInt32>
	var checksize UInt64 = size[0] / 4 // `size` is rounded upto 4 bytes by assets generator
	var checksum UInt32 = 0

	for i in 1u64 ... checksize { // Start from 1, coz 0 contains original checksum
		checksum = uints[i] & 0xFFFF ^ checksum
	}

	serialPrintf("[[[uefi.loadRamDiskFromVolume]]] checksum: %d expected: %d\n", checksum, uints[0])
	if checksum != uints[0] {
		serialPrintln(
			"[[[uefi.loadRamDiskFromVolume]]] <ERROR> checksum is incorrect, disk may be corrupted!")
	}

	ramdisk.base = address[0] as! UInt64
	ramdisk.size = size[0]

	return EFI_STATUS.EFI_SUCCESS
}

// returns EFI_SUCCESS or EFI_NOT_FOUND
// ^ TODO encode this in the type itself or return `RamDisk?`
fun findAndLoadRamDisk(bootsvc EFI_BOOT_SERVICES, ramdisk RamDisk) EFI_STATUS {
	var status EFI_STATUS = EFI_STATUS.EFI_NOT_READY
	var handleBuffer ArrayPointer<ByValue<EFI_HANDLE>> = null // TODO `= nullPtr`
	var handleCount UInt64 = 0
	var handleCountStorage ArrayByValue<UINTN, 1> = [0]
	var handleBufferStorage ArrayByValue<EFI_HANDLE, 1> = [0]
	handleCountStorage[0] = handleCount
	handleBufferStorage[0] = handleBuffer[0].ref

	var simpleFileSystemProtocol EFI_GUID = new EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID()

	status = bootsvc.locateHandleBuffer(
		EFI_LOCATE_SEARCH_TYPE.ByProtocol,
		simpleFileSystemProtocol,
		0,
		handleCountStorage.ref,
		handleBufferStorage.ref
	)

	handleCount = handleCountStorage[0]
	handleBuffer = handleBufferStorage[0] as! ArrayPointer<ByValue<EFI_HANDLE>>

	if status != EFI_STATUS.EFI_SUCCESS {
		serialPrintf("[[[uefi.findAndLoadRamDisk]]] <ERROR> failed LocateHandleBuffer %d\n", status)
	} else {
		serialPrintf("[[[uefi.findAndLoadRamDisk]]] success LocateHandleBuffer, got %d handles\n",
					 handleCount)
	}

	for i in handleCount {
		serialPrintf("[[[uefi.findAndLoadRamDisk]]] loading handle #%d of %d handles\n", i, handleCount)
		// var fileSystem EFI_SIMPLE_FILE_SYSTEM_PROTOCOL = null // TODO should error cause non-nullable
		var fileSystemStorage ByValue<EFI_PHYSICAL_VOID> = new ByValue<EFI_PHYSICAL_VOID>()

		status = bootsvc.handleProtocol(
			handleBuffer[i],
			simpleFileSystemProtocol,
			fileSystemStorage.ref
		)

		let fileSystemStorages = fileSystemStorage as! ArrayPointer<EFI_SIMPLE_FILE_SYSTEM_PROTOCOL>
		var fileSystem EFI_SIMPLE_FILE_SYSTEM_PROTOCOL = fileSystemStorages[0]

		if status != EFI_STATUS.EFI_SUCCESS {
			serialPrintf(
				"[[[uefi.findAndLoadRamDisk]]] HandleProtocol got a non-file system (status %d, handle "
				+
				"%d), continue\n",
				status, i)
			continue
		}

		serialPrintln("[[[uefi.findAndLoadRamDisk]]] success HandleProtocol found a file system")
		var rootStorage ArrayByValue<EFI_FILE_PROTOCOL, 1> = [0]
		status = fileSystem.openVolume(fileSystem, rootStorage.ref)
		var root = rootStorage[0] as! EFI_FILE_PROTOCOL
		if status != EFI_STATUS.EFI_SUCCESS {
			serialPrintf("[[[uefi.findAndLoadRamDisk]]] failed OpenVolume with status %d, continue to "
						 +
						 "the next one\n",
						 status)
			continue
		}

		status = loadRamDiskFromVolume(bootsvc, root, ramdisk)
		if status != EFI_STATUS.EFI_SUCCESS {
			serialPrintf(
				"[[[uefi.findAndLoadRamDisk]]] failed: loadRamDiskFromVolume with status %d, continue "
				+
				"to the next one\n",
				status)
			continue
		}

		return EFI_STATUS.EFI_SUCCESS
	}

	serialPrintf("[[[uefi.findAndLoadRamDisk]]] <ERROR> failed to find RAM disk at all\n")
	return EFI_STATUS.EFI_NOT_FOUND
}
