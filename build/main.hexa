// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

let fs = require('fs')
let path = require('path')

// Removes folder recursively
fun deleteFolderRecursive(path, noRemoveSelf) {
	if fs.existsSync(path) {
		fs.readdirSync(path).forEach(fun(file, index) {
			let curPath = path + "\\" + file
			if fs.lstatSync(curPath).isDirectory() {
				deleteFolderRecursive(curPath)
			} else {
				fs.unlinkSync(curPath)
			}
		})
		// Fixes some random errors
		if noRemoveSelf != true {
			fs.rmdirSync(path)
		}
	}
}

let config: Config = JSON.parse(fs.readFileSync('config.json').toString())
let tasks: [String] = process.argv.slice()
let llvm = 'LLVM-12.0.0'
tasks.shift()
tasks.shift()
let teapot = config.teapot
let nasm = '\(teapot)\\nasm-2.14.02\\nasm'
let clang = '\(teapot)\\\(llvm)\\bin\\clang.exe'
let link = '\(teapot)\\\(llvm)\\bin\\lld-link.exe'
let xorriso = '\(teapot)\\xorriso-1.5.2\\xorriso.exe'
let mmd = '\(teapot)\\mtools\\mmd.exe'
let mcopy = '\(teapot)\\mtools\\mcopy.exe'

// NOTE Splitting into separate lines helps review process
let warn = if config.warnings {
	[
		"-Wall",
		"-Wextra",
		"-Werror",
		"-ferror-limit=1000"
	].join(' ')
} else {
	"-w"
} + ' '

// CPU support
let enabledFeatures = '-msse -msse2 -msse3 -mpopcnt -mcx16 -msahf -mprfchw '
// TODO 4.2?
let disabledFeatures = '-mno-ssse3 -mno-sse4a -mno-sse4.1 -mno-sse4.2 -mno-sse4 '

// Security and safety
let optimizationFeatures = '-O2 -fwrapv -fno-strict-aliasing -fno-strict-overflow -mtune=nocona '

let today = new Date()
let month = today.getMonth() + 1
let versionRolling = today.getFullYear() * 10000 + month * 100 + today.getDate()
let versionName = today.getFullYear() + '.' + month + '.' + today.getDate()

if tasks.length == 0 {
	console.log('No tasks defined')
}

for task in tasks {
	let folder = config.tempFolder + tea

	switch task {
		case 'init':
			{
				if not fs.existsSync(folder) {
					fs.mkdirSync(folder)
				}

				// Cleanup
				deleteFolderRecursive(folder, noRemoveSelf: true)
				fs.copyFileSync('assets\\tea.ico', folder + '\\icon.ico')
				fs.copyFileSync('desktop.ini', folder + '\\desktop.ini')
				require('child_process').execSync('cmd /c ATTRIB +S ' + folder, { stdio: 'inherit' })

				// Create directory tofita/iso/EFI/BOOT/
				let dirs = [
					path.sep + teaFolder,
					path.sep + 'iso',
					path.sep + 'EFI',
					path.sep + 'BOOT'
				]

				var path = config.tempFolder
				for dir in dirs {
					path += dir
					if not fs.existsSync(path) {
						fs.mkdirSync(path)
					}
				}

				// Assets
				let assets = folder + '\\iso\\TOFITA.DAT'
				if fs.existsSync(assets) {
					fs.unlinkSync(assets)
				}
			}
		case 'asm':
			{
				// CR3 TRAMPOLINE
				require('child_process').execSync(
					nasm + ' -f win64 -o ' +
					folder + '\\trampoline.o boot\\loader\\trampoline.asm', { stdio: 'inherit' }
				)

				require('child_process').execSync(
					nasm + ' -f win64 -o ' +
					folder + '\\tofita.asm.obj kernel\\all.asm', { stdio: 'inherit' }
				)

				// SMP TRAPEZE
				require('child_process').execSync(
					nasm + ' -f bin -o ' +
					folder + '\\trapeze.bin devices\\cpu\\trapeze.asm', { stdio: 'inherit' }
				)

				// DLL
				require('child_process').execSync(
					nasm + ' -f win64 -o ' +
					folder + '\\tofita64.asm.obj dlls\\tofita32.dll\\tofita64.asm', { stdio: 'inherit' }
				)

				require('child_process').execSync(
					nasm + ' -f win32 -o ' +
					folder + '\\tofita32.asm.obj dlls\\tofita32.dll\\tofita32.asm', { stdio: 'inherit' }
				)
			}
		case 'uefi':
			{
				// UEFI
				require('child_process').execSync(
					[
						clang + ' ',
						'-target x86_64-pc-win32-coff -fno-stack-protector ',
						'-O2 -x c++ -std=c++2a -fno-stack-protector -fshort-wchar -w -mno-red-zone -Wall -Wextra ',
						'-DGNU_EFI_USE_MS_ABI -DGNU_EFI_USE_EXTERNAL_STDARG ',
						'-Iexternal/inc -Iexternal/inc/x86_64 -DEFI_FUNCTION_WRAPPER ',
						'-DUEFI_BOOT_LOADER ',
						'-D versionRolling=' + versionRolling + ' ',
						'-D versionName=\\"' + versionName + '\\" ',

						'-mno-ms-bitfields -fno-threadsafe-statics ',
						'-fshort-wchar -mno-red-zone -Os',
						' -c ',
						'boot/uefi/boot.cpp',
						' -o ',
						config.tempFolder + '/' + teaFolder + '/miniefi.o'
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						link + ' ',
						'-subsystem:efi_application -nodefaultlib -dll -entry:efi_main ',
						config.tempFolder + '/' + teaFolder + '/trampoline.o ',
						config.tempFolder + '/' + teaFolder + '/miniefi.o ',
						' -out:',
						config.tempFolder + '/' + teaFolder + '/iso/EFI/BOOT/BOOTX64.EFI'
					].join(''), { stdio: 'inherit' }
				)
			}
		case 'dll':
			{
				// Yeah, just Clang bug
				let linkFixups = [
					'*CMapStringA',
					'*oadImageW',
					'*oadLibraryA',
					'*oadLibraryW',
					'*oadMenuW',
					'*oadStringW',
					'*ocalFree',
					'*ocalReAlloc',
					'*ockFile',
					'*ineTo',
					'*oadBitmapW',
					'*oadCursorW',
					'*oadIconW',
					'*oadMenuA',
					'*oadResource',
					'*ocalLock',
					'*ocalSize',
					'*ocalUnlock',
					'*ockResource',
					'*eaveCriticalSection',
					'*oadLibraryExW',
					'*CMapStringW'
				]

				// DLL
				fun buildDLLs(bit: String, arch: String) {
					for i in dlls.length {

						// TODO refactor
						var asm = ' '
						if dlls[i] == 'ntdll' {
							asm = folder + '\\tofita\(bit).asm.obj '
						}

						let outobj = folder + '\\' + dlls[i] + '.' + bit + '_dll.obj'

						require('child_process').execSync(
							[
								clang + ' ',
								'-m\(bit) -Xclang -flto-visibility-public-std -target \(arch)-pc-windows-msvc -nostdlib -nodefaultlibs -nostartfiles ',
								'-ffast-math -Wno-incompatible-library-redeclaration -Wno-absolute-value -s -w ',
								'-Wimplicit-function-declaration -O2 -c ',
								'-mtune=nocona -fno-stack-protector -mno-red-zone ',
								'-fno-rtti -fno-exceptions -fvisibility=default ',
								'-fno-stack-check ',
								'-mno-ms-bitfields -fno-threadsafe-statics ',
								'-ferror-limit=2000 ',
								'-Dbit\(bit) ',
								'-msse -msse2 -msse3 -mpopcnt -mcx16 -msahf -mprfchw ',
								'-mno-ssse3 -mno-sse4a -mno-sse4.1 -mno-sse4.2 -mno-sse4 ', // Unsupported
								'-std=c++2a ',
								'dlls/' + dlls[i]  + '.dll/' + dlls[i] + '.cpp ',
								'-o ',
								outobj
							].join(''), { stdio: 'inherit' }
						)

						// Fixup
						let inbuf = fs.readFileSync(outobj)

						for fix in linkFixups {
							let index = inbuf.indexOf(fix)

							if index > 0 {
								inbuf[index] = 'L'.charCodeAt(0)
								inbuf[inbuf.indexOf(fix)] = 'L'.charCodeAt(0)
							}
						}

						fs.writeFileSync(outobj, inbuf)

						// Bruh
						let machine = (bit == '32') ? '86' : '64'

						require('child_process').execSync(
							[
								// TODO -fno-underscoring
								// TODO -visibility=hidden
								// TODO check if `/kill-at` keeps `@` from `asm()`
								link + ' ',
								'/DLL /WX /MACHINE:X\(machine) ',
								[for dep in deps[i] config.tempFolder + '/' + teaFolder + '/' + dep + '.' + bit + '.lib '].join(''),
								outobj + ' ',
								asm,
								'/out:',
								config.tempFolder + '/' + teaFolder + '/' + dlls[i] + '.' + bit + '.dll'
							].join(''), { stdio: 'inherit' }
						)
					}
				}

				// 64-bit & 32-bit WoW64
				buildDLLs('64', 'x86_64')
				buildDLLs('32', 'i686')
			}
		case 'build':
			{
				// KERNEL
				require('child_process').execSync(
					[
						clang + ' ',
						'-D versionRolling=' + versionRolling + ' ',
						'-D versionName=\\"' + versionName + '\\" ',
						'-mtune=nocona -fno-stack-protector -fshort-wchar -mno-red-zone ',
						'-fno-stack-check ',
						'-fvisibility=hidden ',
						'-Dbit64 ',
						'-fno-rtti -fno-exceptions -ffreestanding ',
						'-mno-ms-bitfields -fno-threadsafe-statics ',
						enabledFeatures,
						disabledFeatures,
						'-Iexternal/inc -Iexternal/inc/x86_64 -DEFI_FUNCTION_WRAPPER ',
						'-m64 -target x86_64-pc-windows-gnu -nostdlib -nodefaultlibs ',
						'-DGNU_EFI_USE_MS_ABI -DGNU_EFI_USE_EXTERNAL_STDARG -fno-pic -mcmodel=large ',
						warn,
						'-ffast-math -Wno-incompatible-library-redeclaration -Wno-absolute-value -Wimplicit-function-declaration ',
						optimizationFeatures,
						'-x c++ -std=c++2a -c kernel/tofita.cpp -o ',
						config.tempFolder + '/' + teaFolder + '/tofita.obj '
					].join(''), { stdio: 'inherit' }
				)

				require('child_process').execSync(
					[
						link + ' ',
						'/verbose /WX /MACHINE:X64 /entry:kernelMain /SUBSYSTEM:CONSOLE ',
						'/BASE:0xffff800000000000 ',
						config.tempFolder + '/' + teaFolder + '/tofita.asm.obj ',
						config.tempFolder + '/' + teaFolder + '/tofita.obj ',
						'/out:',
						config.tempFolder + '/' + teaFolder + '/tofita.exe'
					].join(''), { stdio: 'inherit' }
				)

				packAssets(config) // Loader
			}
		case 'iso':
			{
				fs.copyFileSync(
					'assets\\autorun.ico',
					folder + '\\iso\\autorun.ico')
				fs.copyFileSync(
					'assets\\autorun.inf',
					folder + '\\iso\\autorun.inf')
				fs.copyFileSync(
					'LICENSE',
					folder + '\\iso\\LICENSE.txt')
				fs.writeFileSync(
					folder + '\\iso\\version.txt',
					versionName
				)

				// Create floppy image
				fs.copyFileSync(
					'\(teapot)\\mtools\\disk-template.img',
					folder + '\\DISK.IMG')
				for cmd in [
					mmd + ' -i ' + folder + '\\DISK.IMG ::/EFI',
					mmd + ' -i ' + folder + '\\DISK.IMG ::/EFI/BOOT',
					mcopy + ' -i ' + folder + '\\DISK.IMG ' + folder + '\\iso\\EFI\\BOOT\\BOOTX64.EFI ::/EFI/BOOT/BOOTx64.EFI',
					mcopy + ' -i ' + folder + '\\DISK.IMG ' + folder + '\\iso\\TOFITA.DAT ::/TOFITA.DAT',
					mcopy + ' -i ' + folder + '\\DISK.IMG ' + folder + '\\iso\\version.txt ::/version.txt',
					mcopy + ' -i ' + folder + '\\DISK.IMG LICENSE ::/LICENSE.txt',
					mcopy + ' -i ' + folder + '\\DISK.IMG assets\\autorun.ico ::/autorun.ico',
					mcopy + ' -i ' + folder + '\\DISK.IMG assets\\autorun.inf ::/autorun.inf'
				] {
					require('child_process').execSync(
						cmd, { stdio: 'inherit' }
					)
				}
				// Create disk image
				fs.copyFileSync(
					folder + '\\DISK.IMG',
					folder + '\\iso\\DISK.IMG')

				let path = '/cygdrive/' + folder.split(':').join('')
				require('child_process').execSync(
					[
						xorriso,
						'-as mkisofs -o \(path)/greenteaos-uefi64.iso -iso-level 3',
						'-V GreenteaOS \(path)/iso -append_partition 2 0xef \(path)/DISK.IMG',
						'-e --interval:appended_partition_2:all:: -no-emul-boot'
					].join(' '), { stdio: 'inherit' }
				)
			}
		case 'vbox':
			{
				require('child_process').execSync(
					'node tools\\listen.js', { stdio: 'inherit' }
				)
			}
		case 'clang-format':
			{
				let clang = '\(teapot)\\\(llvm)\\bin\\clang-format'
				let files: [String] = []

				fun formatFolderRecursive(path) {
					if fs.existsSync(path) {
						fs.readdirSync(path).forEach(fun(file, index) {
							let curPath = path + "\\" + file
							if fs.lstatSync(curPath).isDirectory() {
								formatFolderRecursive(curPath)
							} else {
								if curPath.indexOf('external\\') == -1, curPath.endsWith('.cpp') || curPath.endsWith('.hpp') {
									files.push(curPath)
								}
							}
						})
					}
				}

				formatFolderRecursive('.')

				require('child_process').execSync(
					clang + ` -i -style=file ` + files.join(' '), { stdio: 'inherit' }
				)

				console.log('clang-format ' + files.length + ' files')
			}
		case _:
			console.log('Unknown task', task)
	}
}
