// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on https://gitlab.com/nagisa/huehuehuehuehue/blob/master/src/serial.c
// Check `serialPrintf` to see supported features

// TODO
/*
#ifdef UEFI_BOOT_LOADER
	#define probeForReadOkay(ptr, bytes) 1
	const uint8_t sehLogError[] = "<STRING IS NULL>";
#else
	const uint8_t sehLogError[] = "<STRING IS NULL OR SEH ERROR>";
#endif
if (string != null and probeForReadOkay((uint64_t)string, 1)) {
	puts(string);
} else {
	puts(sehLogError);
}
if (string != null and probeForReadOkay((uint64_t)string, 2)) {
	while (string[i] != 0) {
		putChar(string[i] & 0xFF);
		i++;
	}
} else {
	puts(sehLogError);
}
*/

// TODO `NativeBool`
// @rename('disableSerial') // TODO `@as`
// TODO @rename not work on no-declare
var disableSerial UInt8 = 0

let serial_register_base = 0x03F8u16
let serial_baud_rate = 115200
let serial_clock_rate = 1843200
let serial_line_control = 0x03
let serial_register_stride = 1u16
let serial_fifo_control = 0x07
let serial_extended_fifo_tx_size = 64u64
let serial_use_hw_flow_control = false
let serial_detect_cable = false

// 16550 UART register offsets and bitfields
// TODO enum
let r_uart_rxbuf = 0
let r_uart_txbuf = 0u16
let r_uart_baud_low = 0
let r_uart_baud_high = 1
let r_uart_fcr = 2
let b_uart_fcr_fifoe = (1 << 0)
let b_uart_fcr_fifo64 = (1 << 5)
let r_uart_lcr = 3
let b_uart_lcr_dlab = (1 << 7)
let r_uart_mcr = 4
let b_uart_mcr_dtrc = (1 << 0)
let b_uart_mcr_rts = (1 << 1)
let r_uart_lsr = 5u16
let b_uart_lsr_rxrdy = (1 << 0)
let b_uart_lsr_txrdy = (1 << 5)
let b_uart_lsr_temt = (1 << 6)
let r_uart_msr = 6u16
let b_uart_msr_cts = (1 << 4)
let b_uart_msr_dsr = (1 << 6)
let b_uart_msr_ri = (1 << 7)
let b_uart_msr_dcd = (1 << 8)

// TODO renaming not works
@rename('kstrlen')
// TODO Hexa: infer return type earlier `fun kstrlen(data ConstArrayPointer<UInt8>) {`
fun kstrlen(data ConstArrayPointer<UInt8>) UInt64 {
	var r UInt64 = 0u64

	while data[r] != 0 {
		r++
	}

	return r
}

@rename('portInb')
declare fun portInb(@volatile port UInt16) UInt8

@rename('portOutb')
declare fun portOutb(@volatile port UInt16, @volatile value UInt8) Void

fun readSerialRegister(offset UInt16) {
	return portInb(serial_register_base + offset * serial_register_stride)
}

fun writeSerialRegister(offset UInt16, d UInt8) {
	portOutb(serial_register_base + offset * serial_register_stride, d)
}

fun serialPortWritable() Bool {
	if serial_use_hw_flow_control {
		if serial_detect_cable {
			// Wait for both DSR and CTS to be set
			//   DSR is set if a cable is connected.
			//   CTS is set if it is ok to transmit data
			//
			//   DSR  CTS  Description                               Action
			//   ===  ===  ========================================  ========
			//    0    0   No cable connected.                       Wait
			//    0    1   No cable connected.                       Wait
			//    1    0   Cable connected, but not clear to send.   Wait
			//    1    1   Cable connected, and clear to send.       Transmit
			return ((readSerialRegister(r_uart_msr) & (b_uart_msr_dsr | b_uart_msr_cts)) ==
						  (b_uart_msr_dsr | b_uart_msr_cts)) as! Bool
		} else {
			// Wait for both DSR and CTS to be set OR for DSR to be clear.
			//   DSR is set if a cable is connected.
			//   CTS is set if it is ok to transmit data
			//
			//   DSR  CTS  Description                               Action
			//   ===  ===  ========================================  ========
			//    0    0   No cable connected.                       Transmit
			//    0    1   No cable connected.                       Transmit
			//    1    0   Cable connected, but not clear to send.   Wait
			//    1    1   Cable connected, and clar to send.        Transmit
			return ((readSerialRegister(r_uart_msr) & (b_uart_msr_dsr | b_uart_msr_cts)) !=
						  (b_uart_msr_dsr)) as! Bool
		}
	}
	return true
}

fun serialPortWrite(buffer ArrayPointer<UInt8>, sizeOfBuffer UInt64) UInt64 {
	if disableSerial != 0 {
		return 0
	}

	var size = sizeOfBuffer
	var buffer = buffer

	if buffer == null {
		return 0u64
	}

	if size == 0 {
		// Flush the hardware
		//
		// Wait for both the transmit FIFO and shift register empty.
		while (readSerialRegister(r_uart_lsr) & (b_uart_lsr_temt | b_uart_lsr_txrdy)) !=
			   (b_uart_lsr_temt | b_uart_lsr_txrdy) {}

		while !serialPortWritable() {}

		return 0u64
	}
	// Compute the maximum size of the Tx FIFO
	var fifoSize UInt64 = 1u64
	if (serial_fifo_control & b_uart_fcr_fifoe) != 0 {
		if (serial_fifo_control & b_uart_fcr_fifo64) == 0 {
			fifoSize = 16u64
		} else {
			fifoSize = serial_extended_fifo_tx_size
		}
	}
	while size != 0 {
		// Wait for the serial port to be ready, to make sure both the transmit FIFO
		// and shift register empty.
		while (readSerialRegister(r_uart_lsr) & b_uart_lsr_temt) == 0 {}

		// Fill then entire Tx FIFO
		var index UInt64 = 0u64
		while index < fifoSize and size != 0 {
			// Wait for the hardware flow control signal
			while !serialPortWritable() {}

			// Write byte to the transmit buffer.
			writeSerialRegister(r_uart_txbuf, buffer[0])

			index++
			size--
			buffer = ((buffer as! UInt64) + 1) as! ArrayPointer<UInt8>
		}
	}

	return size
}

fun serialPrintInt(n UInt64) Void {
	var n = n
	var buf ArrayByValue<UInt8, 24> = [0]
	for i in 24 {
		buf[i] = 0
	}

	// TODO disallow this pointer math
	var bp ArrayPointer<UInt8> = (buf + 24) as! ArrayPointer<UInt8>
	do {
		bp--
		// TODO `bp[0] = '0' + n % 10` should error
		bp[0] = '0'.charCodeAt(0) + n % 10
		n /= 10u64
	} while (n != 0)
	serialPortWrite(bp as! ArrayPointer<UInt8>, buf - bp + 24u64)
}

fun serialPrintHex(n UInt64) Void {
	serialPrintf("0x")
	var n = n
	var buf ArrayByValue<UInt8, 16> = [0]
	var bp = 16

	for i in 16 {
		// TODO must error buf[i] = '0'
		buf[i] = '0'.charCodeAt(0)
	}

	do {
		bp--
		var mod UInt8 = n % 16u8
		if mod < 10 {
			buf[bp] = '0'.charCodeAt(0) + mod
		} else {
			buf[bp] = 'A'.charCodeAt(0) - 10 + mod
		}
		n /= 16u64
	} while (n != 0)
	serialPortWrite(buf.ref as! ArrayPointer<UInt8>, 16u64)
}

fun serialPrintBits(value UInt64) Void {
	serialPrintf("0b")
	for i in 64u64 { // TODO does `in u64` work?
		if 0 != value & (1u64 << i) {
			serialPrintInt(i)
		}
	}
}

// TODO some fun call `putchar` while it is not defined anywhere but declared in c.hexa
@convention(cdecl)
fun putChar(c UInt8) Int32 {
	var buffer ArrayByValue<UInt8, 2> = [c, 0]
	serialPortWrite(buffer.ref as! ArrayPointer<UInt8>, 1u64)
	return c
}

fun puts(string ArrayPointer<UInt8>) Int32 {
	let eof = 0
	var i Int32 = 0
	// TODO should type check as `while Bool`
	while string[i] // standard c idiom for looping through a null-terminated string
	{
		if putChar(string[i]) == eof // if we got the EOF value from writing the uint8_t
		{
			return eof
		}
		i++
	}
	return 1 // to meet spec.
}

fun comItoA(i Int64, b ArrayPointer<UInt8>) {
	var digit ArrayByValue<UInt8, 11> = "0123456789"
	var p = 0
	var i = i

	if i < 0 {
		// TODO `& 0xFFu8` if required
		b[p] = '-'.charCodeAt(0)
		p++
		i *= -1
	}
	var shifter = i
	do { // Move to where representation ends
		++p
		shifter = shifter / 10
	// TODO should type check as `while Bool`
	} while (shifter)
	b[p] = 0 // TODO '\0'.charCodeAt(0)
	do { // Move back, inserting digits as u go
		p--
		b[p] = digit[i % 10]
		i = i / 10
	} while (i)
	return b
}

//@rename('va_list') @struct
//@byValue
//declare class VA_List {}
//@rename('va_start')
// TODO firstArgument Any
//declare fun va_start(lst VA_List, firstArgument String) Void
@rename('va_start_') @customHeader('
	#define va_start_(arg) va_list va_list__; va_start(va_list__, arg)
')
@nativeVariadic
// TODO `(...rest)` here, require it when `@nativeVariadic` specified
// ^ (as last argument)
declare fun va_start(first Any) Void
@rename('va_arg_int32') @customHeader('
	#define va_arg_int32() va_arg(va_list__, int32_t)
')
declare fun va_arg_int32() Int
@rename('va_arg_uint32') @customHeader('
	#define va_arg_uint32() va_arg(va_list__, uint32_t)
')
// TODO just have UInt not UInt32
declare fun va_arg_uint32() UInt32
@rename('va_arg_uint64') @customHeader('
	#define va_arg_uint64() va_arg(va_list__, uint64_t)
')
declare fun va_arg_uint64() UInt64
// declare fun va_arg<T>(lst VA_List) Any

/*
@nativeVariadic
@rename('macro_serialPrintf')
declare fun serialPrintf(c String, ...rest) Void
*/

@nativeVariadic
// TODO `rest.getNext<UInt>()` + auto gen va_start
// TODO would be cooler to trace the file:line:function here
// TODO for perf (tofitaDebugLogs) func with C-strings ptr maybe for template?
fun serialPrintf(c String, ...rest) {
	va_start(c)
	let c = c.utf16() as! ArrayPointer<UInt16>
	var i = 0

	// TODO `UInt16 != '\0'.charCodeAt(0)` produces `Int?` which is incomparable to `UInt16`
	while c[i] != 0 {
		if c[i] != 37 { // `%`
			putChar(c[i] & 0xFFu8)
			i++
			continue
		}

		i++

		if c[i] == 0 {
			break
		}

		// switch String.fromUTF16(string: c, offset: 0, chars: 1) { // TODO ClangWideChar
		switch c[i] { // TODO ClangWideChar
			// TODO some way to put ascii `case 's': {` // ASCII of UTF-8
			case 115: { // ASCII of UTF-8 `s`
				let string = va_arg_uint64() as! ArrayPointer<UInt8> // TODO va_arg<ArrayPointer<UInt8> >(lst)
				if string != null {
					// TODO probeForReadOkay((uint64_t)string, 1)
					// TODO actually should sehReadUInt8 for every char
					puts(string)
				} else {
					serialPrintf("<STRING IS NULL>")
				}
			}
			// TODO `break` here converts switch to chain of `if`s, ensure this is correct and document
			// ^ probably UInt16 is not recognized as switch-able
			case 83: { // ASCII of UTF-16 `S`
				var string = va_arg_uint64() as! ArrayPointer<UInt16> // TODO va_arg<ArrayPointer<UInt16> >(lst)
				var i UInt32 = 0u32
				if string != null {
					// TODO probeForReadOkay((uint64_t)string, 2) of pointer itself?
					// TODO disallow reading of higher half! thus sehUserReadUInt16
					// TODO actually should sehReadUInt16(, defaultValue: 0) for every char
					// TODO same ^ for the `c String` template string itself
					while string[i] != 0 {
						// TODO limit to 4096 iterations
						putChar(string[i] & 0xFFu8)
						i++
					}
				} else {
					serialPrintf("<STRING IS NULL>")
				}
			}
			case 99: // `c`
				putChar(va_arg_int32() as! UInt8) // TODO lst, int32_t
			case 100: { // `d`
				var value = va_arg_int32() // TODO lst, int32_t
				var buffer ArrayByValue<UInt8, 16> = [0]
				for i in 16 {
					buffer[i] = 0
				}
				comItoA(value, buffer.ref)
				var c ArrayPointer<UInt8> = buffer.ref
				var i = 0
				while c[i] != 0 {
					putChar(c[i])
					i++
				}
			}
			case 117: { // `u`
				var value UInt32 = va_arg_uint32() // TODO lst, int32_t
				var buffer ArrayByValue<UInt8, 16> = [0]
				for i in 16 {
					buffer[i] = 0
				}
				comItoA(value, buffer.ref)
				var c ArrayPointer<UInt8> = buffer.ref
				var i = 0
				while c[i] != 0 {
					putChar(c[i])
					i++
				}
			}
			case 56: { // `8`
				var value UInt64 = va_arg_uint64() // TODO lst, uint64_t
				serialPrintHex(value)
			}
			case 98: { // `b`
				var value UInt64 = va_arg_uint64() // TODO lst, uint64_t
				serialPrintBits(value)
			}
		}
		i++
	}
}

fun serialPrint(print String) {
	// TODO should print un-formatted
	serialPrintf(print)
}

fun serialPrintln(print String) {
	// TODO should print un-formatted
	serialPrintf(print)
	serialPrintf("\n") // TODO
}
