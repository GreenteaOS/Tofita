// The Tofita Kernel
// Copyright (C) 2022 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

@struct
class RamDiskInfo {
	var ramDiskChecksum: UInt32
	var ramDiskSize: UInt32
	var assetsCount: UInt32
}

@struct
class RamDiskAssetInfo {
	var path: ArrayByValue<UInt16, 128>
	var size: UInt32
	var offsetFromRamDiskFirstByte: UInt32
}

var _ramdisk: @readonly RamDisk = null as! RamDisk
fun setRamDisk(ramdisk: @readonly RamDisk) {
	_ramdisk = ramdisk
}

@struct
class RamDiskAsset {
	var size: UInt32
	var data: ArrayPointer<UInt8>
	new () {}
}

fun getRamDiskAsset(asset: RamDiskAsset, pathToAsset: String) {
	asset.size = 0u32
	asset.data = null // TODO should error cause non-nullable
	let path = pathToAsset.utf16() as! ConstArrayPointer<UInt16>

	let ramDiskInfo = _ramdisk.base as! @readonly RamDiskInfo

	var id: UInt32 = 0u32
	while id < ramDiskInfo.assetsCount { // TODO use iterators
		// Pointer arithmetic like a boss
		let ramDiskAssetInfoPtr: UInt64 =
			(_ramdisk.base as! UInt64) + sizeOf<RamDiskInfo>() + sizeOf<RamDiskAssetInfo>() * id
		let ramDiskAssetInfo = ramDiskAssetInfoPtr as! @readonly RamDiskAssetInfo
		var found = true

		var at: UInt8 = 0
		while at < 127 {
			if ramDiskAssetInfo.path[at] != path[at] {
				found = false
				break
			}

			if ramDiskAssetInfo.path[at] == 0 {
				break
			}

			at++
		}

		if found {
			asset.size = ramDiskAssetInfo.size
			asset.data = ((_ramdisk.base as! UInt64) + ramDiskAssetInfo.offsetFromRamDiskFirstByte) as! ArrayPointer<UInt8>
			// TODO `as! _` short syntax
			return
		}

		id++
	}

	serialPrintf("[ramdisk.getRamDiskAsset] asset '%S' not found in %d assets\n", path,
				 ramDiskInfo.assetsCount)
	return
}
