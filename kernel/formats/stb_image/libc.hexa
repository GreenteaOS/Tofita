// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Used only for STB

#define free libc_free
#define malloc libc_malloc
#define realloc libc_realloc
#define memset libc_memset
#define abs libc_abs
#define pow libc_pow

fun libc_free(Void *addr) {
	// Do nothing for now
	serialPrintf("[libc] libc_free\n")
}

Void *libc_malloc(size: UInt64) {
	serialPrintf("[libc] libc_malloc of size %u\n", size)
	return (Void *)PhysicalAllocator.allocateBytes(size)
}

Void *libc_realloc(Void *addr, size: UInt64) {
	serialPrintf("[libc] libc_realloc %u of size %u\n", addr, size)

	{
		var result = PhysicalAllocator.allocateBytes(size)
		return (Void *)result
	}
}

Void *libc_memset(Void *b, c: Int32, len: Int32) {
	var i: Int32
	UInt8 *p = (UInt8 *)b
	i = 0
	while (len > 0) {
		*p = c
		p++
		len--
	}
	return (b)
}

Int32 libc_abs(v: Int32) {
	return v * ((v < 0) * (-1) + (v > 0))
}

Int32 libc_pow(a: Int32, n: Int32) {
	var r: Int32 = 1
	while (n > 0) {
		if (n & 1)
			r *= a
		a *= a
		n >>= 1
	}
	return r
}

fun libc_memcpy(Void *dest, const Void *src, n: UInt64) {
	const UInt8 *csrc = (UInt8 *)src
	UInt8 *cdest = (UInt8 *)dest
	for (Int32 i = 0; i < n; i++)
		cdest[i] = csrc[i]
}

fun memcpy(Void *dest, const Void *src, n: UInt64) {
	libc_memcpy(dest, src, n)
}
