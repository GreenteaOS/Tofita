// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Boot loader: entered by UEFI, reads all UEFI data and starts kernel loader

fun tmemcpy(dest: ArrayPointer<UInt8>, src: ConstArrayPointer<UInt8>, count: UInt64): Void {
	for i in count {
		dest[i] = src[i]
	}
}

fun memset(dest: ArrayPointer<UInt8>, e: Int32, len: UInt64): Void {
	var d = dest as! ArrayPointer<UInt8>
	for i in len {
		d[i] = e
	}
}

// CR3 trampoline
@extern
@rename("trampolineCR3") // TODO
@convention(fastcall) @fastcall // TODO
declare fun
trampolineCR3(@volatile kernelParams: UInt64, @volatile pml4: UInt64, @volatile stack: UInt64,
			  @volatile entry: UInt64): Void

@extern @rename('versionMajor') declare let versionMajor: Int
@extern @rename('versionMinor') declare let versionMinor: Int
@extern @rename('versionTag') declare let versionTag: Int
// TODO ^ to C++n't about -D
// @deep

// Entry point
fun uefi(imageHandle: ByValue<EFI_HANDLE>, systemTable: EFI_SYSTEM_TABLE): EFI_STATUS {
	// Workaround for Clang `memset`, but it may be not needed anymore
	buffa[0] = 0

	initSerial()

	serialPrint("\n[[[uefi]]] Tofita " + versionMajor + "." +
		versionMinor + "." + versionTag + " UEFI bootloader. Welcome!\n")

	initText()

	// Disable watchdog timer
	systemTable.bootServices.setWatchdogTimer(0, 0, 0, null)

	{
		var revision: UInt32 = systemTable.firmwareRevision
		var minor: UInt16 = revision as! UInt16
		var major: UInt16 = (revision >> 16) as! UInt16
		serialPrintf("[[[uefi]]] UEFI revision %d.%d\n", major, minor)
	}

	// Actually, no matter where lower is present, cause no lower-relative addressing done in kernel
	// after calling cr3 at the first instruction
	// so it is safe to allocate it at random position in conventional memory

	var acpiTable: EFI_PHYSICAL_ADDRESS? = null
	{
		serialPrintln("[[[uefi]]] begin: ACPI")
		var acpi20: EFI_GUID = new ACPI_20_TABLE_GUID()
		var acpi: EFI_GUID = new ACPI_TABLE_GUID()

		for i in systemTable.numberOfTableEntries {
			var efiTable: EFI_CONFIGURATION_TABLE = systemTable.configurationTable[i].ref
			if areSame(efiTable.vendorGuid.ref, acpi20) { // Prefer ACPI 2.0
				acpiTable = efiTable.vendorTable as! EFI_PHYSICAL_ADDRESS?
				serialPrintln("[[[uefi]]] found: ACPI 2.0")
				break
			} else if areSame(efiTable.vendorGuid.ref, acpi) {
				// ACPI 2.0 is required by Tofita
				// So we don't need to support ACPI 1.0
				serialPrintln("[[[uefi]]] found: ACPI 1.0, ignoring")
			}
		}

		// TODO also transfer ACPI version to report SandyBridge
		serialPrintln("[[[uefi]]] done: ACPI")
	}

	var status = EFI_STATUS.EFI_NOT_READY

	serialPrintln("[[[uefi]]] begin: uefiSetFrameBufferMode")
	var framebuffer: FrameBuffer = new FrameBuffer()
	// TODO should create fake fb on fail to work in headless mode
	uefiSetFrameBufferMode(framebuffer, systemTable)
	drawLoading(framebuffer, 0)
	let versionText = "Greentea OS " + versionMajor + "." + versionMinor + "." + versionTag
	let versionY = (framebuffer.height / 4) * 3 + 64 as! Int16
	drawText(
		versionText,
		versionY,
		framebuffer
	)
	errorY = versionY + 32i16 // TODO simply `+ 32`
	drawText(
		"Copyright (C) " + versionMajor + " GNU LGPL v3.0",
		// "Copyright (C) " + versionMajor + " GNU Lesser General Public License v3.0",
		// TODO better ideas? "Copyright (C) " + versionMajor + " LGPL-3.0",
		errorY,
		framebuffer
	)

	// Check ACPI here, after framebuffer initialization
	while acpiTable == null {
		drawError("[ERROR] Tofita requires ACPI 2.0 [ERROR]", framebuffer)
	}

	// TODO: render something to show that loader is ok, because initial start form USB may take a while
	// TODO: show error message if ram < 512 or < 1024 mb and cancel boot (loop forever)
	serialPrintln("[[[uefi]]] done: uefiSetFrameBufferMode")

	// Initial RAM disk
	var ramdisk: RamDisk = new RamDisk()
	drawVerbose("Searching for the RAM disk...", framebuffer)
	status = findAndLoadRamDisk(systemTable.bootServices, ramdisk)
	while status != EFI_STATUS.EFI_SUCCESS {
		drawError("[ERROR] Tofita cannot load RAM disk [ERROR]", framebuffer)
	}
	drawLoading(framebuffer, 1)

	serialPrintln("[[[uefi]]] begin: uefiGetMemoryMap")
	drawVerbose("Getting memory map...", framebuffer)
	var sizeAlloc: UInt64 = (ramdisk.size / pageSize + 1) * pageSize
	var efiMemoryMap: UefiMemoryMap = new UefiMemoryMap()
	efiMemoryMap.memoryMapSize = sizeOf<EFI_MEMORY_DESCRIPTOR>() * 512u64
	// TODO bug efiMemoryMap.memoryMapSize = sizeOf<EFI_MEMORY_DESCRIPTOR>() * 512
	// TODO sizeOf<EFI_MEMORY_DESCRIPTOR>() ?
	// TODO is 512 enough?
	// TODO is this storage destination ok?
	efiMemoryMap.memoryMap = (ramdisk.base + sizeAlloc) as! EFI_MEMORY_DESCRIPTOR
	{
		var b = efiMemoryMap.memoryMap as! ArrayPointer<UInt8>
		for i in efiMemoryMap.memoryMapSize {
			// TODO faster with uint64_t
			b[i] = buffa[0]
		}
	}
	uefiGetMemoryMap(efiMemoryMap, systemTable)
	serialPrintln("[[[uefi]]] done: uefiGetMemoryMap")

	drawVerbose("Reading the time...", framebuffer)
	var time: EFI_TIME = new EFI_TIME()
	time.year = 2023
	var capabilities: EFI_TIME_CAPABILITIES = new EFI_TIME_CAPABILITIES()
	{
		serialPrintln("[[[uefi]]] begin: GetTime")
		var status: EFI_STATUS = systemTable.runtimeServices.getTime(time, capabilities)
		while status != EFI_STATUS.EFI_SUCCESS {
			serialPrintln("[[[uefi]]] <ERROR> GetTime")
			drawError("[ERROR] Cannot get current time from UEFI [ERROR]", framebuffer)
		}

		{
			serialPrintf("[[[uefi]]] EFI_TIME Year=%d Month=%d Day=%d Hour=%d Minute=%d Second=%d "
						 +
						 "Nanosecond=%d TimeZone=%d Daylight=%d\n",
						 time.year, time.month, time.day, time.hour, time.minute, time.second,
						 time.nanosecond, time.timeZone, time.daylight)

			serialPrintf("[[[uefi]]] EFI_TIME_CAPABILITIES Resolution=%d Accuracy=%d SetsToZero=%d\n",
						 capabilities.resolution,
						 capabilities.accuracy,
						 capabilities.setsToZero)

			// Set 2023 as least valid, so security/HTTPS certificates at least partially work
			// and file system is not messed
			if time.year < 2023 {
				time.year = 2023
			}
			// TODO use constants from version numbers
		}
		serialPrintln("[[[uefi]]] done: GetTime")
	}

	serialPrintln("[[[uefi]]] begin: ExitBootServices")
	drawVerbose("Exiting boot services...", framebuffer)
	var oops: UInt8 = 0
	status = EFI_STATUS.EFI_NOT_READY
	while status != EFI_STATUS.EFI_SUCCESS {
		if oops < 10 {
			serialPrintln("[[[uefi]]] try: ExitBootServices")
		}

		if oops == 199 {
			// Keep user aware of the loading process
			drawVerbose("Exiting boot services loop...", framebuffer)
			serialPrintln("[[[uefi]]] <ERROR?> probably infinite loop on ExitBootServices")
			serialPrintln("[[[uefi]]] <ERROR?> system may or may not start")
			// Do this once
			oops = 200
		}

		if oops < 199 {
			oops++
		}

		status = systemTable.bootServices.exitBootServices(imageHandle, efiMemoryMap.mapKey)
	}

	// TODO this condition never happens (static analyze this case)
	if status != EFI_STATUS.EFI_SUCCESS {
		// TODO `status` to string
		serialPrintln("[[[uefi]]] <ERROR> ExitBootServices: EFI_LOAD_ERROR")
		return EFI_STATUS.EFI_LOAD_ERROR
	}
	serialPrintln("[[[uefi]]] done: ExitBootServices")

	drawVerbose("Setting RAM disk...", framebuffer)
	setRamDisk(ramdisk)

	serialPrintln("[[[uefi]]] begin: preparing kernel loader")

	// TODO forward constructor arguments `var asset: ByValue<RamDiskAsset> = new ByValue<RamDiskAsset>()`
	var asset: RamDiskAsset = new RamDiskAsset()
	drawVerbose("Load kernel assets...", framebuffer)
	getRamDiskAsset(asset, "tofita.exe")
	serialPrintf("[[[uefi]]] loaded asset 'tofita.exe' %d bytes at %d\n", asset.size, asset.data)

	drawVerbose("Allocate memory...", framebuffer)
	let largeBuffer: UInt64 = conventionalAllocateLargest(efiMemoryMap)
	serialPrintf("[[[uefi]]] large buffer allocated at %u\n", largeBuffer)
	conventionalOffset = largeBuffer
	var addressOfEntryPoint: UInt64 = 0

	drawVerbose("Load kernel file...", framebuffer)
	{
		let ptr = asset.data as! ArrayPointer<UInt8>
		// TODO `@readonly PeHeader` just make all fields `let` also decided to disallow `@` on types
		let peHeader = ((ptr as! UInt64) + ptr[0x3C] + ptr[0x3C + 1] * 256) as! @readonly PeHeader
		serialPrintf("PE header signature 'PE' == '%s'\n", peHeader)
		let peOptionalHeader = ((peHeader as! UInt64) + sizeOf<PeHeader>()) as! @readonly Pe32OptionalHeader
		serialPrintf("PE32(+) optional header signature 0x020B == %d == %d\n", peOptionalHeader.mMagic,
					 0x020B)
		serialPrintf("PE32(+) size of image == %d\n", peOptionalHeader.mSizeOfImage)
		let kernelBase = conventionalAllocateNext(peOptionalHeader.mSizeOfImage)
		memset(kernelBase as! ArrayPointer<UInt8>, 0, peOptionalHeader.mSizeOfImage) // Zeroing

		// Copy sections
		let imageSectionHeader =
			((peOptionalHeader as! UInt64) + peHeader.mSizeOfOptionalHeader) as! ArrayPointer<ByValue<ImageSectionHeader>>

		// TODO seems like normalizer cannot iterate over `UInt16`
		// `for i in peHeader.mNumberOfSections {`
		let mNumberOfSections: Int = peHeader.mNumberOfSections
		for i in mNumberOfSections {
			serialPrintf(
				"Copy section [%d] named '%s' of size %d\n",
				i,
				imageSectionHeader[i].ref.mName.ref,
				imageSectionHeader[i].ref.mSizeOfRawData
			)
			let where: UInt64 = (kernelBase as! UInt64) + imageSectionHeader[i].ref.mVirtualAddress

			tmemcpy(where as! ArrayPointer<UInt8>,
					((asset.data as! UInt64) + (imageSectionHeader[i].ref.mPointerToRawData as! UInt64)) as! ConstArrayPointer<UInt8>,
					imageSectionHeader[i].ref.mSizeOfRawData)
		}

		addressOfEntryPoint = peOptionalHeader.mAddressOfEntryPoint
	}

	drawVerbose("Prepare kernel parameters...", framebuffer)
	let params = conventionalAllocateNext(sizeOf<UefiPayload>()) as! UefiPayload
	{
		var b = params as! ArrayPointer<UInt8>
		for i in sizeOf<UefiPayload>() {
			b[i] = buffa[0]
		}
	}

	params.time.ref.year = time.year
	params.time.ref.month = time.month
	params.time.ref.day = time.day
	params.time.ref.hour = time.hour
	params.time.ref.minute = time.minute
	params.time.ref.second = time.second

	params.capabilities.ref.resolution = capabilities.resolution
	params.capabilities.ref.accuracy = capabilities.accuracy
	params.capabilities.ref.setsToZero = capabilities.setsToZero

	// Note: stack grows from X to X-N, not X+N
	// TODO: map empty page for stack overflow protection + map larger stack (~4 MB)
	let stack = conventionalAllocateNext(1024u64 * 1024) + 1024 * 1024
	{
		var b = (stack - 1024 * 1024) as! ArrayPointer<UInt8>
		for i in 1024 * 1024 {
			b[i] = buffa[0]
		}
	}

	// TODO better idea how to automate those field assignments
	// ^ `ByValue<T> { fun copyFrom(source T) }`
	params.efiMemoryMap.ref.memoryMap = efiMemoryMap.memoryMap
	params.efiMemoryMap.ref.memoryMapSize = efiMemoryMap.memoryMapSize
	params.efiMemoryMap.ref.mapKey = efiMemoryMap.mapKey
	params.efiMemoryMap.ref.descriptorSize = efiMemoryMap.descriptorSize
	params.efiMemoryMap.ref.descriptorVersion = efiMemoryMap.descriptorVersion

	params.ramdisk.ref.base = ramdisk.base
	params.ramdisk.ref.physical = ramdisk.physical
	params.ramdisk.ref.size = ramdisk.size

	params.framebuffer.ref.base = framebuffer.base
	params.framebuffer.ref.physical = framebuffer.physical
	params.framebuffer.ref.size = framebuffer.size
	params.framebuffer.ref.width = framebuffer.width
	params.framebuffer.ref.height = framebuffer.height
	params.framebuffer.ref.pixelsPerScanLine = framebuffer.pixelsPerScanLine

	// RAM usage bit-map
	drawVerbose("Setup device memory...", framebuffer)

	var ram: UInt64 = getRAMSize(params.efiMemoryMap.ref)
	var megs: UInt32 = (ram / (1024u64 * 1024u64)) as! UInt32
	serialPrintf("[paging] available RAM is ~%u bytes\n", ram)
	serialPrintf("[paging] available RAM is ~%u megabytes\n", megs)

	while megs < 1234 {
		// TODO check only physical memory in this case (but map whole range reported by UEFI)
		drawError("[ERROR] Tofita requires at least 2 GB of memory [ERROR]", framebuffer)
		serialPrintf("Tofita requires at least 2 GB of memory\n")
	}

	params.ramBytes = ram
	params.physicalRamBitMaskVirtual = conventionalAllocateNext(ram >> 12)

	let pageTableEntriesCount = 512u64
	pml4entries =
		conventionalAllocateNext(sizeOf<PageEntry>() * pageTableEntriesCount) as! ArrayPointer<ByValue<PageEntry>>

	{
		var b = pml4entries as! ArrayPointer<UInt8>
		for i in conventionalOffset {
			// TODO faster with uint64_t
			b[i] = buffa[0]
		}
	}

	// Map memory
	drawVerbose("Setup virtual memory...", framebuffer)

	serialPrintln("[[[uefi]]] mapping pages for kernel loader")

	mapMemory(upper, largeBuffer, (conventionalOffset - largeBuffer) / pageSize + 1, 1)

	// Note: framebuffer is *not* within physical memory
	mapFrameBuffer(params.framebuffer.ref)
	drawLoading(framebuffer, 2)
	mapEfiRuntime(params.efiMemoryMap.ref)
	mapMemoryHuge(wholePhysicalStart, 0, ram / pageSize)

	drawVerbose("Setup kernel mode...", framebuffer)
	let startFunction = (conventionalOffset + pageSize) as! InitKernelTrampoline
	// TODO somehow ensure size is enough to copy whole trampoline (-D arg same as verison)
	tmemcpy(startFunction as! ArrayPointer<UInt8>, trampolineCR3 as! ConstArrayPointer<UInt8>, 32)
	mapMemory((startFunction as! UInt64), (startFunction as! UInt64), 1, 0)

	// Fix virtual addresses

	params.framebuffer.ref.physical = params.framebuffer.ref.base
	params.framebuffer.ref.base = frameBufferVirtualBase

	params.ramdisk.ref.physical = params.ramdisk.ref.base
	params.ramdisk.ref.base = wholePhysicalStart + params.ramdisk.ref.physical

	// Physical address is used for PML4
	params.pml4 = (pml4entries as! UInt64)
	// Physical address TODO elaborate purpose (used for stack overflow detection? trampoline?)
	params.stack = stack
	params.physicalBuffer = largeBuffer
	params.physicalBytes = conventionalOffset - largeBuffer
	params.efiRuntimeServices = systemTable.runtimeServices
	params.acpiTablePhysical = acpiTable as! UInt64
	params.efiMemoryMap.ref.memoryMap =
		(wholePhysicalStart + (params.efiMemoryMap.ref.memoryMap as! UInt64)) as! EFI_MEMORY_DESCRIPTOR

	// Convert addresses to upper half

	let stack = (wholePhysicalStart as! UInt64) + stack
	params.physicalRamBitMaskVirtual = (wholePhysicalStart as! UInt64) + params.physicalRamBitMaskVirtual
	let params = ((wholePhysicalStart as! UInt64) + (params as! UInt64)) as! UefiPayload

	serialPrintln("[[[uefi]]] done: all done, entering kernel loader")

	serialPrint("[[[uefi]]] CR3 points to: ")
	serialPrintHex((pml4entries as! UInt64))
	serialPrint("\n")

	drawVerbose("Entering kernel mode...", framebuffer)
	startFunction((params as! UInt64), (pml4entries as! UInt64), stack, upper + addressOfEntryPoint)

	// Should never return in practice
	return EFI_STATUS.EFI_SUCCESS
}
