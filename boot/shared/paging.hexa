// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun getNextDescriptor(@readonly descriptor: EFI_MEMORY_DESCRIPTOR, descriptorSize: UInt64) {
	let desc = (descriptor as! UInt64) + descriptorSize
	return desc as! @readonly EFI_MEMORY_DESCRIPTOR
}

fun getRAMSize(memoryMap: UefiMemoryMap): UInt64 {
	var descriptor = memoryMap.memoryMap
	let descriptorSize: UInt64 = memoryMap.descriptorSize
	var numberOfPages: UInt64 = 0u64

	var startOfMemoryMap: UInt64 = (memoryMap.memoryMap as! UInt64)
	var endOfMemoryMap: UInt64 = startOfMemoryMap + memoryMap.memoryMapSize
	var offset: UInt64 = startOfMemoryMap

	while offset < endOfMemoryMap {
		// TODO check attributes or something? specify that it maps *whole* ram to be accessed by the known offset
		numberOfPages += descriptor.numberOfPages

		offset += descriptorSize
		descriptor = getNextDescriptor(descriptor, descriptorSize)
	}

	return numberOfPages * pageSize
}

// TODO this should be reconsidered (i.e. pointer fixups)
fun mapEfiRuntime(memoryMap: UefiMemoryMap) {
	serialPrintln("[paging] mapping efi runtime")

	var descriptor: EFI_MEMORY_DESCRIPTOR = memoryMap.memoryMap
	let descriptorSize: UInt64 = memoryMap.descriptorSize
	var sum: UInt64 = 0u64

	var startOfMemoryMap: UInt64 = (memoryMap.memoryMap as! UInt64)
	var endOfMemoryMap: UInt64 = startOfMemoryMap + memoryMap.memoryMapSize
	var offset: UInt64 = startOfMemoryMap

	while offset < endOfMemoryMap {
		if 0 != (descriptor.attribute & efi_memory_runtime) {
			// TODO pointer fixups
			// TODO should be RW or RO? NX? Ring0?
			// Note: in VirtualBox, physicalStart seems way beyond RAM bounds
			// Seems like fixup should be applied only if PhysicalStart < ramBytes?
			mapMemory(descriptor.physicalStart, descriptor.physicalStart, descriptor.numberOfPages, 1u8)
			sum += descriptor.numberOfPages
		}

		offset += descriptorSize
		descriptor = getNextDescriptor(descriptor, descriptorSize)
	}

	serialPrintf("[paging] efi runtime mapped %8 pages\n", sum)
}

@struct class Buffa {
	let value: UInt64 = 0
	new () {}
}
let buffaStorage = new Buffa()
let buffa = buffaStorage as! ArrayPointer<UInt8>
// TODO ^ simple array by value

fun conventionalAllocateLargest(memoryMap: UefiMemoryMap) {
	var descriptor = memoryMap.memoryMap
	let descriptorSize: UInt64 = memoryMap.descriptorSize
	var result: UInt64 = 0u64
	var largestPages: UInt64 = 0u64

	var startOfMemoryMap: UInt64 = (memoryMap.memoryMap as! UInt64)
	var endOfMemoryMap: UInt64 = startOfMemoryMap + memoryMap.memoryMapSize
	var offset: UInt64 = startOfMemoryMap

	while offset < endOfMemoryMap {
		// Note: > not >= cause we should have some extra space next to this
		if descriptor.type == EFI_MEMORY_TYPE.EfiConventionalMemory, descriptor.numberOfPages > largestPages {
			largestPages = descriptor.numberOfPages
			result = descriptor.physicalStart
		}

		offset += descriptorSize
		descriptor = getNextDescriptor(descriptor, descriptorSize)
	}

	// Note: causes a crash if not %8 and `largestPages * pageSize`
	serialPrintf("[paging] conventionalAllocateLargest is %8 bytes, %8 pages\n",
				 pageSize * largestPages, largestPages)

	return result
}

var conventionalOffset: UInt64 = 0u64
fun conventionalAllocateNext(bytes: UInt64): UInt64 {
	let result = conventionalOffset
	let pages = bytes / pageSize // Math.floor
	conventionalOffset += pages * pageSize
	if (bytes - (pages * pageSize)) > 0 {
		conventionalOffset += pageSize
	}
	return result
}

	// TODO map with hugepages!!!
fun mapFrameBuffer(@readonly fb: FrameBuffer) {
	// TODO map ALL with EPIC pages?
	mapMemory(frameBufferVirtualBase, fb.base as! UInt64, fb.size / pageSize + 1u64, 1u8)
}
