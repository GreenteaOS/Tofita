// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// AMD64 assembly instructions wrapper

@inline fun cpuid(
	leaf: UInt32,
	subLeaf: UInt32,
	eax: ArrayPointer<UInt32>,
	ebx: ArrayPointer<UInt32>,
	ecx: ArrayPointer<UInt32>,
	edx: ArrayPointer<UInt32>
) {
	var a: UInt32 = 0
	var b: UInt32 = 0
	var c: UInt32 = 0
	var d: UInt32 = 0
	// asm volatile("cpuid" : "=a"(a), "=b"(b), "=c"(c), "=d"(d) : "a"(leaf), "c"(subleaf))
	// TODO to cpu.asm
	eax[0] = a
	ebx[0] = b
	ecx[0] = c
	edx[0] = d
}

// Note: this also a way to clear TLB cache even if cr3 not switched to another
@rename('writeCr3')
declare fun writeCr3(value: UInt64): Void
// TODO asm("invd")
@rename('halt')
declare fun halt(): Void
@rename('enableAllInterrupts')
declare fun enableAllInterrupts(): Void
// Except non-mascable
@rename('disableAllInterrupts')
declare fun disableAllInterrupts(): Void
@rename('enableAllInterruptsAndHalt')
declare fun enableAllInterruptsAndHalt(): Void
@rename('pause')
declare fun pause(): Void
@rename('yield')
declare fun yield(): Void
