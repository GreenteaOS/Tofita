// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Used only for STB

#define free libc_free
#define malloc libc_malloc
#define realloc libc_realloc
#define memset libc_memset
#define abs libc_abs
#define pow libc_pow

fun libc_free(void *addr) {
	// Do nothing for now
	serialPrintf("[libc] libc_free\n");
}

void *libc_malloc(UInt64 size) {
	serialPrintf("[libc] libc_malloc of size %u\n", size);
	return (void *)PhysicalAllocator.allocateBytes(size);
}

void *libc_realloc(void *addr, UInt64 size) {
	serialPrintf("[libc] libc_realloc %u of size %u\n", addr, size);

	{
		var result = PhysicalAllocator.allocateBytes(size);
		return (void *)result;
	}
}

void *libc_memset(void *b, Int32 c, Int32 len) {
	Int32 i;
	UInt8 *p = (UInt8 *)b;
	i = 0;
	while (len > 0) {
		*p = c;
		p++;
		len--;
	}
	return (b);
}

Int32 libc_abs(Int32 v) {
	return v * ((v < 0) * (-1) + (v > 0));
}

Int32 libc_pow(Int32 a, Int32 n) {
	Int32 r = 1;
	while (n > 0) {
		if (n & 1)
			r *= a;
		a *= a;
		n >>= 1;
	}
	return r;
}

fun libc_memcpy(void *dest, const void *src, UInt64 n) {
	const UInt8 *csrc = (UInt8 *)src;
	UInt8 *cdest = (UInt8 *)dest;
	for (Int32 i = 0; i < n; i++)
		cdest[i] = csrc[i];
}

fun memcpy(void *dest, const void *src, UInt64 n) {
	libc_memcpy(dest, src, n);
}
