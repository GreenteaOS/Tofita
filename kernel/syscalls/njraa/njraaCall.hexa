// The Tofita Kernel
// Copyright (C) 2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun njraaCallHandled(@volatile process TofitaProcess, syscall TofitaSyscalls) Bool {
	@volatile var frame = process.frame

	if syscall == TofitaSyscalls.SwapWindowFramebuffer {
		// TODO should actually be probe for copy to stack
		// Another idea: copy to safe 4k buffer and cast from it
		// ^ well actually to know proper sizeof code gen would be better
		// Also: could be locking virtual memory altering syscalls while handling them
		// Anyway must guard the logic itself in probing, like returning optional null from probeForRead on fail

		// TODO Note: temporal page must be kernel-only for read and write to avoid
		// other user *threads* accessing it
		// TODO if page is zero just step over to next instruction? except of conditional mov
		if not probeForReadOkay(frame.rdxArg1, sizeOf<SwapWindowFramebufferPayload>()) {
			return false
		}

		let payload = frame.rdxArg1 as! SwapWindowFramebufferPayload

		// TODO should copy from stack complete filled fb to this location
		// TODO not that (ptr + size) should be saturating add, to not wrap around,
		// cause otherwise it will be again under <lower and pass checks for
		// user memory pointer validity, but be pointing at kernel memory
		if not probeForWriteOkay((payload.fb as! UInt64), sizeOf<WindowFramebuffer>()) {
			return false
		}

		var windowId UInt64 = payload.windowId

		var fb = payload.fb as! WindowFramebuffer
		var window = overlappedWindow_find(process.pid, windowId)

		if window == null {
			return false
		}

		let width = window.width
		let height = window.height
		let bytes = width * height * sizeOf<Pixel32>()

		if window.fbZeta != null {
			window.fbCurrentZeta = not window.fbCurrentZeta
			if window.fbCurrentZeta {
				// TODO triple buffer: screen<-fb<-zeta and no gama
				tmemcpy(window.fbZeta.pixels as! ArrayPointer<UInt8>, window.fbGama.pixels as! ConstArrayPointer<UInt8>, bytes)
				// Pixels should be within process memory space
				fb.pixels = window.fbZetaUserAddress
				fb.width = window.fbZeta.width
				fb.height = window.fbZeta.height
			} else {
				tmemcpy(window.fbGama.pixels as! ArrayPointer<UInt8>, window.fbZeta.pixels as! ConstArrayPointer<UInt8>, bytes)
				fb.pixels = window.fbGamaUserAddress
				fb.width = window.fbGama.width
				fb.height = window.fbGama.height
			}
		} else {
			serialPrintln("TofitaSyscalls.SwapWindowFramebuffer window.fbZeta == null")
		}

		//		if window != null {
		//			var pixelsKernel = window.fbKernel.pixels
		//			var pixelsUser = window.fbUser.pixels
		//			let count = window.fbKernel.width * window.fbKernel.height
		//			for i in count
		//			{
		//				pixelsKernel[i] = pixelsUser[i]
		//			}
		//		} TODO dce

		// frame.raxReturn = 0
		process.schedulable = true
		return true
	}

	if syscall == TofitaSyscalls.GetOrCreateWindowFramebuffer {
		if not probeForReadOkay(frame.rdxArg1, sizeOf<SwapWindowFramebufferPayload>()) {
			return false
		}

		let payload = frame.rdxArg1 as! SwapWindowFramebufferPayload

		// TODO probeForWriteOkay alias taking pointer probeForWriteAtOkay
		if not probeForWriteOkay((payload.fb as! UInt64), sizeOf<WindowFramebuffer>()) {
			return false
		}

		var windowId UInt64 = payload.windowId

		var fb = payload.fb as! WindowFramebuffer
		var window = overlappedWindow_find(process.pid, windowId)

		if window == null {
			return false
		}

		// TODO resize fb *here* on window size change
		if window.fbZeta == null {
			let width = window.width
			let height = window.height

			let bytes = width * height * sizeOf<Pixel32>()
			// serialPrintln("[GetOrCreateWindowFramebuffer.allocateBytes]")
			// window.fbZeta.pixels = PhysicalAllocator.allocateBytes(bytes) as! Pixel32
			// window.fbGama.pixels = PhysicalAllocator.allocateBytes(bytes) as! Pixel32

			// TODO client width
			// TODO fail-able allocation and protection of too-big window size (use same limit as original)
			// TODO ensure they are 4k-aligned or respect in-page offset
			window.fbZeta = allocatePageAlignedBitmap(width, height)
			window.fbGama = allocatePageAlignedBitmap(width, height)

			// TODO 0x0? or use vibrance? describe decision
			memset(window.fbZeta.pixels as! ArrayPointer<UInt8>, 0x33, bytes)
			memset(window.fbGama.pixels as! ArrayPointer<UInt8>, 0x33, bytes)

			// window.fbZeta.width = width // TODO client width
			// window.fbZeta.height = height
			// window.fbGama.width = width // TODO client width
			// window.fbGama.height = height

			// Now map into user memory
			let pages = down_bytes_to_pages(bytes) + 1u32

			// TODO handle failure (and de-allocate)
			// ^ user code should know about failure by error code or null pointer
			window.fbZetaUserAddress = findUserspaceMemory(
				process.pml4,
				0, // Any address
				pages,
				process.limits
			)

			let physicalAddr = resolveAddr(process.pml4, window.fbZeta.pixels as! UInt64)

			// TODO handle failure
			mapMemory(
				process.pml4,
				virtualAddr: window.fbZetaUserAddress,
				physicalAddr: physicalAddr,
				pages,
				accessibleByUser: true
			)

			// TODO handle failure
			window.fbGamaUserAddress = findUserspaceMemory(
				process.pml4,
				0, // Any address
				pages,
				process.limits
			)

			// TODO is `resolveAddr` good choice here?
			let physicalAddr = resolveAddr(process.pml4, window.fbGama.pixels as! UInt64)

			// TODO handle failure
			mapMemory(
				process.pml4,
				virtualAddr: window.fbGamaUserAddress,
				physicalAddr: physicalAddr,
				pages,
				accessibleByUser: true
			)
		}

		if window.fbCurrentZeta {
			fb.pixels = window.fbZetaUserAddress
			fb.width = window.fbZeta.width
			fb.height = window.fbZeta.height
		} else {
			fb.pixels = window.fbGamaUserAddress
			fb.width = window.fbGama.width
			fb.height = window.fbGama.height
		}

		// frame.raxReturn = 0
		process.schedulable = true
		return true
	}

	return false
}
