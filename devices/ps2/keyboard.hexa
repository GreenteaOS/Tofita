// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on http://www.osdever.net/bkerndev/Docs/keyboard.htm

var keyboardPressedState[128]: UInt8 = {0}
let keyboardMap[128]: UInt8 = {
	0,	  27,  '1', '2', '3', '4', '5', '6', '7',
	'8', // 9
	'9',  '0', '-', '=',
	'\b', // Backspace
	'\t', // Tab
	'q',  'w', 'e',
	'r', // 19
	't',  'y', 'u', 'i', 'o', 'p', '[', ']',
	'\n', // Enter key
	0,	  // 29 - Control
	'a',  's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',
	';', // 39
	'\'', '`',
	0, // Left shift
	'\\', 'z', 'x', 'c', 'v', 'b',
	'n', // 49
	'm',  ',', '.', '/',
	0, // Right shift
	'*',
	0,	 // Alt
	' ', // Space bar
	0,	 // Caps lock
	0,	 // 59 - F1 key ... >
	0,	  0,   0,	0,	 0,	  0,   0,	0,
	0, // < ... F10
	0, // 69 - Num lock
	0, // Scroll Lock
	0, // Home key
	0, // Up Arrow
	0, // Page Up
	'-',
	0, // Left Arrow
	0,
	0, // Right Arrow
	'+',
	0, // 79 - End key
	0, // Down Arrow
	0, // Page Down
	0, // Insert Key
	0, // Delete Key
	0,	  0,   0,
	0, // F11 Key
	0, // F12 Key
	0, // All other keys are undefined
}

let STATUS_REGISTER = 0x64
let DATA_PORT = 0x60

fun handleKeyboardPacket() {
	// serialPrint("[keyboard] intreruroror")
	// readPort(STATUS_REGISTER)
	// readPort(DATA_PORT)
	// writePort(PIC1_COMMAND, PIC_EOI)
	// return
	// Fixes race condition / hang,
	// but probably not the best way to do it
	// cause keyboard is *not* handled in the poller
	// if (polls)
	//	return

	// if (lockMouse)
	//	return
	// while (lockMouse) {}
	// lockMouse = true

	// UInt8 status = readPort(STATUS_REGISTER)

	/// PS2 Mouse
	// if (status & 0x20) {
	//	//    UInt8 keycode = readPort(DATA_PORT)
	//	//    //if (keycode < 0) {
	//	lockMouse = false
	//	handleMousePacket()
	//	return
	//	//    //}
	//	//    //UInt8 buffer[] = {keyboardMap[keycode], 0}
	//	//    UInt8 buffer[] = {'M','o','u','s','e',':', 0}
	//	//    serialPrint(buffer)
	//	//    serialPrint(buffer)
	//}

	// if (status & 0x1)
	{
		var keycode: UInt8 = readPort(DATA_PORT)

		if (keycode < 0) {
			// lockMouse = false
			return
		}

		if (keycode < 128) {
			WideChar buffer[] = {(char8_t)keyboardMap[keycode], 0}
			if (buffer[0] == 0)
				buffer[0] = '?'
			// serialPrint("[")
			// serialPrint(buffer)
			// serialPrintf(" down] %d\n", keycode)
			keyboardPressedState[keycode] = 1
			if (haveToQuake)
				quakeHandleButtonDown(keycode)
			else {
				// handleKeyDown(keycode)
			}
		} else {
			keycode = keycode - 128
			WideChar buffer[] = {(char8_t)keyboardMap[keycode], 0}
			if (buffer[0] == 0)
				buffer[0] = '?'
			// serialPrint("[")
			// serialPrint(buffer)
			// serialPrintf(" up] %d\n", keycode + 128)
			keyboardPressedState[keycode] = 0
		}

		// if (status & 0x20) {
		//    UInt8 buffer[] = {'M', 0}
		//    serialPrint(buffer)
		//}
	}

	// Note: Quake terminal has higher priority than kernel itself
	if (keyboardPressedState[41]) {
		haveToQuake = !haveToQuake
		// TODO DWM
		haveToRender = 1
	}

	// keyDownHandler = null
	// if (haveToQuake)
	//	keyDownHandler = quakeHandleButtonDown

	// EOI
	// Disable this line if polling is used
	// TODO @defer
	writePort(PIC1_COMMAND, PIC_EOI)
	// lockMouse = false
}

fun handleKeyboard() {
	// UInt8 status = readPort(STATUS_REGISTER)
	// pollForce = status
}
