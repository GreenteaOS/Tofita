// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Desktop window manager (i.e. GUI logic)

// Zero for system GUI (like taskbar)
var firstResponder: UInt64 = 0 // Active window to catch keyboard input

@struct
class OverlappedWindow {
	var present: Bool
	var pid: UInt64 // Owner
	// TODO tid - thread id
	var windowId: UInt64
	var nextId: UInt64
	var prevId: UInt64
	var hWnd: HWnd

	var visible: Bool
	var title: ConstWideCharPointer

	var x: Int16
	var y: Int16

	var width: UInt16
	var height: UInt16

	// fb.pixels == null if framebuffer not present
	// Note: fb size may be != current window size
	var fbZeta: Pointer<Bitmap32>
	var fbGama: Pointer<Bitmap32>
	var fbCurrentZeta: Bool // Use to swap chain
}

const UInt64 windowsLimit = 256

// TODO allocate dynamically (just use Hexa Array or something)
OverlappedWindow windowsList[windowsLimit]

var rootWindow: UInt64 = 0
var topmostWindow: UInt64 = 0

var mouseDragCapturedWindow: Bool = false
var mouseDragWindow: UInt64 = 0
var mouseDragLastX: Int16 = 0
var mouseDragLastY: Int16 = 0

// Note: those are controlled by DWM
@volatile Int16 mouseX = 256
@volatile Int16 mouseY = 256

enum FrameHover : UInt8 {
	Noop = 0
	Min
	Max
	Close
}

var frameHoverWindow: UInt64 = 0
var frameHoverWindowDown: Bool = false
var frameHoverState: FrameHover = FrameHover.Noop

OverlappedWindow *OverlappedWindow_create(pid: UInt64)
OverlappedWindow *OverlappedWindow_findAnyProcessWindow(pid: UInt64)
OverlappedWindow *OverlappedWindow_find(pid: UInt64, windowId: UInt64)
fun OverlappedWindow_detach(windowId: UInt64)
fun OverlappedWindow_attach(windowId: UInt64)
fun OverlappedWindow_destroy(windowId: UInt64)
fun initDwm()
fun handleMouseActivity()
fun handleKeyboardActivity()
UInt64 findWindowUnderCursor(Int16 mouseX, mouseY: Int16)
