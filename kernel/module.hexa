// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Implementation of hybrid kernel modules
// Modules are .dll files

@struct
class Module {
	var name: ArrayPointer<ClangChar>
	var dll: RamDiskAsset
	var base: UInt64
}

@struct
class ModuleInterim {
	var name: ArrayPointer<ClangChar>
	var dll: RamDiskAsset
}

fun loadModule(params: ModuleInterim): Module {
	var module = PhysicalAllocator.allocateBytes(sizeOf<Module>()) as! Module // TODO new Module
	module.name = params.name // TODO copy string
	module.dll = params.dll

	// TODO relocation? or overwrite?
	var ptr = params.dll.data as! ArrayPointer<UInt8>
	var peHeader = ((ptr as! UInt64) + ptr[0x3C] + ptr[0x3C + 1] * 256) as! PeHeader
	var peOptionalHeader = ((peHeader as! UInt64) + sizeOf<PeHeader>()) as! Pe32OptionalHeader
	var base = peOptionalHeader.imageBase as! ArrayPointer<UInt8>
	memset(base, 0, peOptionalHeader.sizeOfImage) // Zeroing
	module.base = peOptionalHeader.imageBase

	// Copy sections
	for i in peHeader.numberOfSections {
		let imageSectionHeader =
			(
				(peOptionalHeader as! UInt64)
				+ (sizeOf<ImageSectionHeader>() * i)
				+ peHeader.sizeOfOptionalHeader
			) as! ImageSectionHeader

		serialPrintf("Copy section [%d] named '%s' of size %d\n",
			i,
			imageSectionHeader.name,
			imageSectionHeader.sizeOfRawData
		)
		var where: UInt64 = (base as! UInt64) + imageSectionHeader.virtualAddress

		tmemcpy(where as! ArrayPointer<UInt8>,
				((params.dll.data as! UInt64) + (imageSectionHeader.pointerToRawData as! UInt64)) as! ConstArrayPointer<UInt8>,
				imageSectionHeader.sizeOfRawData)
	}

	return module
}
