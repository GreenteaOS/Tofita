// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun loadRamDiskFromVolume(efi.bootsvc: Pointer<EFI_BOOT_SERVICES>, efi.root: Pointer<EFI_FILE_PROTOCOL>,
									  ramdisk: Pointer<RamDisk>): efi.EFI_STATUS {
	var status: efi.EFI_STATUS
	efi.CHAR16 *name = (efi.CHAR16 *)"TOFITA.DAT"

	var file: Pointer<efi.EFI_FILE_PROTOCOL> = null
	status = root.Open(root, Pointer.of(file), (efi.CHAR16 *)name, EFI_FILE_MODE_READ,
						EFI_FILE_READ_ONLY | EFI_FILE_HIDDEN | EFI_FILE_SYSTEM)

	if (status == EFI_NOT_FOUND) {
		return status
	}

	serialPrintf("[[[efi_main.loadRamDiskFromVolume]]] status: Open %d\n", status)

	UInt8 info[sizeof(efi.EFI_FILE_INFO) + 100]
	var infoSize: UInt64 = sizeof(info)

	efi.EFI_GUID GenericFileInfo = EFI_FILE_INFO_ID

	status = file.GetInfo(file, &GenericFileInfo, Pointer.of(infoSize), info)
	serialPrintf("[[[efi_main.loadRamDiskFromVolume]]] status: GetInfo %d\n", status)

	var size: UInt64 = ((efi.EFI_FILE_INFO *)info).FileSize
	serialPrintf("[[[efi_main.loadRamDiskFromVolume]]] FileSize %d\n", size)

	var sizeAlloc: UInt64 = (size / pageSize + 1) * pageSize
	sizeAlloc += sizeof(efi.EFI_MEMORY_DESCRIPTOR) * 512 // Combined allocation for mem map

	var address: Pointer<Void> = null
	status = uefiAllocate(bootsvc, Pointer.of(sizeAlloc), Pointer.of(address))
	serialPrintf("[[[efi_main.loadRamDiskFromVolume]]] status: uefiAllocate %d, size %d at %d\n", status,
				 size, address)

	if (status != EFI_SUCCESS) {
		return status
	}

	status = file.Read(file, Pointer.of(size), address)
	serialPrintf("[[[efi_main.loadRamDiskFromVolume]]] status: Read %d\n", status)

	status = file.Close(file)
	serialPrintf("[[[efi_main.loadRamDiskFromVolume]]] status: Close %d\n", status)

	var uints: Pointer<UInt32> = (UInt32 *)(address)
	var checksize: UInt32 = size / 4 // `size` is rounded upto 4 bytes by assets generator
	var checksum: UInt32 = 0

	for (UInt32 i = 1; i < checksize; i++) // Start from 1, coz 0 contains original checksum
		checksum = uints[i] & 0xFFFF ^ checksum

	serialPrintf("[[[efi_main.loadRamDiskFromVolume]]] checksum: %d expected: %d\n", checksum, uints[0])
	if (checksum != uints[0]) {
		serialPrintln(
			"[[[efi_main.loadRamDiskFromVolume]]] <ERROR> checksum is incorrect, disk may be corrupted!")
	}

	ramdisk.base = address as! UInt64
	ramdisk.size = size

	return EFI_SUCCESS
}

// returns EFI_SUCCESS or EFI_NOT_FOUND
fun findAndLoadRamDisk(efi.bootsvc: Pointer<EFI_BOOT_SERVICES>, ramdisk: Pointer<RamDisk>): efi.EFI_STATUS {
	var status: efi.EFI_STATUS = EFI_NOT_READY
	var handleBuffer: Pointer<efi.EFI_HANDLE> = null
	var handleCount: UInt64 = 0

	var simpleFileSystemProtocol: efi.EFI_GUID = EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID

	status = bootsvc.LocateHandleBuffer(efi.ByProtocol, Pointer.of(simpleFileSystemProtocol), null, Pointer.of(handleCount),
										 Pointer.of(handleBuffer))
	if (status != EFI_SUCCESS) {
		serialPrintf("[[[efi_main.findAndLoadRamDisk]]] <ERROR> failed: LocateHandleBuffer %d\n", status)
	} else {
		serialPrintf("[[[efi_main.findAndLoadRamDisk]]] success: LocateHandleBuffer, got %d handles\n",
					 handleCount)
	}

	for (UInt64 i = 0; i < handleCount; ++i) {
		serialPrintf("[[[efi_main.findAndLoadRamDisk]]] loading handle #%d of %d handles\n", i, handleCount)
		var fileSystem: Pointer<efi.EFI_SIMPLE_FILE_SYSTEM_PROTOCOL> = null

		status = bootsvc.HandleProtocol(handleBuffer[i], Pointer.of(simpleFileSystemProtocol), (Void **)Pointer.of(fileSystem))

		if (status != EFI_SUCCESS) {
			serialPrintf(
				"[[[efi_main.findAndLoadRamDisk]]] HandleProtocol got a non-file system (status %d, handle "
				+
				"%d), continue\n",
				status, i)
			continue
		}

		serialPrintln("[[[efi_main.findAndLoadRamDisk]]] success: HandleProtocol found a file system")
		var root: Pointer<efi.EFI_FILE_PROTOCOL> = null
		status = fileSystem.OpenVolume(fileSystem, Pointer.of(root))
		if (status != EFI_SUCCESS) {
			serialPrintf("[[[efi_main.findAndLoadRamDisk]]] failed: OpenVolume with status %d, continue to "
						 +
						 "the next one\n",
						 status)
			continue
		}

		status = loadRamDiskFromVolume(bootsvc, root, ramdisk)
		if (status != EFI_SUCCESS) {
			serialPrintf(
				"[[[efi_main.findAndLoadRamDisk]]] failed: loadRamDiskFromVolume with status %d, continue "
				+
				"to the next one\n",
				status)
			continue
		}

		return EFI_SUCCESS
	}

	serialPrintf("[[[efi_main.findAndLoadRamDisk]]] <ERROR> failed to find RAM disk at all\n")
	return EFI_NOT_FOUND
}
