// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

#undef free libc_free
#undef malloc libc_malloc
#undef realloc libc_realloc
#undef memset libc_memset
#undef abs libc_abs
#undef pow libc_pow
#undef memcpy libc_memcpy

Bitmap32 *loadPng32FromBuffer(UInt8 *data, size: UInt32) {
	Int32 width, height, png_bpp
	var colors: Pointer<UInt8> = stbi_load_from_memory(data, size, &width, &height, &png_bpp, 4)
	var bitmap: Pointer<Bitmap32> = allocateBitmap(width, height)

	var rgba: Pointer<UInt32> = (UInt32 *)colors
	for (UInt16 y = 0; y < height; y++)
		for (UInt16 x = 0; x < width; x++) {
			bitmap.pixels[y * width + x].color = rgba[y * width + x]
			// This should be fixed in framebuffer? Or PNG really BGRA?
			var temp: UInt8 = bitmap.pixels[y * width + x].rgba.r
			bitmap.pixels[y * width + x].rgba.r = bitmap.pixels[y * width + x].rgba.b
			bitmap.pixels[y * width + x].rgba.b = temp
		}

	return bitmap
}

Bitmap32 *loadPng32(const RamDiskAsset *asset) {
	return loadPng32FromBuffer(asset.data, asset.size)
}
