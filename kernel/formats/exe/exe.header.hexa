// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.



// 1 byte aligned
#pragma pack(1)
@struct
class PeHeader {
	var magic: UInt32 // PE\0\0 or 0x00004550
	var machine: UInt16
	var numberOfSections: UInt16
	var timeDateStamp: UInt32
	var pointerToSymbolTable: UInt32
	var numberOfSymbols: UInt32
	var sizeOfOptionalHeader: UInt16
	var characteristics: UInt16
} @packed
#pragma pack()

_Static_assert(sizeof(PeHeader) == 24, "sizeof is incorrect")

// 1 byte aligned
#pragma pack(1)
@struct
class Pe64OptionalHeader {
	var magic: UInt16 // 0x010b - PE32, 0x020b - PE32+ (64 bit)
	var majorLinkerVersion: UInt8
	var minorLinkerVersion: UInt8
	var sizeOfCode: UInt32
	var sizeOfInitializedData: UInt32
	var sizeOfUninitializedData: UInt32
	var addressOfEntryPoint: UInt32
	var baseOfCode: UInt32
	var imageBase: UInt64
	var sectionAlignment: UInt32
	var fileAlignment: UInt32
	var majorOperatingSystemVersion: UInt16
	var minorOperatingSystemVersion: UInt16
	var majorImageVersion: UInt16
	var minorImageVersion: UInt16
	var majorSubsystemVersion: UInt16
	var minorSubsystemVersion: UInt16
	var win32VersionValue: UInt32
	var sizeOfImage: UInt32
	var sizeOfHeaders: UInt32
	var checkSum: UInt32
	var subsystem: UInt16
	var dllCharacteristics: UInt16
	var sizeOfStackReserve: UInt64
	var sizeOfStackCommit: UInt64
	var sizeOfHeapReserve: UInt64
	var sizeOfHeapCommit: UInt64
	var loaderFlags: UInt32
	var numberOfRvaAndSizes: UInt32
} @packed
#pragma pack()

// 1 byte aligned
#pragma pack(1)
@struct
class Pe32OptionalHeader {
	var magic: UInt16 // 0x010b - PE32, 0x020b - PE32+ (64 bit)
	var majorLinkerVersion: UInt8
	var minorLinkerVersion: UInt8
	var sizeOfCode: UInt32
	var sizeOfInitializedData: UInt32
	var sizeOfUninitializedData: UInt32
	var addressOfEntryPoint: UInt32
	var baseOfCode: UInt32
	var baseOfData: UInt32 // present only in 32-bit
	var imageBase: UInt32
	var sectionAlignment: UInt32
	var fileAlignment: UInt32
	var majorOperatingSystemVersion: UInt16
	var minorOperatingSystemVersion: UInt16
	var majorImageVersion: UInt16
	var minorImageVersion: UInt16
	var majorSubsystemVersion: UInt16
	var minorSubsystemVersion: UInt16
	var win32VersionValue: UInt32
	var sizeOfImage: UInt32
	var sizeOfHeaders: UInt32
	var checkSum: UInt32
	var subsystem: UInt16
	var dllCharacteristics: UInt16
	var sizeOfStackReserve: UInt32
	var sizeOfStackCommit: UInt32
	var sizeOfHeapReserve: UInt32
	var sizeOfHeapCommit: UInt32
	var loaderFlags: UInt32
	var numberOfRvaAndSizes: UInt32
} @packed
#pragma pack()

#pragma pack(1)
@struct
class ImageSectionHeader { // size 40 bytes
	var name[8]: UInt8
	var virtualSize: UInt32
	var virtualAddress: UInt32
	var sizeOfRawData: UInt32
	var pointerToRawData: UInt32
	var pointerToRealocations: UInt32
	var pointerToLinenumbers: UInt32
	var numberOfRealocations: UInt16
	var numberOfLinenumbers: UInt16
	var characteristics: UInt32
} @packed
#pragma pack()

_Static_assert(sizeof(ImageSectionHeader) == 40, "sizeof is incorrect")

let IMAGE_DIRECTORY_ENTRY_EXPORT = 0	  // Export Directory
let IMAGE_DIRECTORY_ENTRY_IMPORT = 1	  // Import Directory
let IMAGE_DIRECTORY_ENTRY_RESOURCE = 2  // Resource Directory
let IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3 // Exception Directory
let IMAGE_DIRECTORY_ENTRY_SECURITY = 4  // Security Directory
let IMAGE_DIRECTORY_ENTRY_BASERELOC = 5 // Base Relocation Table
let IMAGE_DIRECTORY_ENTRY_DEBUG = 6	  // Debug Directory
//      IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // (usage: X86)
let IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7	// Architecture Specific Data
let IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8		// RVA of GP
let IMAGE_DIRECTORY_ENTRY_TLS = 9				// TLS Directory
let IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10	// Load Configuration Directory
let IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11	// Bound Import Directory in headers
let IMAGE_DIRECTORY_ENTRY_IAT = 12			// Import Address Table
let IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13	// Delay Load Import Descriptors
let IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14 // COM Runtime descriptor

typedef struct _IMAGE_EXPORT_DIRECTORY {
	var characteristics: UInt32
	var timeDateStamp: UInt32
	var majorVersion: UInt16
	var minorVersion: UInt16
	var name: UInt32
	var base: UInt32
	var numberOfFunctions: UInt32
	var numberOfNames: UInt32
	var addressOfFunctions: UInt32
	var addressOfNames: UInt32
	var addressOfNameOrdinals: UInt32
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY

typedef struct _IMAGE_BASE_RELOCATION {
	var virtualAddress: UInt32
	var sizeOfBlock: UInt32
} IMAGE_BASE_RELOCATION, *PIMAGE_BASE_RELOCATION

typedef struct _IMAGE_DATA_DIRECTORY {
	var virtualAddress: UInt32
	var size: UInt32
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY
let IMAGE_SIZEOF_BASE_RELOCATION = 8
let IMAGE_REL_BASED_ABSOLUTE = 0
let IMAGE_REL_BASED_DIR64 = 10
let IMAGE_REL_BASED_HIGHLOW = 3

#pragma pack(1)
typedef struct _IMAGE_IMPORT_DESCRIPTOR {
	//_ANONYMOUS_UNION union {
	//	var characteristics: UInt32
	var originalFirstThunk: UInt32
	//} DUMMYUNIONNAME
	var timeDateStamp: UInt32
	var forwarderChain: UInt32
	var name: UInt32
	var firstThunk: UInt32
} IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR
#pragma pack()

typedef Void (*FARPROC)()

typedef struct _IMAGE_IMPORT_BY_NAME {
	var hint: UInt16
	var name[1]: UInt8
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME

typedef struct _IMAGE_THUNK_DATA {
	union {
		var fun: UInt64 // address of imported fun
		var ordinal: UInt32 // ordinal value of fun
		var addressOfData: PIMAGE_IMPORT_BY_NAME // RVA of imported name
		var forwarderStringl: UInt32 // RVA to forwarder string
	} u1
} IMAGE_THUNK_DATA, *PIMAGE_THUNK_DATA
