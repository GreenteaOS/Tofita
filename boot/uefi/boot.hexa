// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Boot loader: enters efi_main, reads all UEFI data and starts kernel loader

@extern "C" {


#include <efi.hpp>
}

#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdarg.h>

#include "../shared/boot.hpp"
#include "../../devices/serial/init.cpp"
#include "memory.cpp"
#include "ramdisk.cpp"
#include "pe.cpp"
#include "visuals.cpp"
#include "../../kernel/ramdisk.cpp"

efi.INTN compareGuid(efi.EFI_GUID *guid1, efi.EFI_GUID *guid2) {
	efi.INT32 *g1, *g2, r
	g1 = (efi.INT32 *)guid1
	g2 = (efi.INT32 *)guid2
	r = g1[0] - g2[0]
	r |= g1[1] - g2[1]
	r |= g1[2] - g2[2]
	r |= g1[3] - g2[3]
	return r
}

Void *tmemcpy(Void *dest, const Void *src, count: UInt64) {
	UInt8 *dst8 = (UInt8 *)dest
	UInt8 *src8 = (UInt8 *)src

	while (count--) {
		*dst8++ = *src8++
	}

	return dest
}

// Loading animation, progress 0...2
fun drawLoading(Framebuffer *framebuffer, progress: UInt8) {
	for (UInt8 y = 0; y < leavesHeight; y++)
		for (UInt8 x = 0; x < leavesWidth; x++) {
			let pixel = getBitmapPixel(binLeavesBitmap, x, y, leavesWidth, leavesHeight)
			drawPixel(framebuffer,
					  x + framebuffer.width / 2 - (leavesWidth / 2) + progress * leavesWidth * 2 -
						  leavesWidth * 2,
					  y + (framebuffer.height / 4) * 3, pixel)
		}
}

#include "../shared/paging.cpp"

Void *memset(Void *dest, e: Int32, len: UInt64) {
	UInt8 *d = (UInt8 *)dest
	for (UInt64 i = 0; i < len; i++, d++) {
		*d = e
	}
	return dest
}

// CR3 trampoline
@extern "C" fun @fastcall
trampolineCR3(@volatile UInt64 kernelParams, @volatile UInt64 pml4, @volatile UInt64 stack,
			  @volatile UInt64 entry)

// Entry point
efi.EFI_STATUS efi_main(efi.EFI_HANDLE imageHandle, efi.EFI_SYSTEM_TABLE *systemTable) {
	initSerial()
	serialPrint("\n[[[efi_main]]] Tofita " STR(versionMajor) "." STR(
		versionMinor) " " versionName " UEFI bootloader. Welcome!\n")

	initText()

	// Disable watchdog timer
	systemTable.BootServices.SetWatchdogTimer(0, 0, 0, NULL)

	{
		var revision: UInt32 = systemTable.FirmwareRevision
		var minor: UInt16 = (uint16_t)revision
		var major: UInt16 = (uint16_t)(revision >> 16)
		serialPrintf("[[[efi_main]]] UEFI revision %d.%d\n", major, minor)
	}

	// Actually, no matter where lower is present, cause no lower-relative addressing done in kernel
	// after calling cr3 at the first instruction
	// so it is safe to allocate it at random position in conventional memory

	let upper: UInt64 = (uint64_t)0xffff800000000000
	Void *acpiTable = NULL
	{
		serialPrintln("[[[efi_main]]] begin: ACPI")
		efi.EFI_GUID acpi20 = ACPI_20_TABLE_GUID
		efi.EFI_GUID acpi = ACPI_TABLE_GUID

		for (UInt64 i = 0; i < systemTable.NumberOfTableEntries; i++) {
			efi.EFI_CONFIGURATION_TABLE *efiTable = &systemTable.ConfigurationTable[i]
			if (0 == compareGuid(&efiTable.VendorGuid, &acpi20)) { // Prefer ACPI 2.0
				acpiTable = efiTable.VendorTable
				serialPrintln("[[[efi_main]]] found: ACPI 2.0")
				break
			} else if (0 == compareGuid(&efiTable.VendorGuid, &acpi)) {
				// acpiTable = (Void *)((intptr_t)efiTable.VendorTable | 0x1) // LSB high
				// ACPI 2.0 is required by Tofita
				// So we don't need to support ACPI 1.0
				serialPrintln("[[[efi_main]]] found: ACPI 1.0, ignoring")
			}
		}

		// TODO also transfer ACPI version to report SandyBridge
		serialPrintln("[[[efi_main]]] done: ACPI")
	}

	efi.EFI_STATUS status = EFI_NOT_READY

	serialPrintln("[[[efi_main]]] begin: initializeFramebuffer")
	Framebuffer framebuffer
	initializeFramebuffer(&framebuffer, systemTable)
	drawLoading(&framebuffer, 0)
	drawText("GreenteaOS " versionName " " STR(versionMajor) "." STR(versionMinor) " " versionTag "",
			 (framebuffer.height / 4) * 3 + 64, &framebuffer)
	let errorY: UInt16 = (framebuffer.height / 4) * 3 + 64 + 32

	// Check ACPI here, after framebuffer initialization
	while (acpiTable == NULL) {
		drawText("[ERROR] Tofita requires ACPI 2.0 [ERROR]", errorY, &framebuffer)
	}

	// TODO: render something to show that loader is ok, because initial start form USB may take a while
	// TODO: show error message if ram < 512 or < 1024 mb and cancel boot (loop forever)
	serialPrintln("[[[efi_main]]] done: initializeFramebuffer")
	// TODO: log all ^ these to framebuffer (optionally)

	// Initial RAM disk
	RamDisk ramdisk
	status = findAndLoadRamDisk(systemTable.BootServices, &ramdisk)
	while (status != EFI_SUCCESS) {
		drawText("[ERROR] Tofita cannot load ramdisk [ERROR]", errorY, &framebuffer)
	}
	drawLoading(&framebuffer, 1)

	serialPrintln("[[[efi_main]]] begin: fillMemoryMap")
	var sizeAlloc: UInt64 = (ramdisk.size / PAGE_SIZE + 1) * PAGE_SIZE
	EfiMemoryMap efiMemoryMap
	efiMemoryMap.memoryMapSize = sizeof(efi.EFI_MEMORY_DESCRIPTOR) * 512
	efiMemoryMap.memoryMap = (efi.EFI_MEMORY_DESCRIPTOR *)(ramdisk.base + sizeAlloc)
	{
		UInt8 *b = (UInt8 *)efiMemoryMap.memoryMap
		for (UInt64 i = 0; i < efiMemoryMap.memoryMapSize; ++i) {
			// TODO faster with uint64_t
			b[i] = paging.buffa[0]
		}
	}
	fillMemoryMap(&efiMemoryMap, systemTable)
	serialPrintln("[[[efi_main]]] done: fillMemoryMap")

	efi.EFI_TIME time
	time.Year = 2020
	efi.EFI_TIME_CAPABILITIES capabilities
	{
		serialPrintln("[[[efi_main]]] begin: GetTime")
		efi.EFI_STATUS status = systemTable.RuntimeServices.GetTime(&time, &capabilities)
		while (status != EFI_SUCCESS) {
			serialPrintln("[[[efi_main]]] <ERROR> GetTime")
			drawText("[ERROR] Cannot get current time from UEFI [ERROR]", errorY, &framebuffer)
		}

		{
			serialPrintf("[[[efi_main]]] EFI_TIME Year=%d Month=%d Day=%d Hour=%d Minute=%d Second=%d "
						 "Nanosecond=%d TimeZone=%d Daylight=%d\n",
						 time.Year, time.Month, time.Day, time.Hour, time.Minute, time.Second,
						 time.Nanosecond, time.TimeZone, time.Daylight)

			serialPrintf("[[[efi_main]]] EFI_TIME_CAPABILITIES Resolution=%d Accuracy=%d SetsToZero=%d\n",
						 capabilities.Resolution, capabilities.Accuracy, capabilities.SetsToZero)

			// Set 2020 as least valid, so security/HTTPS certificates at least partially work
			// and file system is not messed
			if (time.Year < 2020)
				time.Year = 2020
		}
		serialPrintln("[[[efi_main]]] done: GetTime")
	}

	serialPrintln("[[[efi_main]]] begin: ExitBootServices")
	var oops: UInt8 = 0
	status = EFI_NOT_READY
	while (status != EFI_SUCCESS) {
		if (oops < 10)
			serialPrintln("[[[efi_main]]] try: ExitBootServices")
		if (oops == 100) {
			drawText("Loading...", errorY, &framebuffer)
			serialPrintln("[[[efi_main]]] <ERROR?> probably infinite loop on ExitBootServices")
			serialPrintln("[[[efi_main]]] <ERROR?> system may or may not start")
			oops = 200
		}
		if (oops < 100) {
			oops++
		}
		status = systemTable.BootServices.ExitBootServices(imageHandle, efiMemoryMap.mapKey)
	}

	if (status != EFI_SUCCESS) {
		// TODO `status` to string
		serialPrintln("[[[efi_main]]] <ERROR> ExitBootServices: EFI_LOAD_ERROR")
		return EFI_LOAD_ERROR
	}
	serialPrintln("[[[efi_main]]] done: ExitBootServices")

	setRamDisk(&ramdisk)

	serialPrintln("[[[efi_main]]] begin: preparing kernel loader")

	var asset: RamDiskAsset = getRamDiskAsset("tofita.gnu")
	serialPrintf("[[[efi_main]]] loaded asset 'tofita.gnu' %d bytes at %d\n", asset.size, asset.data)

	let largeBuffer: UInt64 = paging.conventionalAllocateLargest(&efiMemoryMap)
	serialPrintf("[[[efi_main]]] large buffer allocated at %u\n", largeBuffer)
	paging.conventionalOffset = largeBuffer
	var mAddressOfEntryPoint: UInt64 = 0

	{
		auto ptr = (UInt8 *)asset.data
		auto peHeader = (const PeHeader *)((uint64_t)ptr + ptr[0x3C] + ptr[0x3C + 1] * 256)
		serialPrintf("PE header signature 'PE' == '%s'\n", peHeader)
		auto peOptionalHeader = (const Pe32OptionalHeader *)((uint64_t)peHeader + sizeof(PeHeader))
		serialPrintf("PE32(+) optional header signature 0x020B == %d == %d\n", peOptionalHeader.mMagic,
					 0x020B)
		serialPrintf("PE32(+) size of image == %d\n", peOptionalHeader.mSizeOfImage)
		Void *kernelBase = (Void *)paging.conventionalAllocateNext(peOptionalHeader.mSizeOfImage)
		memset(kernelBase, 0, peOptionalHeader.mSizeOfImage) // Zeroing

		// Copy sections
		auto imageSectionHeader =
			(const ImageSectionHeader *)((uint64_t)peOptionalHeader + peHeader.mSizeOfOptionalHeader)
		for (UInt16 i = 0; i < peHeader.mNumberOfSections; ++i) {
			serialPrintf("Copy section [%d] named '%s' of size %d\n", i, &imageSectionHeader[i].mName,
						 imageSectionHeader[i].mSizeOfRawData)
			var where: UInt64 = (uint64_t)kernelBase + imageSectionHeader[i].mVirtualAddress

			tmemcpy((Void *)where,
					(Void *)((uint64_t)asset.data + (uint64_t)imageSectionHeader[i].mPointerToRawData),
					imageSectionHeader[i].mSizeOfRawData)
		}

		mAddressOfEntryPoint = peOptionalHeader.mAddressOfEntryPoint
	}

	KernelParams *params = (KernelParams *)paging.conventionalAllocateNext(sizeof(KernelParams))
	{
		UInt8 *b = (UInt8 *)params
		for (UInt64 i = 0; i < sizeof(KernelParams); ++i) {
			b[i] = paging.buffa[0]
		}
	}

	params.time = time
	params.capabilities = capabilities

	// Note: stack grows from x to X-N, not X+N
	// TODO: map empty page for stack overflow protection + map larger stack (~4 MB)
	var stack = paging.conventionalAllocateNext(1024 * 1024) + 1024 * 1024
	{
		UInt8 *b = (UInt8 *)(stack - 1024 * 1024)
		for (UInt64 i = 0; i < 1024 * 1024; ++i) {
			b[i] = paging.buffa[0]
		}
	}

	params.efiMemoryMap = efiMemoryMap
	params.ramdisk = ramdisk
	params.framebuffer = framebuffer

	// RAM usage bit-map

	var ram: UInt64 = paging.getRAMSize(&params.efiMemoryMap)
	var megs: UInt32 = (uint32_t)(ram / (1024 * 1024))
	serialPrintf("[paging] available RAM is ~%u megabytes\n", megs)
	while (megs < 768) {
		drawText("[ERROR] Tofita requires at least 1 GB of memory [ERROR]", errorY, &framebuffer)
		serialPrintf("Tofita requires at least 1 GB of memory\n")
	}
	params.ramBytes = ram
	params.physicalRamBitMaskVirtual = paging.conventionalAllocateNext(ram >> 12)

	paging.pml4entries =
		(paging.PageEntry *)paging.conventionalAllocateNext(sizeof(paging.PageEntry) * PAGE_TABLE_SIZE)

	{
		UInt8 *b = (UInt8 *)paging.pml4entries
		for (UInt64 i = 0; i < paging.conventionalOffset; ++i) {
			// TODO faster with uint64_t
			b[i] = paging.buffa[0]
		}
	}

	// Map memory

	serialPrintln("[[[efi_main]]] mapping pages for kernel loader")

	paging.mapMemory(upper, largeBuffer, (paging.conventionalOffset - largeBuffer) / PAGE_SIZE + 1, 1)

	// Note: framebuffer is *not* within physical memory
	paging.mapFramebuffer(&params.framebuffer)
	drawLoading(&framebuffer, 2)
	paging.mapEfi(&params.efiMemoryMap)
	paging.mapMemoryHuge(WholePhysicalStart, 0, ram / PAGE_SIZE)

	let startFunction = (InitKernelTrampoline)(paging.conventionalOffset + PAGE_SIZE)
	tmemcpy((Void *)startFunction, &trampolineCR3, 32)
	paging.mapMemory((uint64_t)startFunction, (uint64_t)startFunction, 1, 0)

	// Fix virtual addresses

	params.framebuffer.physical = params.framebuffer.base
	params.framebuffer.base = FramebufferStart

	params.ramdisk.physical = params.ramdisk.base
	params.ramdisk.base = WholePhysicalStart + params.ramdisk.physical

	params.pml4 = (uint64_t)paging.pml4entries // physical address for CPU
	params.stack = stack // physical address for stack overflow detection
	params.physicalBuffer = largeBuffer
	params.physicalBytes = paging.conventionalOffset - largeBuffer
	params.efiRuntimeServices = systemTable.RuntimeServices
	params.acpiTablePhysical = (uint64_t)(acpiTable)
	params.efiMemoryMap.memoryMap =
		(efi.EFI_MEMORY_DESCRIPTOR *)(WholePhysicalStart + (uint64_t)params.efiMemoryMap.memoryMap)

	// Convert addresses to upper half

	stack = (WholePhysicalStart as! UInt64) + stack
	params.physicalRamBitMaskVirtual = (WholePhysicalStart as! UInt64) + params.physicalRamBitMaskVirtual
	params = (KernelParams *)((WholePhysicalStart as! UInt64) + (uint64_t)params)

	serialPrintln("[[[efi_main]]] done: all done, entering kernel loader")

	serialPrint("[[[efi_main]]] CR3 points to: ")
	serialPrintHex((uint64_t)paging.pml4entries)
	serialPrint("\n")

	startFunction((uint64_t)params, (uint64_t)paging.pml4entries, stack, upper + mAddressOfEntryPoint)

	return EFI_SUCCESS
}
}
