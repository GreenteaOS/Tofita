// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Based on https://gitlab.com/nagisa/huehuehuehuehue/blob/master/src/serial.c

fun initSerial() UInt8 {
	// Calculate divisor for baud generator
	//    Ref_Clk_Rate / Baud_Rate / 16
	var divisor UInt32 = serial_clock_rate / (serial_baud_rate * 16u32)
	if (serial_clock_rate % (serial_baud_rate * 16)) >= serial_baud_rate * 8 {
		divisor++
	}
	// See if the serial port is already initialized
	var initialized Bool = true
	if (readSerialRegister(r_uart_lcr) & 0x3F) != (serial_line_control & 0x3F) {
		initialized = false
	}
	// Calculate current divisor
	writeSerialRegister(r_uart_lcr, readSerialRegister(r_uart_lcr) | b_uart_lcr_dlab)
	var currentDivisor UInt32 = readSerialRegister(r_uart_baud_high) << 8u32
	currentDivisor |= readSerialRegister(r_uart_baud_low) as! UInt32
	writeSerialRegister(r_uart_lcr, readSerialRegister(r_uart_lcr) & ~b_uart_lcr_dlab)
	// Fast path
	initialized = initialized && currentDivisor == divisor
	if initialized {
		return 1u8
	}
	// Wait for the serial port to be ready.
	// Verify that both the transmit FIFO and the shift register are empty.
	while (readSerialRegister(r_uart_lsr) & (b_uart_lsr_temt | b_uart_lsr_txrdy)) !=
		   (b_uart_lsr_temt | b_uart_lsr_txrdy) {}

	// Configure baud rate
	writeSerialRegister(r_uart_lcr, b_uart_lcr_dlab)
	writeSerialRegister(r_uart_baud_high, (divisor >> 8) as! UInt8)
	writeSerialRegister(r_uart_baud_low, (divisor & 0xff) as! UInt8)
	// Clear DLAB and configure Data Bits, Parity, and Stop Bits.
	// Strip reserved bits from PcdSerialLineControl
	writeSerialRegister(r_uart_lcr, (serial_line_control & 0x3F) as! UInt8)
	// Enable and reset FIFOs
	// Strip reserved bits from PcdSerialFifoControl
	writeSerialRegister(r_uart_fcr, 0x00)
	writeSerialRegister(r_uart_fcr, (serial_line_control & (b_uart_fcr_fifoe | b_uart_fcr_fifo64)) as! UInt8)
	// Put Modem Control Register(MCR) into its reset state of 0x00.
	writeSerialRegister(r_uart_mcr, 0x00)
	return 1u8
}
