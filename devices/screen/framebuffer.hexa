// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Performs visualization onto the screen

// Speed of rendering mostly depends on cache-locality
// Remember: top-down, left-to-right: for(y) for(x) {}, not other way!

var _framebuffer: FrameBuffer = null

// Avoid one level of pointer indirection
var _pixels: ArrayPointer<ByValue<Pixel32>> = null

fun allocateBitmap(width: UInt32, height: UInt32): Bitmap32 {
	// TODO allocateStruct<T>
	var result = PhysicalAllocator.allocateBytes(
		sizeOf<Bitmap32Interim>() +
		(sizeOf<Pixel32>() * width * height)
	) as! Bitmap32Interim
	result.width = width
	result.height = height
	result.pixels = (result as! UInt64 + 8 + 8) as! ArrayPointer<ByValue<Pixel32>>
	return result as! Bitmap32
}

fun setFramebuffer(framebuffer: FrameBuffer) {
	_framebuffer = framebuffer
	_pixels = _framebuffer.base as! ArrayPointer<ByValue<Pixel32>>
}

// Very fast, but not precise, alpha multiply
fun mul255(a255: UInt32, c255: UInt32): UInt8 {
	return ((a255 + 1) * c255 >> 8) as! UInt8
}

fun blend255(target: UInt32, color: UInt32, alpha: UInt32): UInt8 {
	return (mul255(alpha, color) + mul255(255u32 - alpha, target)) as! UInt8
}

@fastcall fun blendPixel(x: Int64, y: Int64, pixel: Pixel32) {
	let _framebuffer = _framebuffer // Faster access
	if (x > _framebuffer.width - 1) || (y > _framebuffer.height - 1) || (x < 0) || (y < 0) {
		return
	}
	var p: Pixel32 = _pixels[y * _framebuffer.width + x].ref

	p.rgba.ref.r = mul255(pixel.rgba.ref.a, pixel.rgba.ref.r) + mul255(255u32 - pixel.rgba.ref.a, p.rgba.ref.r)
	p.rgba.ref.g = mul255(pixel.rgba.ref.a, pixel.rgba.ref.g) + mul255(255u32 - pixel.rgba.ref.a, p.rgba.ref.g)
	p.rgba.ref.b = mul255(pixel.rgba.ref.a, pixel.rgba.ref.b) + mul255(255u32 - pixel.rgba.ref.a, p.rgba.ref.b)

	// TODO type check _pixels[y * _framebuffer.width + x] = p
}

@fastcall fun setPixel(x: Int64, y: Int64, pixel: ByValue<Pixel32>) {
	let _framebuffer = _framebuffer // Faster access
	if (x > _framebuffer.width - 1) || (y > _framebuffer.height - 1) || (x < 0) || (y < 0) {
		return
	}
	_pixels[y * _framebuffer.width + x] = pixel
}

fun drawBitmap32WithAlpha(bitmap: Bitmap32, x: Int16, y: Int16) {
	for yy in bitmap.height {
		for xx in bitmap.width {
			blendPixel(x + xx, y + yy, bitmap.pixels[yy * bitmap.width + xx].ref)
		}
	}
}

fun drawBitmap32(bitmap: Bitmap32, x: Int16, y: Int16) {
	for yy in bitmap.height {
		for xx in bitmap.width {
			setPixel(x + xx, y + yy, bitmap.pixels[yy * bitmap.width + xx])
		}
	}
}

fun drawRectangleWithAlpha(color: Pixel32, x: Int16, y: Int16, width: UInt16, height: UInt16) {
	for yy in height {
		for xx in width {
			blendPixel(x + xx, y + yy, color)
		}
	}
}

fun drawRectangle(color: ByValue<Pixel32>, x: Int16, y: Int16, width: UInt16, height: UInt16) {
	for yy in height {
		for xx in width {
			setPixel(x + xx, y + yy, color)
		}
	}
}

fun drawRectangleOutline(color: ByValue<Pixel32>, x: Int16, y: Int16, width: UInt16, height: UInt16) {
	for yy in height {
		for xx in width {
			// Rendering left and far right points sequentally should be
			// better for cache-locality than vertical lines
			// At least this is true for small rectangles (like buttons)
			if yy == 0 || xx == 0 || xx == width - 1 || yy == height - 1 {
				setPixel(x + xx, y + yy, color)
			}
		}
	}
}

fun line45smooth(color: ByValue<Pixel32>, x: Int16, y: Int16, width: Int16, mod: Int16) {
	color.ref.rgba.ref.a = 98
	var xx: Int16 = 0
	for xi in width - 1 {
		xx += mod
		setPixel(xx + x, y + xi, color)
		blendPixel(xx + x, y + xi + 1, color.ref)
		blendPixel(xx + x + mod, y + xi, color.ref)
	}
	xx += mod
	setPixel(xx + x, y + width - 1, color)
}

fun lineHorizontal(color: ByValue<Pixel32>, x: Int16, y: Int16, rightLength: UInt16) {
	for i in rightLength {
		setPixel(x + i, y, color)
	}
}

fun lineHorizontalWithAlpha(color: Pixel32, x: Int16, y: Int16, rightLength: UInt16) {
	for i in rightLength {
		blendPixel(x + i, y, color)
	}
}

fun lineVertical(color: ByValue<Pixel32>, x: Int16, y: Int16, bottomLength: UInt16) {
	for i in bottomLength {
		setPixel(x, y + i, color)
	}
}

fun lineVerticalWithAlpha(color: Pixel32, x: Int16, y: Int16, bottomLength: UInt16) {
	for i in bottomLength {
		blendPixel(x, y + i, color)
	}
}
