// The Tofita Kernel
// Copyright (C) 2022 Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun loadBitMap24(asset: RamDiskAsset): Bitmap32 {
	let buffer = asset.data as! UInt64
	// TODO uint32_t width_ = (buffer_ + (uint32_t*)((int32_t)18))[(int32_t)0];
	// also int32_t is wrong
	let width = ((buffer + 18) as! ArrayPointer<UInt32>)[0]
	let height = ((buffer + 22) as! ArrayPointer<UInt32>)[0]

	let bmp = allocateBitmap(width, height)
	let colors = buffer + 54 as! ArrayPointer<UInt8>

	for y in bmp.height {
		for x in bmp.width {
			bmp.pixels[y * width + x].ref.rgba.ref.a = 255 // transparency
			bmp.pixels[y * width + x].ref.rgba.ref.r = colors[((height - y - 1) * width + x) * 3 + 0]
			bmp.pixels[y * width + x].ref.rgba.ref.g = colors[((height - y - 1) * width + x) * 3 + 1]
			bmp.pixels[y * width + x].ref.rgba.ref.b = colors[((height - y - 1) * width + x) * 3 + 2]
		}
	}

	return bmp
}
