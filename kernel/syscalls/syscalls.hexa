// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// TODO protocol generator should make wrappers around user pointers,
// to validate them be within < lower user space otherwise nullify them or cancel syscall
// TODO randomize on every build (use version number)
// @randomize(min: 2, max: 123456)
let userSyscalls = 123000

// TODO store all syscalls as huge complex enum and generate all wrappers with macro
// and serializer to-from enum tags / wow64
//@castTo('TofitaSyscalls')
enum TofitaSyscalls : UInt32 {
	// System
	Noop = 0
	Cpu = 1

	// User
	// TODO DebugLog = userSyscalls
	DebugLog = 123000
	CreateWindowEx = 123001 // TODO auto compute
	ShowWindow = 123002 // TODO auto compute
	GetMessage = 123003 // TODO auto compute
	PostMessage = 123004 // TODO auto compute
	GetOrCreateWindowFramebuffer = 123005 // TODO auto compute
	SwapWindowFramebuffer = 123006 // TODO auto compute
	ExitProcess = 123007 // TODO auto compute
}

// Note: all pointers should be 64-bit even for 32-bit processes

// Note: all pointers must be stored as `UInt64` to avoid in-kernel occasional dereferencing

@sizeOfLessOrEqual(4096)
@struct class ProcessStartupInformation {
	var pid UInt64 = 0
	var entry UInt64 = 0
	var dllEntries UInt64 = 0
	var dllCount UInt64 = 0
	new () {}
}

@struct @sizeOf(8 * 3)
class DebugLogPayload {
	// ConstArrayPointer<UInt16>
	var message UInt64
	// TODO count chars at user space, and transfer as length for SEH probing
	var extra UInt64 = 0
	var more UInt64 = 0
	new () {}
}

@struct @sizeOf(8 * 2)
class SwapWindowFramebufferPayload {
	var windowId UInt64
	var fb UInt64 // WindowFramebuffer
	new () {}
}

@struct @sizeOf(8 * 2)
class ShowWindowPayload {
	var nCmdShow CmdShow
	var windowId UInt64
	new () {}
}

@struct
class LParam {
	new () {}
}

@struct
class WParam {
	new () {}
}

// TODO use pointer wrappers instead of raw pointers
@struct @sizeOf(8 * 8 + 5 * 4 + 4)
class CreateWindowExPayload {
	var wc UInt64 // WindowClass
	var hWnd UInt64 // HWnd

	// CreateWindowEx
	var lpClassName UInt64 // ConstArrayPointer<ClangWideChar>
	// TODO count chars at userspace, and transfer as length for SEH probing
	var lpWindowName UInt64 // ConstArrayPointer<ClangWideChar>
	var dwStyle UInt32
	var x Int32
	var y Int32
	var nWidth Int32
	var nHeight Int32
	var hWndParent UInt64 // HWnd
	var hMenu UInt64 // HMenu
	var hInstance UInt64 // HInstance
	var lpParam UInt64 // LParam
	new () {}
}

@struct @sizeOf(8 + 4 + 8 * 2 + 4)
class PostMessagePayload {
	var hWnd UInt64 // HWnd
	var msg Message
	// TODO ^ rename to msgId or something, to make clear it's not a struct
	var wParam UInt64 // WParam
	var lParam UInt64 // LParam
	new () {}
}

@struct @sizeOf(8 * 2 + 4 * 2)
class GetMessagePayload {
	var hwnd UInt64 // HWnd
	var message Message
	var wParam UInt64 // WParam
	var lParam UInt64 // LParam
	var time UInt32
	var pt ByValue<Point>
	var lPrivate UInt32

	var hWnd UInt64 // HWnd
	var wMsgFilterMin UInt32
	var wMsgFilterMax UInt32
	new () {}
}
