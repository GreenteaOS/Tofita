// The Tofita Kernel
// Copyright (C) 2020  Oleg Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Desktop window manager (i.e. GUI logic)

namespace dwm {

// Zero for system GUI (like taskbar)
UInt64 firstResponder = 0 // Active window to catch keyboard input

@struct
class OverlappedWindow {
	Bool present
	UInt64 pid // Owner
	// TODO tid - thread id
	UInt64 windowId
	UInt64 nextId
	UInt64 prevId
	wapi.HWnd hWnd

	Bool visible
	const WideChar *title

	Int16 x
	Int16 y

	UInt16 width
	UInt16 height

	// fb.pixels == null if framebuffer not present
	// Note: fb size may be != current window size
	Bitmap32 *fbZeta
	Bitmap32 *fbGama
	Bool fbCurrentZeta // Use to swap chain
}

const UInt64 windowsLimit = 256

// TODO allocate dynamically (just use Hexa Array or something)
OverlappedWindow windowsList[windowsLimit]

UInt64 rootWindow = 0
UInt64 topmostWindow = 0

Bool mouseDragCapturedWindow = false
UInt64 mouseDragWindow = 0
Int16 mouseDragLastX = 0
Int16 mouseDragLastY = 0

// Note: those are controlled by DWM
@volatile Int16 mouseX = 256
@volatile Int16 mouseY = 256

enum FrameHover : UInt8 { Noop = 0, Min, Max, Close }

UInt64 frameHoverWindow = 0
Bool frameHoverWindowDown = false
FrameHover frameHoverState = FrameHover.Noop

OverlappedWindow *OverlappedWindow_create(pid: UInt64)
OverlappedWindow *OverlappedWindow_findAnyProcessWindow(pid: UInt64)
OverlappedWindow *OverlappedWindow_find(pid: UInt64, windowId: UInt64)
fun OverlappedWindow_detach(UInt64 windowId)
fun OverlappedWindow_attach(UInt64 windowId)
fun OverlappedWindow_destroy(UInt64 windowId)
fun initDwm()
fun handleMouseActivity()
fun handleKeyboardActivity()
UInt64 findWindowUnderCursor(Int16 mouseX, mouseY: Int16)
} // namespace dwm
