// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun memzero(dest: ArrayPointer<UInt8>, len: UInt64) {
	memset(dest, 0, len)
}

@keep
@rename('___chkstk_ms')
fun chkstkStub(): Void {}

// TODO wipe this feature for now? or fix?
var startupMilliseconds: UInt64 = 0

@extern @rename('versionMajor') declare let versionMajor: Int
@extern @rename('versionMinor') declare let versionMinor: Int
@extern @rename('versionTag') declare let versionTag: Int

fun kernelInit(params: UefiPayload) {
	serialPrintln("<Tofita> Greentea OS " + versionMajor + "." + versionMinor + "." + versionTag + " kernel loaded and operational")
	serialPrintf("<Tofita> CR3 points to: %8\n", params.pml4 as! UInt64)
	// TODO `anyPtrOrObj as! UInt32` -> error precision lost on 64-bit
	paramsCache = params
	// DOWN_BYTES_TO_PAGES(params.ramBytes))
	PhysicalAllocator.init(params)
	PhysicalAllocator.resetCounter()
	let trapeze_ = PhysicalAllocator.allocateOnePage()
	let trapeze = PhysicalAllocator.allocatePages(8) // Bootloader

	pml4entries = ((wholePhysicalStart as! UInt64) + (params.pml4 as! UInt64)) as! ArrayPointer<ByValue<PageEntry>>

	// TODO
	if false {
		mapMemory(pml4entries, 4096, 4096, 256)
		mapMemory(pml4entries, 4096, 4096, 256)
		mapMemory(pml4entries, 4096 * 20u64, 4096 * 10u64, 256)

		serialPrintf("<> %8 == %8\n", (4096u64 * 10),
					 resolveAddr(pml4entries, 4096u64 * 20))
		serialPrintf("<> %8 == %8\n", (4096 * 10 + 123),
					 resolveAddr(pml4entries, 4096u64 * 20 + 123))
		serialPrintf("<> %8 == %8\n", (0),
					 resolveAddr(pml4entries, (wholePhysicalStart as! UInt64)))
		serialPrintf("<> %8 == %8\n", (0 + 123),
					 resolveAddr(pml4entries, (wholePhysicalStart as! UInt64) + 123))
		serialPrintf("<> %8 == %8\n", (0 + 4096),
					 resolveAddr(pml4entries, (wholePhysicalStart as! UInt64) + 4096))
		serialPrintf(
			"<> %8 == %8\n", (0 + 4096 * 1000 + 123),
			resolveAddr(pml4entries, (wholePhysicalStart as! UInt64) + 4096 * 1000 + 123))
		serialPrintf("<> %8 == %8\n", (1048576),
					 resolveAddr(pml4entries, 0xffff800000000000u64))
		serialPrintf("<> %8 == %8\n", (1048576 + 123),
					 resolveAddr(pml4entries, 0xffff800000000000u64 + 123))

		// TODO move all these to SanityCheck module
		// serialPrint("resolves from, to, wh, wh+8888: ")
		// serialPrint("\n")
		// serialPrintHex(4096 * 10)
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr(4096 * 20 + 123))
		// serialPrint("==\n")
		// serialPrintHex(pages.resolveAddr(4096 * 20))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr((wholePhysicalStart as! UInt64)))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr((wholePhysicalStart as! UInt64) + 8888))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr((wholePhysicalStart as! UInt64) + 4096 * 1000))
		// serialPrint("\n")
		// serialPrintHex(pages.resolveAddr(0xffff800000000000))
		// serialPrint("\n")
	}

	setFramebuffer(params.framebuffer.ref)
	setRamDisk(params.ramdisk.ref)

	// TODO >>
	// TODO move to SanityCheck
	// TODO this seems not to work?!
	if sizeOf<ArrayPointer<UInt8> >() == 4 {
		serialPrintln("<Tofita> void*: 4 bytes")
		// TODO QSOD
	} else {
		// Ok
	}
	if sizeOf<ArrayPointer<UInt8> >() == 8 {
		serialPrintln("<Tofita> void*: 8 bytes")
		// Ok
	} else {
		// TODO QSOD
	}

	// disablePic() TODO should be disabled after APIC
	setupInterruptsAndExceptions()
	// TODO rename to initializeInterrupts()
	enablePS2Mouse()

	initText()
	initializeCompositor()

	serialPrintln("<Tofita> quakePrintf(versionText.utf16())")
	let versionText = "Greentea OS " + versionMajor + "." + versionMinor + "." + versionTag + " loaded and operational\n"
	quakePrintf(versionText.utf16())

	// TODO enableLocalApic()

	var cpuid: CPUID = getCPUID()

	var megs: Int32 = Math.round(params.ramBytes / (1024.0 * 1024.0))
	quakePrintf("[CPU] %s %s %d MB RAM\n".utf16(), cpuid.vendorID, cpuid.brandName, megs)

	// disablePic() TODO may be required before activation
	if !ACPIParser.parse(params.acpiTablePhysical) {
		quakePrintf("ACPI is *not* loaded\n".utf16())
	} else {
		quakePrintf("ACPI 2.0 is loaded and ready\n".utf16())
	}

	quakePrintf("Enter 'help' for commands\n".utf16())

	{
		// TODO move to compositor/DWM
		var a: RamDiskAsset = new RamDiskAsset()
		getRamDiskAsset(a, "root/Windows/Web/Wallpaper/Tofita/default.bmp")
		var bmp: Bitmap32 = loadBitMap24(a)
		// TODO var bmp: Bitmap32 = loadBitMap24(Buffer.fromBytes(a.data))
		// ^ Buffer should not create a copy of data
		setWallpaper(bmp, WallpaperStyle.Center)
	}

	// TODO var sandbox = sandbox.createSandbox()
	initDwm()

	// Setup scheduling
	currentThread = ThreadKind.THREAD_INIT

	// GUI thread
	{
		memset(guiThreadFrame as! ArrayPointer<UInt8>, 0, sizeOf<InterruptFrame>()) // Zeroing TODO sizeOf
		memset(guiStack.ref, 0, stackSizeForKernelThread) // Zeroing
		// TODO allocate stack with PhyAllocator

		guiThreadFrame.ip = guiThreadStart as! UInt64
		guiThreadFrame.cs = Selector.SYS_CODE64_SEL
		// TODO allocate as physical memory
		guiThreadFrame.sp = guiStack.ref as! UInt64 + stackSizeForKernelThread
		guiThreadFrame.ss = Selector.SYS_DATA32_SEL
	}

	// Main thread
	{
		// TODO InterruptFrame.fillWithZeros() in constructor
		memset(kernelThreadFrame as! ArrayPointer<UInt8>, 0, sizeOf<InterruptFrame>()) // Zeroing
		memset(kernelStack.ref, 0, stackSizeForKernelThread) // Zeroing

		kernelThreadFrame.ip = kernelThreadStart as! UInt64
		kernelThreadFrame.cs = Selector.SYS_CODE64_SEL
		kernelThreadFrame.sp = kernelStack as! UInt64 + stackSizeForKernelThread
		kernelThreadFrame.ss = Selector.SYS_DATA32_SEL
	}

	// Idle process
	{
		// TODO must error `sizeOf(processes)`
		// processes[0] = new UserProcess()
		for i in 256 {
			// TODO optimizer: set Array.capacity to 256 upfront cause known value
			let process = new UserProcess()
			process.frame = new InterruptFrame()
			appendProcess(process)
			process.present = false
			process.schedulable = false
			process.name = "Empty"
			process.syscallToHandle = TofitaSyscalls.Noop
		}

		// TODO this is entirely useless
		for i in windowsLimit {
			let window = new OverlappedWindow()
			window.present = false
			windowsList[i] = window
		}

		var idle: UserProcess = processes[0]
		idle.pml4 = pml4entries // Save CR3 template to idle process
		idle.schedulable = true // At idle schedule to idle process
		idle.present = true
		idle.syscallToHandle = TofitaSyscalls.Noop
		idle.name = "System Idle Process"
		currentProcess = 0
		pml4kernelThread = processes[0].pml4
	}

	// GUI
	if false {
		{
			let guiProcess: UserProcess = processCreate()
			serialPrintf("<Tofita> GUI process ID == %u\n", guiProcess.pid)
			processInit(guiProcess)
			disableSerial = 1
			// TODO `@defer disableSerial = 0` <- `@` must have the lowest priority?
			disableSerial = 0
			guiProcess.name = "Greentea OS GUI"
			guiProcess.schedulable = true
		}
	}

	startupMilliseconds = paramsCache.time.ref.hour * 60 * 60 * 1000 + paramsCache.time.ref.minute * 60 * 1000 +
						  paramsCache.time.ref.second * 1000u64

	// Show something before scheduling delay
	composite(startupMilliseconds)
	copyToScreen()
	serialPrintln("<Tofita> [ready for scheduling]")
	// TODO must disable scheduler until this function exits
	// ^ currentThread = ThreadKind.THREAD_NOT_READY
}

fun switchToUserProcess() {
	var next = getNextProcess()

	// TODO comparing `nullable == 0` error
	if next == 0 {
		markAllProcessessSchedulable()
		// TODO markAllProcessesSchedulable() sess typo
		next = getNextProcess()
		// TODO ^ should return `Process?` not index
	}

	if next == 0 {
		enableAllInterruptsAndHalt() // Nothing to do
		// TODO yield into GUI thread if it has incomplete draws
		// (otherwise it may wait for the timer and drop frames)
	} else {
		yield()
		// TODO may timer somehow interrupt yield handler?
	}
}

fun kernelThread() {
	serialPrintln("<Tofita> [kernelThread] thread started")

	// TODO move to preTest with infinite loop on fail
	serialPrintf("<seh> before\n")
	//serialPrintf("<seh> 0 == %u\n", probeForReadOkay(321, 1))
	//serialPrintf("<seh> 1 == %u\n", probeForReadOkay(currentThread as! UInt64, 1))
	//serialPrintf("<seh> 0 == %u\n", probeForReadOkay(999999999, 1))
	//serialPrintf("<seh> 1 == %u\n", probeForReadOkay(guiStack as! UInt64, 1))
	//serialPrintf("<seh> 0 == %u\n", probeForReadOkay(-1u64, 1)) // TODO `-1u64` is invalid, also fix `~1`
	//serialPrintf("<seh> 1 == %u\n", probeForReadOkay(switchToNextProcess as! UInt64, 1))
	serialPrintf("<seh> done\n")

	while true {
		// TODO optimize cast to 1u64
		@volatile var index: UInt64 = 1 // Idle process ignored
		while index < 255 {		 // TODO
			@volatile var process = processes[index]
			if process != null, process.present == true {
				// TODO global isAnythingHappened to avoid Noop check for every process. It also must me TLS?
				if process.syscallToHandle != TofitaSyscalls.Noop {
					kernelThreadBusy = true
					@volatile let syscall = process.syscallToHandle
					process.syscallToHandle = TofitaSyscalls.Noop
					@volatile var frame = process.frame

					// Select pml4 to work within current process memory
					// Remember pml4 for proper restore from scheduling
					pml4kernelThread = process.pml4
					writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))

					// TODO refactor to separate syscall handler per-DLL

					if syscall == TofitaSyscalls.DebugLog {
						serialPrintf("[[DebugLog:PID %d]] ", index)
						serialPrintf("[[rcx=%u rdx=%8 r8=%8]] ", frame.rcxArg0, frame.rdxArg1, frame.r8)

						if probeForReadOkay(frame.rdxArg1, sizeOf<DebugLogPayload>()) {
							var payload = frame.rdxArg1 as! DebugLogPayload
							// Note this is still very unsafe
							// TODO safer one, with SEH + check to addrs be at userspace
							if probeForReadOkay((payload.message as! UInt64), 1) {
								// TODO Probably SEH in %s of serialPrintf itself
								// (at page boundary)
								serialPrintf(
									String.fromUTF16z(payload.message),
									payload.extra,
									payload.more
								)
							}
						}

						serialPrintf("\n")
						process.schedulable = true
					} else if syscall == TofitaSyscalls.ExitProcess {
						serialPrintf("[[ExitProcess:PID %d]] %d\n", index, frame.rdxArg1)
						process.present = false

						// Select pml4 of idle process for safety
						// TODO idle as `idle: UserProcess` var, not `[0]`
						pml4kernelThread = processes[0].pml4
						writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))

						// Deallocate process
						// TODO as UserProcess class method
						processDestroy(process)
					} else if syscall == TofitaSyscalls.Cpu {
						process.present = false
						serialPrintf("[[Cpu:PID %d]] %d\n", index, frame.rdxArg1)
						quakePrintf("UserProcess #%d closed due to CPU exception #%u\n".utf16(), index, frame.index)

						// Page fault
						if frame.index == 0x0E {
							quakePrintf("#PF at %8\n".utf16(), process.cr2PageFaultAddress)
						}
						if frame.index == 0x0D {
							quakePrintf("#GPF at %8\n".utf16(), frame.ip)
						}
						if frame.index == 0x03 {
							quakePrintf("#BP at %8\n".utf16(), frame.ip)
						}

						// Select pml4 of idle process for safety
						pml4kernelThread = processes[0].pml4
						// TODO `UserProcess.this.writeOwnCr3`
						writeCr3((pml4kernelThread as! UInt64) - (wholePhysicalStart as! UInt64))

						// Deallocate process
						processDestroy(process)
					} else {
						// TODO TofitaSyscalls.type.tagNameFromValue(syscall)
						frame.raxReturn = 0 // Must return at least something
						// Note ^ some code in syscall handlers may *read* this value
						// So set it to zero just in case

						if !userCallHandled(process, syscall) {
							// Unknown syscall is no-op
							serialPrintf("[[PID %d]] Unknown or unhandled syscall %d\n", index,
										 frame.rcxArg0)
							frame.raxReturn = 0
							process.schedulable = true
						}
					}

					// TODO `@defer` this
					kernelThreadBusy = false
				}
			}
			index++
		}

		switchToUserProcess()
	}
}

@emitHeader @linkAsIs
declare fun guiThreadStart(): Void

@emitHeader @linkAsIs
declare fun kernelThreadStart(): Void

fun guiThread() {
	serialPrintln("<Tofita> [guiThread] thread started")

	while true {
		if haveToRender == false {
			yield()
		}

		// TODO not best place for this
		if mouseActivity {
			mouseActivity = false
			handleMouseActivity()
		}

		if keyboardActivity {
			keyboardActivity = false
			handleKeyboardActivity()
		}

		// Overridden by `requestAnimationFrame`
		let hadToRender = haveToRender
		haveToRender = false

		if hadToRender {
			composite(startupMilliseconds)
			copyToScreen()
		}

		while qsodHappened {
			disableAllInterrupts()
			halt()
		}

		// Note: it must yield, otherwise never enters a kernel,
		// because scheduler never switches to the kernel from GUI thread
		// This allows to have better FPS
		yield()
	}
}

@rename('__sync_synchronize')
declare fun __sync_synchronize(): Void

fun kernelMain(params: UefiPayload) {
	kernelInit(params)
	__sync_synchronize()

	// TODO composite here first frame!!!
	// cause if crashes on hardware, at least it shows something

	// sti -> start scheduling here
	// It will erase whole stack on next scheduling
	// TODO kernel `yield`/`await`
	// TODO de-allocate pre-thread after first yield
	while true {
		enableAllInterruptsAndHalt()
	}
	// TODO hexa: error if code present in unreachable block
	// (no break/continue/throw)
}

// Data passed from UEFI
@rename('kernelParams') declare let kernelParams: UefiPayload

// Entry point of the project
kernelMain(kernelParams)
