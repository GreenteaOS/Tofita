// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

fun userCallHandled(@volatile process TofitaProcess, syscall TofitaSyscalls) Bool {
	@volatile var frame = process.frame

	if syscall == TofitaSyscalls.CreateWindowEx {
		if not probeForReadOkay(frame.rdxArg1, sizeOf<CreateWindowExPayload>()) {
			return false
		}

		var payload = frame.rdxArg1 as! CreateWindowExPayload

		// TODO why 16?
		if probeForReadOkay((payload.lpClassName as! UInt64), 16) {
			serialPrintf("<> lpClassName == %S\n", payload.lpClassName)
		}

		if probeForReadOkay((payload.lpWindowName as! UInt64), 16) {
			serialPrintf("<> lpWindowName == %S\n", payload.lpWindowName)
		}

		var window = overlappedWindow_create(process.pid)

		// TODO ensure this opaque value, and not an accessible pointer
		window.hWnd = payload.hWnd as! Handle

		// TODO proper probe method, probably separate probeForWideCharOkay
		// ^ probably should produce `String?` and separate `probeForCopyOkay`
		if probeForReadOkay((payload.lpWindowName as! UInt64), 8) {
			// TODO must error `candidate function not viable: no known conversion from 'const wchar_t *' to 'const uint16_t      *'` window.title = String.fromUTF16z(payload.lpWindowName)
			// TODO should limit the max string length and be SEH-safe
			// ^ maybe sehCountNonNull16bits(), oh no no no
			// this way may go out of think if virtual memory changes
			// instead String.consumeUTF16z that doesn't create a copy
			// no no no no no! just copy into global (TLS) char16[MAX_PATH]
			// and copy string from there! yeah! sehStringFromUTF16z(addr, limit: MAX_PATH - 1?)
			window.title = String.fromUTF16z(payload.lpWindowName as! ConstArrayPointer<UInt16>)
			// TODO ^ limit to lower address space, to not capable of reading kernel mem
			// TODO another idea of temporal mapping to zero page?
			// ^ this way values would be zero anyway so can be easily tested with guard
		} else {
			// TODO use app name here
			window.title = "undefined"
		}

		frame.raxReturn = window.windowId
		process.schedulable = true
		return true
	}

	if syscall == TofitaSyscalls.ShowWindow {
		// TODO merge to probeForReadAndConvert os it takes <T> and returns nullable for `if let`
		if not probeForReadOkay(frame.rdxArg1, sizeOf<ShowWindowPayload>()) {
			return false
		}

		let payload = frame.rdxArg1 as! ShowWindowPayload

		let windowId UInt64 = payload.windowId
		let nCmdShow = payload.nCmdShow
		var window = overlappedWindow_find(process.pid, windowId)

		if window != null {
			window.visible = true
			overlappedWindow_attach(windowId)
		}

		process.schedulable = true
		return true
	}

	// TODO to exhaustive switch over selected syscall enum subset
	// ^ just multi-inherit multiple enums
	if syscall == TofitaSyscalls.GetMessage {
		// TODO pointers should be validated to be not within kernel space!
		if not probeForWriteOkay(frame.rdxArg1, sizeOf<GetMessagePayload>()) {
			// TODO wrote here %S instead of %8 and it crashed, must think about such safety
			// serialPrintf("<> GetMessage frame.rdxArg1 probe fail %8\n", frame.rdxArg1)
			return false
		}

		let payload = frame.rdxArg1 as! GetMessagePayload

		frame.raxReturn = getMessage(process, payload).toZeroOrOne

		// Should sorts of loop forever
		if frame.raxReturn != 0 {
			process.schedulable = true
		} else {
			// process.syscallToHandle = TofitaSyscalls.GetMessage
			process.awaitsGetMessage = true
		}

		return true
	}

	if syscall == TofitaSyscalls.PostMessage {
		if not probeForReadOkay(frame.rdxArg1, sizeOf<PostMessagePayload>()) {
			return false
		}

		var payload = frame.rdxArg1 as! PostMessagePayload

		frame.raxReturn = postMessage(process, payload).toZeroOrOne

		process.schedulable = true
		return true
	}

	return false
}
