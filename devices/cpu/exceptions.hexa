// The Tofita Kernel
// Copyright (C) 2022-2023 Oleh Petrenko
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, version 3 of the License.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// CPU exceptions

// In case of kernel crash set instruction pointer to here
fun kernelThreadLoop() {
	serialPrintln("<Tofita> [looping forever]")
	while true {
		pause()
		disableAllInterrupts()
		halt()
	}
}

fun exceptionHandler(frame InterruptFrame) {
	// Page fault
	@volatile var cr2 UInt64 = 0
	if frame.index == 0x0E {
		cr2 = getCr2()
	}

	if currentThread == ThreadKind.THREAD_USER {
		@volatile let process TofitaProcess = processes[currentProcess]
		process.schedulable = false
		process.syscallToHandle = TofitaSyscalls.Cpu
		process.cr2PageFaultAddress = cr2
		switchToKernelThread(frame)
	} else if currentThread == ThreadKind.THREAD_KERNEL or currentThread == ThreadKind.THREAD_GUI {
		// SEH
		if isWithinSehProbe(frame.ip) {
			frame.ip = sehReturnFalse as! UInt64
			sehProbe = false
			return
		}

		@volatile let process TofitaProcess = processes[0]
		process.cr2PageFaultAddress = cr2

		// TODO re-enable serial here
		// disableSerial = no
		serialPrintf("\n\n<Tofita> Non-SEH exception\n")

		if currentThread == ThreadKind.THREAD_GUI {
			serialPrintf("Current context: THREAD_GUI\n")
		} else {
			serialPrintf("Current context: THREAD_KERNEL\n")
		}

		// 14 is Page Fault
		if frame.index == 14 {
			serialPrintf("Event: #PF [Page Fault]\n")
			if frame.ip == 0 {
				serialPrintf("Seems like trying to call a function of address null\n")
			}

			if cr2 == 0 {
				serialPrintf("Seems like null data pointer access\n")
			}
		}

		if frame.index == 13 {
			serialPrintf("Event: #GPF [General Protection Fault]\n")
			serialPrintf("Seems like trying to execute non-executable or write into write-protected memory\n")
			serialPrintf("IP at %8\n", frame.ip)
		}

		// TODO `@noCapture` on `fun kernelThreadLoop`
		frame.ip = kernelThreadLoop as! UInt64
		kernelThreadFrame.ip = kernelThreadLoop as! UInt64
		guiThreadFrame.ip = kernelThreadLoop as! UInt64

		qsod("Kernel-mode unhandled CPU exception: index = %u, code = %8, cr2 = %8\n".utf16(), frame.index, frame.code, cr2)
	}
}
